import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as googleProtobuf003 from '@ngx-grpc/well-known-types';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject } from '@angular/core';
import { GrpcMetadata, GrpcCallType, uint8ArrayToBase64 } from '@ngx-grpc/common';
import * as i1 from '@ngx-grpc/core';
import { throwStatusErrors, takeMessages, GRPC_CLIENT_FACTORY } from '@ngx-grpc/core';

/**
 * Message implementation for google.rpc.Status
 */
class Status {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Status to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.code = _value.code;
        this.message = _value.message;
        this.details = (_value.details || []).map(m => new googleProtobuf003.Any(m));
        Status.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Status();
        Status.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.code = _instance.code || 0;
        _instance.message = _instance.message || '';
        _instance.details = _instance.details || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.code = _reader.readInt32();
                    break;
                case 2:
                    _instance.message = _reader.readString();
                    break;
                case 3:
                    const messageInitializer3 = new googleProtobuf003.Any();
                    _reader.readMessage(messageInitializer3, googleProtobuf003.Any.deserializeBinaryFromReader);
                    (_instance.details = _instance.details || []).push(messageInitializer3);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Status.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.code) {
            _writer.writeInt32(1, _instance.code);
        }
        if (_instance.message) {
            _writer.writeString(2, _instance.message);
        }
        if (_instance.details && _instance.details.length) {
            _writer.writeRepeatedMessage(3, _instance.details, googleProtobuf003.Any.serializeBinaryToWriter);
        }
    }
    get code() {
        return this._code;
    }
    set code(value) {
        this._code = value;
    }
    get message() {
        return this._message;
    }
    set message(value) {
        this._message = value;
    }
    get details() {
        return this._details;
    }
    set details(value) {
        this._details = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Status.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            code: this.code,
            message: this.message,
            details: (this.details || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            code: this.code,
            message: this.message,
            details: (this.details || []).map(m => m.toProtobufJSON(options))
        };
    }
}
Status.id = 'google.rpc.Status';

/**
 * Message implementation for google.longrunning.Operation
 */
class Operation {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Operation to deeply clone from
     */
    constructor(_value) {
        this._result = Operation.ResultCase.none;
        _value = _value || {};
        this.name = _value.name;
        this.metadata = _value.metadata
            ? new googleProtobuf003.Any(_value.metadata)
            : undefined;
        this.done = _value.done;
        this.error = _value.error
            ? new Status(_value.error)
            : undefined;
        this.response = _value.response
            ? new googleProtobuf003.Any(_value.response)
            : undefined;
        Operation.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Operation();
        Operation.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.metadata = _instance.metadata || undefined;
        _instance.done = _instance.done || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.metadata = new googleProtobuf003.Any();
                    _reader.readMessage(_instance.metadata, googleProtobuf003.Any.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.done = _reader.readBool();
                    break;
                case 4:
                    _instance.error = new Status();
                    _reader.readMessage(_instance.error, Status.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.response = new googleProtobuf003.Any();
                    _reader.readMessage(_instance.response, googleProtobuf003.Any.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Operation.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.metadata) {
            _writer.writeMessage(2, _instance.metadata, googleProtobuf003.Any.serializeBinaryToWriter);
        }
        if (_instance.done) {
            _writer.writeBool(3, _instance.done);
        }
        if (_instance.error) {
            _writer.writeMessage(4, _instance.error, Status.serializeBinaryToWriter);
        }
        if (_instance.response) {
            _writer.writeMessage(5, _instance.response, googleProtobuf003.Any.serializeBinaryToWriter);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get metadata() {
        return this._metadata;
    }
    set metadata(value) {
        this._metadata = value;
    }
    get done() {
        return this._done;
    }
    set done(value) {
        this._done = value;
    }
    get error() {
        return this._error;
    }
    set error(value) {
        if (value !== undefined && value !== null) {
            this._response = undefined;
            this._result = Operation.ResultCase.error;
        }
        this._error = value;
    }
    get response() {
        return this._response;
    }
    set response(value) {
        if (value !== undefined && value !== null) {
            this._error = undefined;
            this._result = Operation.ResultCase.response;
        }
        this._response = value;
    }
    get result() {
        return this._result;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Operation.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            metadata: this.metadata ? this.metadata.toObject() : undefined,
            done: this.done,
            error: this.error ? this.error.toObject() : undefined,
            response: this.response ? this.response.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            metadata: this.metadata ? this.metadata.toProtobufJSON(options) : null,
            done: this.done,
            error: this.error ? this.error.toProtobufJSON(options) : null,
            response: this.response ? this.response.toProtobufJSON(options) : null
        };
    }
}
Operation.id = 'google.longrunning.Operation';
(function (Operation) {
    let ResultCase;
    (function (ResultCase) {
        ResultCase[ResultCase["none"] = 0] = "none";
        ResultCase[ResultCase["error"] = 1] = "error";
        ResultCase[ResultCase["response"] = 2] = "response";
    })(ResultCase = Operation.ResultCase || (Operation.ResultCase = {}));
})(Operation || (Operation = {}));
/**
 * Message implementation for google.longrunning.GetOperationRequest
 */
class GetOperationRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetOperationRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        GetOperationRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetOperationRequest();
        GetOperationRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetOperationRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetOperationRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
GetOperationRequest.id = 'google.longrunning.GetOperationRequest';
/**
 * Message implementation for google.longrunning.ListOperationsRequest
 */
class ListOperationsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListOperationsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.filter = _value.filter;
        this.pageSize = _value.pageSize;
        this.pageToken = _value.pageToken;
        ListOperationsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListOperationsRequest();
        ListOperationsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.filter = _instance.filter || '';
        _instance.pageSize = _instance.pageSize || 0;
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 4:
                    _instance.name = _reader.readString();
                    break;
                case 1:
                    _instance.filter = _reader.readString();
                    break;
                case 2:
                    _instance.pageSize = _reader.readInt32();
                    break;
                case 3:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListOperationsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(4, _instance.name);
        }
        if (_instance.filter) {
            _writer.writeString(1, _instance.filter);
        }
        if (_instance.pageSize) {
            _writer.writeInt32(2, _instance.pageSize);
        }
        if (_instance.pageToken) {
            _writer.writeString(3, _instance.pageToken);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get filter() {
        return this._filter;
    }
    set filter(value) {
        this._filter = value;
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        this._pageSize = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListOperationsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            filter: this.filter,
            pageSize: this.pageSize,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            filter: this.filter,
            pageSize: this.pageSize,
            pageToken: this.pageToken
        };
    }
}
ListOperationsRequest.id = 'google.longrunning.ListOperationsRequest';
/**
 * Message implementation for google.longrunning.ListOperationsResponse
 */
class ListOperationsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListOperationsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.operations = (_value.operations || []).map(m => new Operation(m));
        this.nextPageToken = _value.nextPageToken;
        ListOperationsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListOperationsResponse();
        ListOperationsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.operations = _instance.operations || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Operation();
                    _reader.readMessage(messageInitializer1, Operation.deserializeBinaryFromReader);
                    (_instance.operations = _instance.operations || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListOperationsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.operations && _instance.operations.length) {
            _writer.writeRepeatedMessage(1, _instance.operations, Operation.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get operations() {
        return this._operations;
    }
    set operations(value) {
        this._operations = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListOperationsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            operations: (this.operations || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            operations: (this.operations || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListOperationsResponse.id = 'google.longrunning.ListOperationsResponse';
/**
 * Message implementation for google.longrunning.CancelOperationRequest
 */
class CancelOperationRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CancelOperationRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        CancelOperationRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CancelOperationRequest();
        CancelOperationRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CancelOperationRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CancelOperationRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
CancelOperationRequest.id = 'google.longrunning.CancelOperationRequest';
/**
 * Message implementation for google.longrunning.DeleteOperationRequest
 */
class DeleteOperationRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteOperationRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        DeleteOperationRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteOperationRequest();
        DeleteOperationRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteOperationRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteOperationRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
DeleteOperationRequest.id = 'google.longrunning.DeleteOperationRequest';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Operations.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_OPERATIONS_CLIENT_SETTINGS = new InjectionToken('GRPC_OPERATIONS_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for google.longrunning.Operations
 */
class OperationsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /google.longrunning.Operations/ListOperations
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListOperationsResponse>>
             */
            listOperations: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/google.longrunning.Operations/ListOperations',
                    requestData,
                    requestMetadata,
                    requestClass: ListOperationsRequest,
                    responseClass: ListOperationsResponse
                });
            },
            /**
             * Unary RPC for /google.longrunning.Operations/GetOperation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Operation>>
             */
            getOperation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/google.longrunning.Operations/GetOperation',
                    requestData,
                    requestMetadata,
                    requestClass: GetOperationRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /google.longrunning.Operations/DeleteOperation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteOperation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/google.longrunning.Operations/DeleteOperation',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteOperationRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /google.longrunning.Operations/CancelOperation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            cancelOperation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/google.longrunning.Operations/CancelOperation',
                    requestData,
                    requestMetadata,
                    requestClass: CancelOperationRequest,
                    responseClass: googleProtobuf003.Empty
                });
            }
        };
        this.client = clientFactory.createClient('google.longrunning.Operations', settings);
    }
    /**
     * Unary RPC for /google.longrunning.Operations/ListOperations
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListOperationsResponse>
     */
    listOperations(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listOperations(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /google.longrunning.Operations/GetOperation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Operation>
     */
    getOperation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getOperation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /google.longrunning.Operations/DeleteOperation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteOperation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteOperation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /google.longrunning.Operations/CancelOperation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    cancelOperation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .cancelOperation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
OperationsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: OperationsClient, deps: [{ token: GRPC_OPERATIONS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
OperationsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: OperationsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: OperationsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_OPERATIONS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for google.type.LatLng
 */
class LatLng {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LatLng to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.latitude = _value.latitude;
        this.longitude = _value.longitude;
        LatLng.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LatLng();
        LatLng.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.latitude = _instance.latitude || 0;
        _instance.longitude = _instance.longitude || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.latitude = _reader.readDouble();
                    break;
                case 2:
                    _instance.longitude = _reader.readDouble();
                    break;
                default:
                    _reader.skipField();
            }
        }
        LatLng.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.latitude) {
            _writer.writeDouble(1, _instance.latitude);
        }
        if (_instance.longitude) {
            _writer.writeDouble(2, _instance.longitude);
        }
    }
    get latitude() {
        return this._latitude;
    }
    set latitude(value) {
        this._latitude = value;
    }
    get longitude() {
        return this._longitude;
    }
    set longitude(value) {
        this._longitude = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LatLng.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            latitude: this.latitude,
            longitude: this.longitude
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            latitude: this.latitude,
            longitude: this.longitude
        };
    }
}
LatLng.id = 'google.type.LatLng';

/**
 * Message implementation for google.api.Http
 */
class Http {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Http to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.rules = (_value.rules || []).map(m => new HttpRule(m));
        this.fullyDecodeReservedExpansion = _value.fullyDecodeReservedExpansion;
        Http.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Http();
        Http.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.rules = _instance.rules || [];
        _instance.fullyDecodeReservedExpansion =
            _instance.fullyDecodeReservedExpansion || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new HttpRule();
                    _reader.readMessage(messageInitializer1, HttpRule.deserializeBinaryFromReader);
                    (_instance.rules = _instance.rules || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.fullyDecodeReservedExpansion = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Http.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.rules && _instance.rules.length) {
            _writer.writeRepeatedMessage(1, _instance.rules, HttpRule.serializeBinaryToWriter);
        }
        if (_instance.fullyDecodeReservedExpansion) {
            _writer.writeBool(2, _instance.fullyDecodeReservedExpansion);
        }
    }
    get rules() {
        return this._rules;
    }
    set rules(value) {
        this._rules = value;
    }
    get fullyDecodeReservedExpansion() {
        return this._fullyDecodeReservedExpansion;
    }
    set fullyDecodeReservedExpansion(value) {
        this._fullyDecodeReservedExpansion = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Http.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            rules: (this.rules || []).map(m => m.toObject()),
            fullyDecodeReservedExpansion: this.fullyDecodeReservedExpansion
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            rules: (this.rules || []).map(m => m.toProtobufJSON(options)),
            fullyDecodeReservedExpansion: this.fullyDecodeReservedExpansion
        };
    }
}
Http.id = 'google.api.Http';
/**
 * Message implementation for google.api.HttpRule
 */
class HttpRule {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of HttpRule to deeply clone from
     */
    constructor(_value) {
        this._pattern = HttpRule.PatternCase.none;
        _value = _value || {};
        this.selector = _value.selector;
        this.get = _value.get;
        this.put = _value.put;
        this.post = _value.post;
        this.delete = _value.delete;
        this.patch = _value.patch;
        this.custom = _value.custom
            ? new CustomHttpPattern(_value.custom)
            : undefined;
        this.body = _value.body;
        this.responseBody = _value.responseBody;
        this.additionalBindings = (_value.additionalBindings || []).map(m => new HttpRule(m));
        HttpRule.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new HttpRule();
        HttpRule.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.selector = _instance.selector || '';
        _instance.body = _instance.body || '';
        _instance.responseBody = _instance.responseBody || '';
        _instance.additionalBindings = _instance.additionalBindings || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.selector = _reader.readString();
                    break;
                case 2:
                    _instance.get = _reader.readString();
                    break;
                case 3:
                    _instance.put = _reader.readString();
                    break;
                case 4:
                    _instance.post = _reader.readString();
                    break;
                case 5:
                    _instance.delete = _reader.readString();
                    break;
                case 6:
                    _instance.patch = _reader.readString();
                    break;
                case 8:
                    _instance.custom = new CustomHttpPattern();
                    _reader.readMessage(_instance.custom, CustomHttpPattern.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.body = _reader.readString();
                    break;
                case 12:
                    _instance.responseBody = _reader.readString();
                    break;
                case 11:
                    const messageInitializer11 = new HttpRule();
                    _reader.readMessage(messageInitializer11, HttpRule.deserializeBinaryFromReader);
                    (_instance.additionalBindings =
                        _instance.additionalBindings || []).push(messageInitializer11);
                    break;
                default:
                    _reader.skipField();
            }
        }
        HttpRule.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.selector) {
            _writer.writeString(1, _instance.selector);
        }
        if (_instance.get || _instance.get === '') {
            _writer.writeString(2, _instance.get);
        }
        if (_instance.put || _instance.put === '') {
            _writer.writeString(3, _instance.put);
        }
        if (_instance.post || _instance.post === '') {
            _writer.writeString(4, _instance.post);
        }
        if (_instance.delete || _instance.delete === '') {
            _writer.writeString(5, _instance.delete);
        }
        if (_instance.patch || _instance.patch === '') {
            _writer.writeString(6, _instance.patch);
        }
        if (_instance.custom) {
            _writer.writeMessage(8, _instance.custom, CustomHttpPattern.serializeBinaryToWriter);
        }
        if (_instance.body) {
            _writer.writeString(7, _instance.body);
        }
        if (_instance.responseBody) {
            _writer.writeString(12, _instance.responseBody);
        }
        if (_instance.additionalBindings && _instance.additionalBindings.length) {
            _writer.writeRepeatedMessage(11, _instance.additionalBindings, HttpRule.serializeBinaryToWriter);
        }
    }
    get selector() {
        return this._selector;
    }
    set selector(value) {
        this._selector = value;
    }
    get get() {
        return this._get;
    }
    set get(value) {
        if (value !== undefined && value !== null) {
            this._put = this._post = this._delete = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.get;
        }
        this._get = value;
    }
    get put() {
        return this._put;
    }
    set put(value) {
        if (value !== undefined && value !== null) {
            this._get = this._post = this._delete = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.put;
        }
        this._put = value;
    }
    get post() {
        return this._post;
    }
    set post(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._delete = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.post;
        }
        this._post = value;
    }
    get delete() {
        return this._delete;
    }
    set delete(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._post = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.delete;
        }
        this._delete = value;
    }
    get patch() {
        return this._patch;
    }
    set patch(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._post = this._delete = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.patch;
        }
        this._patch = value;
    }
    get custom() {
        return this._custom;
    }
    set custom(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._post = this._delete = this._patch = undefined;
            this._pattern = HttpRule.PatternCase.custom;
        }
        this._custom = value;
    }
    get body() {
        return this._body;
    }
    set body(value) {
        this._body = value;
    }
    get responseBody() {
        return this._responseBody;
    }
    set responseBody(value) {
        this._responseBody = value;
    }
    get additionalBindings() {
        return this._additionalBindings;
    }
    set additionalBindings(value) {
        this._additionalBindings = value;
    }
    get pattern() {
        return this._pattern;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        HttpRule.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            selector: this.selector,
            get: this.get,
            put: this.put,
            post: this.post,
            delete: this.delete,
            patch: this.patch,
            custom: this.custom ? this.custom.toObject() : undefined,
            body: this.body,
            responseBody: this.responseBody,
            additionalBindings: (this.additionalBindings || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            selector: this.selector,
            get: this.get === null || this.get === undefined ? null : this.get,
            put: this.put === null || this.put === undefined ? null : this.put,
            post: this.post === null || this.post === undefined ? null : this.post,
            delete: this.delete === null || this.delete === undefined ? null : this.delete,
            patch: this.patch === null || this.patch === undefined ? null : this.patch,
            custom: this.custom ? this.custom.toProtobufJSON(options) : null,
            body: this.body,
            responseBody: this.responseBody,
            additionalBindings: (this.additionalBindings || []).map(m => m.toProtobufJSON(options))
        };
    }
}
HttpRule.id = 'google.api.HttpRule';
(function (HttpRule) {
    let PatternCase;
    (function (PatternCase) {
        PatternCase[PatternCase["none"] = 0] = "none";
        PatternCase[PatternCase["get"] = 1] = "get";
        PatternCase[PatternCase["put"] = 2] = "put";
        PatternCase[PatternCase["post"] = 3] = "post";
        PatternCase[PatternCase["delete"] = 4] = "delete";
        PatternCase[PatternCase["patch"] = 5] = "patch";
        PatternCase[PatternCase["custom"] = 6] = "custom";
    })(PatternCase = HttpRule.PatternCase || (HttpRule.PatternCase = {}));
})(HttpRule || (HttpRule = {}));
/**
 * Message implementation for google.api.CustomHttpPattern
 */
class CustomHttpPattern {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CustomHttpPattern to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.kind = _value.kind;
        this.path = _value.path;
        CustomHttpPattern.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CustomHttpPattern();
        CustomHttpPattern.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.kind = _instance.kind || '';
        _instance.path = _instance.path || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.kind = _reader.readString();
                    break;
                case 2:
                    _instance.path = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CustomHttpPattern.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.kind) {
            _writer.writeString(1, _instance.kind);
        }
        if (_instance.path) {
            _writer.writeString(2, _instance.path);
        }
    }
    get kind() {
        return this._kind;
    }
    set kind(value) {
        this._kind = value;
    }
    get path() {
        return this._path;
    }
    set path(value) {
        this._path = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CustomHttpPattern.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            kind: this.kind,
            path: this.path
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            kind: this.kind,
            path: this.path
        };
    }
}
CustomHttpPattern.id = 'google.api.CustomHttpPattern';

var SortingMode;
(function (SortingMode) {
    SortingMode[SortingMode["ASCENDING"] = 0] = "ASCENDING";
    SortingMode[SortingMode["DESCENDING"] = 1] = "DESCENDING";
})(SortingMode || (SortingMode = {}));
/**
 * Message implementation for ondewo.nlu.StatResponse
 */
class StatResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of StatResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.value = _value.value;
        StatResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new StatResponse();
        StatResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.value = _instance.value || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.value = _reader.readUint32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        StatResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.value) {
            _writer.writeUint32(1, _instance.value);
        }
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        StatResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            value: this.value
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            value: this.value
        };
    }
}
StatResponse.id = 'ondewo.nlu.StatResponse';

var EntityTypeView;
(function (EntityTypeView) {
    EntityTypeView[EntityTypeView["ENTITY_TYPE_VIEW_UNSPECIFIED"] = 0] = "ENTITY_TYPE_VIEW_UNSPECIFIED";
    EntityTypeView[EntityTypeView["ENTITY_TYPE_VIEW_FULL"] = 1] = "ENTITY_TYPE_VIEW_FULL";
    EntityTypeView[EntityTypeView["ENTITY_TYPE_VIEW_PARTIAL"] = 2] = "ENTITY_TYPE_VIEW_PARTIAL";
    EntityTypeView[EntityTypeView["ENTITY_TYPE_VIEW_SHALLOW"] = 3] = "ENTITY_TYPE_VIEW_SHALLOW";
})(EntityTypeView || (EntityTypeView = {}));
var EntityTypeCategory;
(function (EntityTypeCategory) {
    EntityTypeCategory[EntityTypeCategory["ALL_ENTITY_TYPES"] = 0] = "ALL_ENTITY_TYPES";
    EntityTypeCategory[EntityTypeCategory["DEFAULT_ENTITY_TYPES"] = 1] = "DEFAULT_ENTITY_TYPES";
    EntityTypeCategory[EntityTypeCategory["USER_DEFINED_ENTITY_TYPES"] = 2] = "USER_DEFINED_ENTITY_TYPES";
})(EntityTypeCategory || (EntityTypeCategory = {}));
/**
 * Message implementation for ondewo.nlu.EntityType
 */
class EntityType {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityType to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.displayName = _value.displayName;
        this.kind = _value.kind;
        this.autoExpansionMode = _value.autoExpansionMode;
        this.entities = (_value.entities || []).map(m => new EntityType.Entity(m));
        this.nextPageToken = _value.nextPageToken;
        this.entityCount = _value.entityCount;
        this.status = _value.status;
        this.synonymCount = _value.synonymCount;
        EntityType.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityType();
        EntityType.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.displayName = _instance.displayName || '';
        _instance.kind = _instance.kind || 0;
        _instance.autoExpansionMode = _instance.autoExpansionMode || 0;
        _instance.entities = _instance.entities || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
        _instance.entityCount = _instance.entityCount || 0;
        _instance.status = _instance.status || 0;
        _instance.synonymCount = _instance.synonymCount || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.displayName = _reader.readString();
                    break;
                case 3:
                    _instance.kind = _reader.readEnum();
                    break;
                case 4:
                    _instance.autoExpansionMode = _reader.readEnum();
                    break;
                case 6:
                    const messageInitializer6 = new EntityType.Entity();
                    _reader.readMessage(messageInitializer6, EntityType.Entity.deserializeBinaryFromReader);
                    (_instance.entities = _instance.entities || []).push(messageInitializer6);
                    break;
                case 10:
                    _instance.nextPageToken = _reader.readString();
                    break;
                case 11:
                    _instance.entityCount = _reader.readInt32();
                    break;
                case 12:
                    _instance.status = _reader.readEnum();
                    break;
                case 13:
                    _instance.synonymCount = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityType.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.displayName) {
            _writer.writeString(2, _instance.displayName);
        }
        if (_instance.kind) {
            _writer.writeEnum(3, _instance.kind);
        }
        if (_instance.autoExpansionMode) {
            _writer.writeEnum(4, _instance.autoExpansionMode);
        }
        if (_instance.entities && _instance.entities.length) {
            _writer.writeRepeatedMessage(6, _instance.entities, EntityType.Entity.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(10, _instance.nextPageToken);
        }
        if (_instance.entityCount) {
            _writer.writeInt32(11, _instance.entityCount);
        }
        if (_instance.status) {
            _writer.writeEnum(12, _instance.status);
        }
        if (_instance.synonymCount) {
            _writer.writeInt32(13, _instance.synonymCount);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get displayName() {
        return this._displayName;
    }
    set displayName(value) {
        this._displayName = value;
    }
    get kind() {
        return this._kind;
    }
    set kind(value) {
        this._kind = value;
    }
    get autoExpansionMode() {
        return this._autoExpansionMode;
    }
    set autoExpansionMode(value) {
        this._autoExpansionMode = value;
    }
    get entities() {
        return this._entities;
    }
    set entities(value) {
        this._entities = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    get entityCount() {
        return this._entityCount;
    }
    set entityCount(value) {
        this._entityCount = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get synonymCount() {
        return this._synonymCount;
    }
    set synonymCount(value) {
        this._synonymCount = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityType.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            displayName: this.displayName,
            kind: this.kind,
            autoExpansionMode: this.autoExpansionMode,
            entities: (this.entities || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken,
            entityCount: this.entityCount,
            status: this.status,
            synonymCount: this.synonymCount
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            displayName: this.displayName,
            kind: EntityType.Kind[this.kind === null || this.kind === undefined ? 0 : this.kind],
            autoExpansionMode: EntityType.AutoExpansionMode[this.autoExpansionMode === null ||
                this.autoExpansionMode === undefined
                ? 0
                : this.autoExpansionMode],
            entities: (this.entities || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken,
            entityCount: this.entityCount,
            status: EntityType.EntityTypeStatus[this.status === null || this.status === undefined ? 0 : this.status],
            synonymCount: this.synonymCount
        };
    }
}
EntityType.id = 'ondewo.nlu.EntityType';
(function (EntityType) {
    let Kind;
    (function (Kind) {
        Kind[Kind["KIND_UNSPECIFIED"] = 0] = "KIND_UNSPECIFIED";
        Kind[Kind["KIND_MAP"] = 1] = "KIND_MAP";
        Kind[Kind["KIND_LIST"] = 2] = "KIND_LIST";
    })(Kind = EntityType.Kind || (EntityType.Kind = {}));
    let EntityTypeStatus;
    (function (EntityTypeStatus) {
        EntityTypeStatus[EntityTypeStatus["ACTIVE"] = 0] = "ACTIVE";
        EntityTypeStatus[EntityTypeStatus["INACTIVE"] = 1] = "INACTIVE";
    })(EntityTypeStatus = EntityType.EntityTypeStatus || (EntityType.EntityTypeStatus = {}));
    let AutoExpansionMode;
    (function (AutoExpansionMode) {
        AutoExpansionMode[AutoExpansionMode["AUTO_EXPANSION_MODE_UNSPECIFIED"] = 0] = "AUTO_EXPANSION_MODE_UNSPECIFIED";
        AutoExpansionMode[AutoExpansionMode["AUTO_EXPANSION_MODE_DEFAULT"] = 1] = "AUTO_EXPANSION_MODE_DEFAULT";
    })(AutoExpansionMode = EntityType.AutoExpansionMode || (EntityType.AutoExpansionMode = {}));
    /**
     * Message implementation for ondewo.nlu.Entity
     */
    class Entity {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of Entity to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.value = _value.value;
            this.synonyms = (_value.synonyms || []).slice();
            this.name = _value.name;
            this.displayName = _value.displayName;
            this.synonymCount = _value.synonymCount;
            this.languageCode = _value.languageCode;
            Entity.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new Entity();
            Entity.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.value = _instance.value || '';
            _instance.synonyms = _instance.synonyms || [];
            _instance.name = _instance.name || '';
            _instance.displayName = _instance.displayName || '';
            _instance.synonymCount = _instance.synonymCount || 0;
            _instance.languageCode = _instance.languageCode || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.value = _reader.readString();
                        break;
                    case 2:
                        (_instance.synonyms = _instance.synonyms || []).push(_reader.readString());
                        break;
                    case 3:
                        _instance.name = _reader.readString();
                        break;
                    case 4:
                        _instance.displayName = _reader.readString();
                        break;
                    case 5:
                        _instance.synonymCount = _reader.readInt32();
                        break;
                    case 6:
                        _instance.languageCode = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            Entity.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.value) {
                _writer.writeString(1, _instance.value);
            }
            if (_instance.synonyms && _instance.synonyms.length) {
                _writer.writeRepeatedString(2, _instance.synonyms);
            }
            if (_instance.name) {
                _writer.writeString(3, _instance.name);
            }
            if (_instance.displayName) {
                _writer.writeString(4, _instance.displayName);
            }
            if (_instance.synonymCount) {
                _writer.writeInt32(5, _instance.synonymCount);
            }
            if (_instance.languageCode) {
                _writer.writeString(6, _instance.languageCode);
            }
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        get synonyms() {
            return this._synonyms;
        }
        set synonyms(value) {
            this._synonyms = value;
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        get displayName() {
            return this._displayName;
        }
        set displayName(value) {
            this._displayName = value;
        }
        get synonymCount() {
            return this._synonymCount;
        }
        set synonymCount(value) {
            this._synonymCount = value;
        }
        get languageCode() {
            return this._languageCode;
        }
        set languageCode(value) {
            this._languageCode = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            Entity.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                value: this.value,
                synonyms: (this.synonyms || []).slice(),
                name: this.name,
                displayName: this.displayName,
                synonymCount: this.synonymCount,
                languageCode: this.languageCode
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                value: this.value,
                synonyms: (this.synonyms || []).slice(),
                name: this.name,
                displayName: this.displayName,
                synonymCount: this.synonymCount,
                languageCode: this.languageCode
            };
        }
    }
    Entity.id = 'ondewo.nlu.Entity';
    EntityType.Entity = Entity;
})(EntityType || (EntityType = {}));
/**
 * Message implementation for ondewo.nlu.ListEntityTypesRequest
 */
class ListEntityTypesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListEntityTypesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCode = _value.languageCode;
        this.pageToken = _value.pageToken;
        this.entityTypeView = _value.entityTypeView;
        this.filterByCategory = _value.filterByCategory;
        this.sortByField = _value.sortByField
            ? new EntityTypeSorting(_value.sortByField)
            : undefined;
        ListEntityTypesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListEntityTypesRequest();
        ListEntityTypesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.pageToken = _instance.pageToken || '';
        _instance.entityTypeView = _instance.entityTypeView || 0;
        _instance.filterByCategory = _instance.filterByCategory || 0;
        _instance.sortByField = _instance.sortByField || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.pageToken = _reader.readString();
                    break;
                case 5:
                    _instance.entityTypeView = _reader.readEnum();
                    break;
                case 6:
                    _instance.filterByCategory = _reader.readEnum();
                    break;
                case 7:
                    _instance.sortByField = new EntityTypeSorting();
                    _reader.readMessage(_instance.sortByField, EntityTypeSorting.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListEntityTypesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.pageToken) {
            _writer.writeString(4, _instance.pageToken);
        }
        if (_instance.entityTypeView) {
            _writer.writeEnum(5, _instance.entityTypeView);
        }
        if (_instance.filterByCategory) {
            _writer.writeEnum(6, _instance.filterByCategory);
        }
        if (_instance.sortByField) {
            _writer.writeMessage(7, _instance.sortByField, EntityTypeSorting.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get entityTypeView() {
        return this._entityTypeView;
    }
    set entityTypeView(value) {
        this._entityTypeView = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    get sortByField() {
        return this._sortByField;
    }
    set sortByField(value) {
        this._sortByField = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListEntityTypesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            pageToken: this.pageToken,
            entityTypeView: this.entityTypeView,
            filterByCategory: this.filterByCategory,
            sortByField: this.sortByField ? this.sortByField.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            pageToken: this.pageToken,
            entityTypeView: EntityTypeView[this.entityTypeView === null || this.entityTypeView === undefined
                ? 0
                : this.entityTypeView],
            filterByCategory: EntityTypeCategory[this.filterByCategory === null || this.filterByCategory === undefined
                ? 0
                : this.filterByCategory],
            sortByField: this.sortByField
                ? this.sortByField.toProtobufJSON(options)
                : null
        };
    }
}
ListEntityTypesRequest.id = 'ondewo.nlu.ListEntityTypesRequest';
/**
 * Message implementation for ondewo.nlu.ListEntityTypesResponse
 */
class ListEntityTypesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListEntityTypesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityTypes = (_value.entityTypes || []).map(m => new EntityType(m));
        this.nextPageToken = _value.nextPageToken;
        ListEntityTypesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListEntityTypesResponse();
        ListEntityTypesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityTypes = _instance.entityTypes || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new EntityType();
                    _reader.readMessage(messageInitializer1, EntityType.deserializeBinaryFromReader);
                    (_instance.entityTypes = _instance.entityTypes || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListEntityTypesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityTypes && _instance.entityTypes.length) {
            _writer.writeRepeatedMessage(1, _instance.entityTypes, EntityType.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get entityTypes() {
        return this._entityTypes;
    }
    set entityTypes(value) {
        this._entityTypes = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListEntityTypesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityTypes: (this.entityTypes || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityTypes: (this.entityTypes || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListEntityTypesResponse.id = 'ondewo.nlu.ListEntityTypesResponse';
/**
 * Message implementation for ondewo.nlu.GetEntityTypeRequest
 */
class GetEntityTypeRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetEntityTypeRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.languageCode = _value.languageCode;
        this.pageToken = _value.pageToken;
        this.entityTypeView = _value.entityTypeView;
        GetEntityTypeRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetEntityTypeRequest();
        GetEntityTypeRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.pageToken = _instance.pageToken || '';
        _instance.entityTypeView = _instance.entityTypeView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.pageToken = _reader.readString();
                    break;
                case 6:
                    _instance.entityTypeView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetEntityTypeRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.pageToken) {
            _writer.writeString(5, _instance.pageToken);
        }
        if (_instance.entityTypeView) {
            _writer.writeEnum(6, _instance.entityTypeView);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get entityTypeView() {
        return this._entityTypeView;
    }
    set entityTypeView(value) {
        this._entityTypeView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetEntityTypeRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            languageCode: this.languageCode,
            pageToken: this.pageToken,
            entityTypeView: this.entityTypeView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            languageCode: this.languageCode,
            pageToken: this.pageToken,
            entityTypeView: EntityTypeView[this.entityTypeView === null || this.entityTypeView === undefined
                ? 0
                : this.entityTypeView]
        };
    }
}
GetEntityTypeRequest.id = 'ondewo.nlu.GetEntityTypeRequest';
/**
 * Message implementation for ondewo.nlu.CreateEntityTypeRequest
 */
class CreateEntityTypeRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateEntityTypeRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.entityType = _value.entityType
            ? new EntityType(_value.entityType)
            : undefined;
        this.languageCode = _value.languageCode;
        this.entityTypeView = _value.entityTypeView;
        CreateEntityTypeRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateEntityTypeRequest();
        CreateEntityTypeRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.entityType = _instance.entityType || undefined;
        _instance.languageCode = _instance.languageCode || '';
        _instance.entityTypeView = _instance.entityTypeView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.entityType = new EntityType();
                    _reader.readMessage(_instance.entityType, EntityType.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 6:
                    _instance.entityTypeView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateEntityTypeRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.entityType) {
            _writer.writeMessage(2, _instance.entityType, EntityType.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.entityTypeView) {
            _writer.writeEnum(6, _instance.entityTypeView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get entityType() {
        return this._entityType;
    }
    set entityType(value) {
        this._entityType = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get entityTypeView() {
        return this._entityTypeView;
    }
    set entityTypeView(value) {
        this._entityTypeView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateEntityTypeRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            entityType: this.entityType ? this.entityType.toObject() : undefined,
            languageCode: this.languageCode,
            entityTypeView: this.entityTypeView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            entityType: this.entityType
                ? this.entityType.toProtobufJSON(options)
                : null,
            languageCode: this.languageCode,
            entityTypeView: EntityTypeView[this.entityTypeView === null || this.entityTypeView === undefined
                ? 0
                : this.entityTypeView]
        };
    }
}
CreateEntityTypeRequest.id = 'ondewo.nlu.CreateEntityTypeRequest';
/**
 * Message implementation for ondewo.nlu.UpdateEntityTypeRequest
 */
class UpdateEntityTypeRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateEntityTypeRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityType = _value.entityType
            ? new EntityType(_value.entityType)
            : undefined;
        this.languageCode = _value.languageCode;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        this.entityTypeView = _value.entityTypeView;
        UpdateEntityTypeRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateEntityTypeRequest();
        UpdateEntityTypeRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityType = _instance.entityType || undefined;
        _instance.languageCode = _instance.languageCode || '';
        _instance.updateMask = _instance.updateMask || undefined;
        _instance.entityTypeView = _instance.entityTypeView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.entityType = new EntityType();
                    _reader.readMessage(_instance.entityType, EntityType.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.entityTypeView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateEntityTypeRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityType) {
            _writer.writeMessage(1, _instance.entityType, EntityType.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(3, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
        if (_instance.entityTypeView) {
            _writer.writeEnum(6, _instance.entityTypeView);
        }
    }
    get entityType() {
        return this._entityType;
    }
    set entityType(value) {
        this._entityType = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    get entityTypeView() {
        return this._entityTypeView;
    }
    set entityTypeView(value) {
        this._entityTypeView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateEntityTypeRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityType: this.entityType ? this.entityType.toObject() : undefined,
            languageCode: this.languageCode,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined,
            entityTypeView: this.entityTypeView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityType: this.entityType
                ? this.entityType.toProtobufJSON(options)
                : null,
            languageCode: this.languageCode,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null,
            entityTypeView: EntityTypeView[this.entityTypeView === null || this.entityTypeView === undefined
                ? 0
                : this.entityTypeView]
        };
    }
}
UpdateEntityTypeRequest.id = 'ondewo.nlu.UpdateEntityTypeRequest';
/**
 * Message implementation for ondewo.nlu.DeleteEntityTypeRequest
 */
class DeleteEntityTypeRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteEntityTypeRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        DeleteEntityTypeRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteEntityTypeRequest();
        DeleteEntityTypeRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteEntityTypeRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteEntityTypeRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
DeleteEntityTypeRequest.id = 'ondewo.nlu.DeleteEntityTypeRequest';
/**
 * Message implementation for ondewo.nlu.BatchUpdateEntityTypesRequest
 */
class BatchUpdateEntityTypesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateEntityTypesRequest to deeply clone from
     */
    constructor(_value) {
        this._entityTypeBatch = BatchUpdateEntityTypesRequest.EntityTypeBatchCase.none;
        _value = _value || {};
        this.parent = _value.parent;
        this.entityTypeBatchUri = _value.entityTypeBatchUri;
        this.entityTypeBatchInline = _value.entityTypeBatchInline
            ? new EntityTypeBatch(_value.entityTypeBatchInline)
            : undefined;
        this.languageCode = _value.languageCode;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        BatchUpdateEntityTypesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateEntityTypesRequest();
        BatchUpdateEntityTypesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.updateMask = _instance.updateMask || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.entityTypeBatchUri = _reader.readString();
                    break;
                case 3:
                    _instance.entityTypeBatchInline = new EntityTypeBatch();
                    _reader.readMessage(_instance.entityTypeBatchInline, EntityTypeBatch.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateEntityTypesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.entityTypeBatchUri || _instance.entityTypeBatchUri === '') {
            _writer.writeString(2, _instance.entityTypeBatchUri);
        }
        if (_instance.entityTypeBatchInline) {
            _writer.writeMessage(3, _instance.entityTypeBatchInline, EntityTypeBatch.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(5, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get entityTypeBatchUri() {
        return this._entityTypeBatchUri;
    }
    set entityTypeBatchUri(value) {
        if (value !== undefined && value !== null) {
            this._entityTypeBatchInline = undefined;
            this._entityTypeBatch =
                BatchUpdateEntityTypesRequest.EntityTypeBatchCase.entityTypeBatchUri;
        }
        this._entityTypeBatchUri = value;
    }
    get entityTypeBatchInline() {
        return this._entityTypeBatchInline;
    }
    set entityTypeBatchInline(value) {
        if (value !== undefined && value !== null) {
            this._entityTypeBatchUri = undefined;
            this._entityTypeBatch =
                BatchUpdateEntityTypesRequest.EntityTypeBatchCase.entityTypeBatchInline;
        }
        this._entityTypeBatchInline = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    get entityTypeBatch() {
        return this._entityTypeBatch;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateEntityTypesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            entityTypeBatchUri: this.entityTypeBatchUri,
            entityTypeBatchInline: this.entityTypeBatchInline
                ? this.entityTypeBatchInline.toObject()
                : undefined,
            languageCode: this.languageCode,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            entityTypeBatchUri: this.entityTypeBatchUri === null ||
                this.entityTypeBatchUri === undefined
                ? null
                : this.entityTypeBatchUri,
            entityTypeBatchInline: this.entityTypeBatchInline
                ? this.entityTypeBatchInline.toProtobufJSON(options)
                : null,
            languageCode: this.languageCode,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null
        };
    }
}
BatchUpdateEntityTypesRequest.id = 'ondewo.nlu.BatchUpdateEntityTypesRequest';
(function (BatchUpdateEntityTypesRequest) {
    let EntityTypeBatchCase;
    (function (EntityTypeBatchCase) {
        EntityTypeBatchCase[EntityTypeBatchCase["none"] = 0] = "none";
        EntityTypeBatchCase[EntityTypeBatchCase["entityTypeBatchUri"] = 1] = "entityTypeBatchUri";
        EntityTypeBatchCase[EntityTypeBatchCase["entityTypeBatchInline"] = 2] = "entityTypeBatchInline";
    })(EntityTypeBatchCase = BatchUpdateEntityTypesRequest.EntityTypeBatchCase || (BatchUpdateEntityTypesRequest.EntityTypeBatchCase = {}));
})(BatchUpdateEntityTypesRequest || (BatchUpdateEntityTypesRequest = {}));
/**
 * Message implementation for ondewo.nlu.BatchUpdateEntityTypesResponse
 */
class BatchUpdateEntityTypesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateEntityTypesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityTypes = (_value.entityTypes || []).map(m => new EntityType(m));
        BatchUpdateEntityTypesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateEntityTypesResponse();
        BatchUpdateEntityTypesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityTypes = _instance.entityTypes || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new EntityType();
                    _reader.readMessage(messageInitializer1, EntityType.deserializeBinaryFromReader);
                    (_instance.entityTypes = _instance.entityTypes || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateEntityTypesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityTypes && _instance.entityTypes.length) {
            _writer.writeRepeatedMessage(1, _instance.entityTypes, EntityType.serializeBinaryToWriter);
        }
    }
    get entityTypes() {
        return this._entityTypes;
    }
    set entityTypes(value) {
        this._entityTypes = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateEntityTypesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityTypes: (this.entityTypes || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityTypes: (this.entityTypes || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchUpdateEntityTypesResponse.id = 'ondewo.nlu.BatchUpdateEntityTypesResponse';
/**
 * Message implementation for ondewo.nlu.BatchDeleteEntityTypesRequest
 */
class BatchDeleteEntityTypesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteEntityTypesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.entityTypeNames = (_value.entityTypeNames || []).slice();
        BatchDeleteEntityTypesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteEntityTypesRequest();
        BatchDeleteEntityTypesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.entityTypeNames = _instance.entityTypeNames || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    (_instance.entityTypeNames = _instance.entityTypeNames || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteEntityTypesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.entityTypeNames && _instance.entityTypeNames.length) {
            _writer.writeRepeatedString(2, _instance.entityTypeNames);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get entityTypeNames() {
        return this._entityTypeNames;
    }
    set entityTypeNames(value) {
        this._entityTypeNames = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteEntityTypesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            entityTypeNames: (this.entityTypeNames || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            entityTypeNames: (this.entityTypeNames || []).slice()
        };
    }
}
BatchDeleteEntityTypesRequest.id = 'ondewo.nlu.BatchDeleteEntityTypesRequest';
/**
 * Message implementation for ondewo.nlu.EntityTypeBatch
 */
class EntityTypeBatch {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityTypeBatch to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityTypes = (_value.entityTypes || []).map(m => new EntityType(m));
        EntityTypeBatch.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityTypeBatch();
        EntityTypeBatch.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityTypes = _instance.entityTypes || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new EntityType();
                    _reader.readMessage(messageInitializer1, EntityType.deserializeBinaryFromReader);
                    (_instance.entityTypes = _instance.entityTypes || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityTypeBatch.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityTypes && _instance.entityTypes.length) {
            _writer.writeRepeatedMessage(1, _instance.entityTypes, EntityType.serializeBinaryToWriter);
        }
    }
    get entityTypes() {
        return this._entityTypes;
    }
    set entityTypes(value) {
        this._entityTypes = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityTypeBatch.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityTypes: (this.entityTypes || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityTypes: (this.entityTypes || []).map(m => m.toProtobufJSON(options))
        };
    }
}
EntityTypeBatch.id = 'ondewo.nlu.EntityTypeBatch';
/**
 * Message implementation for ondewo.nlu.EntityTypeSorting
 */
class EntityTypeSorting {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityTypeSorting to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sortingField = _value.sortingField;
        this.sortingMode = _value.sortingMode;
        EntityTypeSorting.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityTypeSorting();
        EntityTypeSorting.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sortingField = _instance.sortingField || 0;
        _instance.sortingMode = _instance.sortingMode || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sortingField = _reader.readEnum();
                    break;
                case 2:
                    _instance.sortingMode = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityTypeSorting.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sortingField) {
            _writer.writeEnum(1, _instance.sortingField);
        }
        if (_instance.sortingMode) {
            _writer.writeEnum(2, _instance.sortingMode);
        }
    }
    get sortingField() {
        return this._sortingField;
    }
    set sortingField(value) {
        this._sortingField = value;
    }
    get sortingMode() {
        return this._sortingMode;
    }
    set sortingMode(value) {
        this._sortingMode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityTypeSorting.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sortingField: this.sortingField,
            sortingMode: this.sortingMode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sortingField: EntityTypeSorting.EntityTypeSortingField[this.sortingField === null || this.sortingField === undefined
                ? 0
                : this.sortingField],
            sortingMode: SortingMode[this.sortingMode === null || this.sortingMode === undefined
                ? 0
                : this.sortingMode]
        };
    }
}
EntityTypeSorting.id = 'ondewo.nlu.EntityTypeSorting';
(function (EntityTypeSorting) {
    let EntityTypeSortingField;
    (function (EntityTypeSortingField) {
        EntityTypeSortingField[EntityTypeSortingField["NO_ENTITY_TYPE_SORTING"] = 0] = "NO_ENTITY_TYPE_SORTING";
        EntityTypeSortingField[EntityTypeSortingField["SORT_ENTITY_TYPE_BY_NAME"] = 1] = "SORT_ENTITY_TYPE_BY_NAME";
        EntityTypeSortingField[EntityTypeSortingField["SORT_ENTITY_TYPE_BY_CREATION_DATE"] = 2] = "SORT_ENTITY_TYPE_BY_CREATION_DATE";
        EntityTypeSortingField[EntityTypeSortingField["SORT_ENTITY_TYPE_BY_LAST_UPDATED"] = 3] = "SORT_ENTITY_TYPE_BY_LAST_UPDATED";
        EntityTypeSortingField[EntityTypeSortingField["SORT_ENTITY_TYPE_BY_ENTITY_VALUE_COUNT"] = 4] = "SORT_ENTITY_TYPE_BY_ENTITY_VALUE_COUNT";
        EntityTypeSortingField[EntityTypeSortingField["SORT_ENTITY_TYPE_BY_SYNONYM_COUNT"] = 5] = "SORT_ENTITY_TYPE_BY_SYNONYM_COUNT";
    })(EntityTypeSortingField = EntityTypeSorting.EntityTypeSortingField || (EntityTypeSorting.EntityTypeSortingField = {}));
})(EntityTypeSorting || (EntityTypeSorting = {}));
/**
 * Message implementation for ondewo.nlu.BatchEntitiesResponse
 */
class BatchEntitiesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchEntitiesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityStatuses = (_value.entityStatuses || []).map(m => new BatchEntitiesResponse.EntityStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchEntitiesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchEntitiesResponse();
        BatchEntitiesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityStatuses = _instance.entityStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchEntitiesResponse.EntityStatus();
                    _reader.readMessage(messageInitializer1, BatchEntitiesResponse.EntityStatus.deserializeBinaryFromReader);
                    (_instance.entityStatuses = _instance.entityStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchEntitiesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityStatuses && _instance.entityStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.entityStatuses, BatchEntitiesResponse.EntityStatus.serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get entityStatuses() {
        return this._entityStatuses;
    }
    set entityStatuses(value) {
        this._entityStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchEntitiesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityStatuses: (this.entityStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityStatuses: (this.entityStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchEntitiesResponse.id = 'ondewo.nlu.BatchEntitiesResponse';
(function (BatchEntitiesResponse) {
    /**
     * Message implementation for ondewo.nlu.EntityStatus
     */
    class EntityStatus {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of EntityStatus to deeply clone from
         */
        constructor(_value) {
            this._entityOrStatus = EntityStatus.EntityOrStatusCase.none;
            _value = _value || {};
            this.entity = _value.entity
                ? new EntityType.Entity(_value.entity)
                : undefined;
            this.errorMessage = _value.errorMessage;
            EntityStatus.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new EntityStatus();
            EntityStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) { }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.entity = new EntityType.Entity();
                        _reader.readMessage(_instance.entity, EntityType.Entity.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.errorMessage = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            EntityStatus.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.entity) {
                _writer.writeMessage(1, _instance.entity, EntityType.Entity.serializeBinaryToWriter);
            }
            if (_instance.errorMessage || _instance.errorMessage === '') {
                _writer.writeString(2, _instance.errorMessage);
            }
        }
        get entity() {
            return this._entity;
        }
        set entity(value) {
            if (value !== undefined && value !== null) {
                this._errorMessage = undefined;
                this._entityOrStatus = EntityStatus.EntityOrStatusCase.entity;
            }
            this._entity = value;
        }
        get errorMessage() {
            return this._errorMessage;
        }
        set errorMessage(value) {
            if (value !== undefined && value !== null) {
                this._entity = undefined;
                this._entityOrStatus = EntityStatus.EntityOrStatusCase.errorMessage;
            }
            this._errorMessage = value;
        }
        get entityOrStatus() {
            return this._entityOrStatus;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            EntityStatus.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                entity: this.entity ? this.entity.toObject() : undefined,
                errorMessage: this.errorMessage
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                entity: this.entity ? this.entity.toProtobufJSON(options) : null,
                errorMessage: this.errorMessage === null || this.errorMessage === undefined
                    ? null
                    : this.errorMessage
            };
        }
    }
    EntityStatus.id = 'ondewo.nlu.EntityStatus';
    BatchEntitiesResponse.EntityStatus = EntityStatus;
    (function (EntityStatus) {
        let EntityOrStatusCase;
        (function (EntityOrStatusCase) {
            EntityOrStatusCase[EntityOrStatusCase["none"] = 0] = "none";
            EntityOrStatusCase[EntityOrStatusCase["entity"] = 1] = "entity";
            EntityOrStatusCase[EntityOrStatusCase["errorMessage"] = 2] = "errorMessage";
        })(EntityOrStatusCase = EntityStatus.EntityOrStatusCase || (EntityStatus.EntityOrStatusCase = {}));
    })(EntityStatus = BatchEntitiesResponse.EntityStatus || (BatchEntitiesResponse.EntityStatus = {}));
})(BatchEntitiesResponse || (BatchEntitiesResponse = {}));
/**
 * Message implementation for ondewo.nlu.BatchCreateEntitiesRequest
 */
class BatchCreateEntitiesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchCreateEntitiesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.createEntityRequests = (_value.createEntityRequests || []).map(m => new BatchCreateEntitiesRequest.CreateEntityRequest(m));
        BatchCreateEntitiesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchCreateEntitiesRequest();
        BatchCreateEntitiesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.createEntityRequests = _instance.createEntityRequests || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchCreateEntitiesRequest.CreateEntityRequest();
                    _reader.readMessage(messageInitializer1, BatchCreateEntitiesRequest.CreateEntityRequest
                        .deserializeBinaryFromReader);
                    (_instance.createEntityRequests =
                        _instance.createEntityRequests || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchCreateEntitiesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.createEntityRequests &&
            _instance.createEntityRequests.length) {
            _writer.writeRepeatedMessage(1, _instance.createEntityRequests, BatchCreateEntitiesRequest.CreateEntityRequest.serializeBinaryToWriter);
        }
    }
    get createEntityRequests() {
        return this._createEntityRequests;
    }
    set createEntityRequests(value) {
        this._createEntityRequests = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchCreateEntitiesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            createEntityRequests: (this.createEntityRequests || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            createEntityRequests: (this.createEntityRequests || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchCreateEntitiesRequest.id = 'ondewo.nlu.BatchCreateEntitiesRequest';
(function (BatchCreateEntitiesRequest) {
    /**
     * Message implementation for ondewo.nlu.CreateEntityRequest
     */
    class CreateEntityRequest {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of CreateEntityRequest to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.entityTypeName = _value.entityTypeName;
            this.entity = _value.entity
                ? new EntityType.Entity(_value.entity)
                : undefined;
            CreateEntityRequest.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new CreateEntityRequest();
            CreateEntityRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.entityTypeName = _instance.entityTypeName || '';
            _instance.entity = _instance.entity || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.entityTypeName = _reader.readString();
                        break;
                    case 2:
                        _instance.entity = new EntityType.Entity();
                        _reader.readMessage(_instance.entity, EntityType.Entity.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            CreateEntityRequest.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.entityTypeName) {
                _writer.writeString(1, _instance.entityTypeName);
            }
            if (_instance.entity) {
                _writer.writeMessage(2, _instance.entity, EntityType.Entity.serializeBinaryToWriter);
            }
        }
        get entityTypeName() {
            return this._entityTypeName;
        }
        set entityTypeName(value) {
            this._entityTypeName = value;
        }
        get entity() {
            return this._entity;
        }
        set entity(value) {
            this._entity = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            CreateEntityRequest.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                entityTypeName: this.entityTypeName,
                entity: this.entity ? this.entity.toObject() : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                entityTypeName: this.entityTypeName,
                entity: this.entity ? this.entity.toProtobufJSON(options) : null
            };
        }
    }
    CreateEntityRequest.id = 'ondewo.nlu.CreateEntityRequest';
    BatchCreateEntitiesRequest.CreateEntityRequest = CreateEntityRequest;
})(BatchCreateEntitiesRequest || (BatchCreateEntitiesRequest = {}));
/**
 * Message implementation for ondewo.nlu.BatchUpdateEntitiesRequest
 */
class BatchUpdateEntitiesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateEntitiesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entities = (_value.entities || []).map(m => new EntityType.Entity(m));
        BatchUpdateEntitiesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateEntitiesRequest();
        BatchUpdateEntitiesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entities = _instance.entities || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new EntityType.Entity();
                    _reader.readMessage(messageInitializer1, EntityType.Entity.deserializeBinaryFromReader);
                    (_instance.entities = _instance.entities || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateEntitiesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entities && _instance.entities.length) {
            _writer.writeRepeatedMessage(1, _instance.entities, EntityType.Entity.serializeBinaryToWriter);
        }
    }
    get entities() {
        return this._entities;
    }
    set entities(value) {
        this._entities = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateEntitiesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entities: (this.entities || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entities: (this.entities || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchUpdateEntitiesRequest.id = 'ondewo.nlu.BatchUpdateEntitiesRequest';
/**
 * Message implementation for ondewo.nlu.BatchGetEntitiesRequest
 */
class BatchGetEntitiesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchGetEntitiesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchGetEntitiesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchGetEntitiesRequest();
        BatchGetEntitiesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchGetEntitiesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchGetEntitiesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchGetEntitiesRequest.id = 'ondewo.nlu.BatchGetEntitiesRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteEntitiesRequest
 */
class BatchDeleteEntitiesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteEntitiesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchDeleteEntitiesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteEntitiesRequest();
        BatchDeleteEntitiesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteEntitiesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteEntitiesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchDeleteEntitiesRequest.id = 'ondewo.nlu.BatchDeleteEntitiesRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteEntitiesResponse
 */
class BatchDeleteEntitiesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteEntitiesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.deleteStatuses = (_value.deleteStatuses || []).map(m => new BatchDeleteEntitiesResponse.DeleteEntityStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchDeleteEntitiesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteEntitiesResponse();
        BatchDeleteEntitiesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.deleteStatuses = _instance.deleteStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchDeleteEntitiesResponse.DeleteEntityStatus();
                    _reader.readMessage(messageInitializer1, BatchDeleteEntitiesResponse.DeleteEntityStatus
                        .deserializeBinaryFromReader);
                    (_instance.deleteStatuses = _instance.deleteStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteEntitiesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.deleteStatuses && _instance.deleteStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.deleteStatuses, BatchDeleteEntitiesResponse.DeleteEntityStatus.serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get deleteStatuses() {
        return this._deleteStatuses;
    }
    set deleteStatuses(value) {
        this._deleteStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteEntitiesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchDeleteEntitiesResponse.id = 'ondewo.nlu.BatchDeleteEntitiesResponse';
(function (BatchDeleteEntitiesResponse) {
    /**
     * Message implementation for ondewo.nlu.DeleteEntityStatus
     */
    class DeleteEntityStatus {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of DeleteEntityStatus to deeply clone from
         */
        constructor(_value) {
            this._deleteStatus = DeleteEntityStatus.DeleteStatusCase.none;
            _value = _value || {};
            this.successfullyDeleted = _value.successfullyDeleted
                ? new googleProtobuf003.Empty(_value.successfullyDeleted)
                : undefined;
            this.errorMessage = _value.errorMessage;
            DeleteEntityStatus.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new DeleteEntityStatus();
            DeleteEntityStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) { }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.successfullyDeleted = new googleProtobuf003.Empty();
                        _reader.readMessage(_instance.successfullyDeleted, googleProtobuf003.Empty.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.errorMessage = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            DeleteEntityStatus.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.successfullyDeleted) {
                _writer.writeMessage(1, _instance.successfullyDeleted, googleProtobuf003.Empty.serializeBinaryToWriter);
            }
            if (_instance.errorMessage || _instance.errorMessage === '') {
                _writer.writeString(2, _instance.errorMessage);
            }
        }
        get successfullyDeleted() {
            return this._successfullyDeleted;
        }
        set successfullyDeleted(value) {
            if (value !== undefined && value !== null) {
                this._errorMessage = undefined;
                this._deleteStatus =
                    DeleteEntityStatus.DeleteStatusCase.successfullyDeleted;
            }
            this._successfullyDeleted = value;
        }
        get errorMessage() {
            return this._errorMessage;
        }
        set errorMessage(value) {
            if (value !== undefined && value !== null) {
                this._successfullyDeleted = undefined;
                this._deleteStatus = DeleteEntityStatus.DeleteStatusCase.errorMessage;
            }
            this._errorMessage = value;
        }
        get deleteStatus() {
            return this._deleteStatus;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            DeleteEntityStatus.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toObject()
                    : undefined,
                errorMessage: this.errorMessage
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toProtobufJSON(options)
                    : null,
                errorMessage: this.errorMessage === null || this.errorMessage === undefined
                    ? null
                    : this.errorMessage
            };
        }
    }
    DeleteEntityStatus.id = 'ondewo.nlu.DeleteEntityStatus';
    BatchDeleteEntitiesResponse.DeleteEntityStatus = DeleteEntityStatus;
    (function (DeleteEntityStatus) {
        let DeleteStatusCase;
        (function (DeleteStatusCase) {
            DeleteStatusCase[DeleteStatusCase["none"] = 0] = "none";
            DeleteStatusCase[DeleteStatusCase["successfullyDeleted"] = 1] = "successfullyDeleted";
            DeleteStatusCase[DeleteStatusCase["errorMessage"] = 2] = "errorMessage";
        })(DeleteStatusCase = DeleteEntityStatus.DeleteStatusCase || (DeleteEntityStatus.DeleteStatusCase = {}));
    })(DeleteEntityStatus = BatchDeleteEntitiesResponse.DeleteEntityStatus || (BatchDeleteEntitiesResponse.DeleteEntityStatus = {}));
})(BatchDeleteEntitiesResponse || (BatchDeleteEntitiesResponse = {}));
/**
 * Message implementation for ondewo.nlu.ListEntitiesRequest
 */
class ListEntitiesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListEntitiesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityTypeName = _value.entityTypeName;
        this.languageCode = _value.languageCode;
        this.pageToken = _value.pageToken;
        this.sortByField = _value.sortByField
            ? new EntityValueSorting(_value.sortByField)
            : undefined;
        this.searchByPattern = _value.searchByPattern;
        ListEntitiesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListEntitiesRequest();
        ListEntitiesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityTypeName = _instance.entityTypeName || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.pageToken = _instance.pageToken || '';
        _instance.sortByField = _instance.sortByField || undefined;
        _instance.searchByPattern = _instance.searchByPattern || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.entityTypeName = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.pageToken = _reader.readString();
                    break;
                case 5:
                    _instance.sortByField = new EntityValueSorting();
                    _reader.readMessage(_instance.sortByField, EntityValueSorting.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.searchByPattern = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListEntitiesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityTypeName) {
            _writer.writeString(1, _instance.entityTypeName);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.pageToken) {
            _writer.writeString(3, _instance.pageToken);
        }
        if (_instance.sortByField) {
            _writer.writeMessage(5, _instance.sortByField, EntityValueSorting.serializeBinaryToWriter);
        }
        if (_instance.searchByPattern) {
            _writer.writeString(6, _instance.searchByPattern);
        }
    }
    get entityTypeName() {
        return this._entityTypeName;
    }
    set entityTypeName(value) {
        this._entityTypeName = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get sortByField() {
        return this._sortByField;
    }
    set sortByField(value) {
        this._sortByField = value;
    }
    get searchByPattern() {
        return this._searchByPattern;
    }
    set searchByPattern(value) {
        this._searchByPattern = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListEntitiesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityTypeName: this.entityTypeName,
            languageCode: this.languageCode,
            pageToken: this.pageToken,
            sortByField: this.sortByField ? this.sortByField.toObject() : undefined,
            searchByPattern: this.searchByPattern
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityTypeName: this.entityTypeName,
            languageCode: this.languageCode,
            pageToken: this.pageToken,
            sortByField: this.sortByField
                ? this.sortByField.toProtobufJSON(options)
                : null,
            searchByPattern: this.searchByPattern
        };
    }
}
ListEntitiesRequest.id = 'ondewo.nlu.ListEntitiesRequest';
/**
 * Message implementation for ondewo.nlu.ListEntitiesResponse
 */
class ListEntitiesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListEntitiesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entities = (_value.entities || []).map(m => new EntityType.Entity(m));
        this.nextPageToken = _value.nextPageToken;
        ListEntitiesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListEntitiesResponse();
        ListEntitiesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entities = _instance.entities || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new EntityType.Entity();
                    _reader.readMessage(messageInitializer1, EntityType.Entity.deserializeBinaryFromReader);
                    (_instance.entities = _instance.entities || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListEntitiesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entities && _instance.entities.length) {
            _writer.writeRepeatedMessage(1, _instance.entities, EntityType.Entity.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get entities() {
        return this._entities;
    }
    set entities(value) {
        this._entities = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListEntitiesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entities: (this.entities || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entities: (this.entities || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListEntitiesResponse.id = 'ondewo.nlu.ListEntitiesResponse';
/**
 * Message implementation for ondewo.nlu.EntityValueSorting
 */
class EntityValueSorting {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityValueSorting to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sortingField = _value.sortingField;
        this.sortingMode = _value.sortingMode;
        EntityValueSorting.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityValueSorting();
        EntityValueSorting.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sortingField = _instance.sortingField || 0;
        _instance.sortingMode = _instance.sortingMode || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 7:
                    _instance.sortingField = _reader.readEnum();
                    break;
                case 8:
                    _instance.sortingMode = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityValueSorting.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sortingField) {
            _writer.writeEnum(7, _instance.sortingField);
        }
        if (_instance.sortingMode) {
            _writer.writeEnum(8, _instance.sortingMode);
        }
    }
    get sortingField() {
        return this._sortingField;
    }
    set sortingField(value) {
        this._sortingField = value;
    }
    get sortingMode() {
        return this._sortingMode;
    }
    set sortingMode(value) {
        this._sortingMode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityValueSorting.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sortingField: this.sortingField,
            sortingMode: this.sortingMode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sortingField: EntityValueSorting.EntityValueSortingField[this.sortingField === null || this.sortingField === undefined
                ? 0
                : this.sortingField],
            sortingMode: SortingMode[this.sortingMode === null || this.sortingMode === undefined
                ? 0
                : this.sortingMode]
        };
    }
}
EntityValueSorting.id = 'ondewo.nlu.EntityValueSorting';
(function (EntityValueSorting) {
    let EntityValueSortingField;
    (function (EntityValueSortingField) {
        EntityValueSortingField[EntityValueSortingField["NO_ENTITY_VALUE_SORTING"] = 0] = "NO_ENTITY_VALUE_SORTING";
        EntityValueSortingField[EntityValueSortingField["SORT_ENTITY_VALUE_BY_DISPLAY_NAME"] = 1] = "SORT_ENTITY_VALUE_BY_DISPLAY_NAME";
        EntityValueSortingField[EntityValueSortingField["SORT_ENTITY_VALUE_BY_VALUE"] = 2] = "SORT_ENTITY_VALUE_BY_VALUE";
        EntityValueSortingField[EntityValueSortingField["SORT_ENTITY_VALUE_BY_SYNONYM_COUNT"] = 3] = "SORT_ENTITY_VALUE_BY_SYNONYM_COUNT";
    })(EntityValueSortingField = EntityValueSorting.EntityValueSortingField || (EntityValueSorting.EntityValueSortingField = {}));
})(EntityValueSorting || (EntityValueSorting = {}));

/* tslint:disable */
/**
 * Specific GrpcClientSettings for EntityTypes.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_ENTITY_TYPES_CLIENT_SETTINGS = new InjectionToken('GRPC_ENTITY_TYPES_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.EntityTypes
 */
class EntityTypesClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/ListEntityTypes
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListEntityTypesResponse>>
             */
            listEntityTypes: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/ListEntityTypes',
                    requestData,
                    requestMetadata,
                    requestClass: ListEntityTypesRequest,
                    responseClass: ListEntityTypesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/GetEntityType
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.EntityType>>
             */
            getEntityType: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/GetEntityType',
                    requestData,
                    requestMetadata,
                    requestClass: GetEntityTypeRequest,
                    responseClass: EntityType
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/CreateEntityType
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.EntityType>>
             */
            createEntityType: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/CreateEntityType',
                    requestData,
                    requestMetadata,
                    requestClass: CreateEntityTypeRequest,
                    responseClass: EntityType
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/UpdateEntityType
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.EntityType>>
             */
            updateEntityType: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/UpdateEntityType',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateEntityTypeRequest,
                    responseClass: EntityType
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/DeleteEntityType
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteEntityType: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/DeleteEntityType',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteEntityTypeRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/BatchUpdateEntityTypes
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning006.Operation>>
             */
            batchUpdateEntityTypes: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/BatchUpdateEntityTypes',
                    requestData,
                    requestMetadata,
                    requestClass: BatchUpdateEntityTypesRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/BatchDeleteEntityTypes
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning006.Operation>>
             */
            batchDeleteEntityTypes: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/BatchDeleteEntityTypes',
                    requestData,
                    requestMetadata,
                    requestClass: BatchDeleteEntityTypesRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/BatchCreateEntities
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchEntitiesResponse>>
             */
            batchCreateEntities: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/BatchCreateEntities',
                    requestData,
                    requestMetadata,
                    requestClass: BatchCreateEntitiesRequest,
                    responseClass: BatchEntitiesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/BatchUpdateEntities
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchEntitiesResponse>>
             */
            batchUpdateEntities: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/BatchUpdateEntities',
                    requestData,
                    requestMetadata,
                    requestClass: BatchUpdateEntitiesRequest,
                    responseClass: BatchEntitiesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/BatchGetEntities
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchEntitiesResponse>>
             */
            batchGetEntities: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/BatchGetEntities',
                    requestData,
                    requestMetadata,
                    requestClass: BatchGetEntitiesRequest,
                    responseClass: BatchEntitiesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/BatchDeleteEntities
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchDeleteEntitiesResponse>>
             */
            batchDeleteEntities: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/BatchDeleteEntities',
                    requestData,
                    requestMetadata,
                    requestClass: BatchDeleteEntitiesRequest,
                    responseClass: BatchDeleteEntitiesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.EntityTypes/ListEntities
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListEntitiesResponse>>
             */
            listEntities: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.EntityTypes/ListEntities',
                    requestData,
                    requestMetadata,
                    requestClass: ListEntitiesRequest,
                    responseClass: ListEntitiesResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.EntityTypes', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/ListEntityTypes
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListEntityTypesResponse>
     */
    listEntityTypes(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listEntityTypes(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/GetEntityType
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.EntityType>
     */
    getEntityType(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getEntityType(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/CreateEntityType
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.EntityType>
     */
    createEntityType(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createEntityType(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/UpdateEntityType
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.EntityType>
     */
    updateEntityType(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateEntityType(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/DeleteEntityType
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteEntityType(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteEntityType(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/BatchUpdateEntityTypes
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning006.Operation>
     */
    batchUpdateEntityTypes(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchUpdateEntityTypes(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/BatchDeleteEntityTypes
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning006.Operation>
     */
    batchDeleteEntityTypes(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchDeleteEntityTypes(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/BatchCreateEntities
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchEntitiesResponse>
     */
    batchCreateEntities(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchCreateEntities(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/BatchUpdateEntities
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchEntitiesResponse>
     */
    batchUpdateEntities(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchUpdateEntities(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/BatchGetEntities
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchEntitiesResponse>
     */
    batchGetEntities(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchGetEntities(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/BatchDeleteEntities
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchDeleteEntitiesResponse>
     */
    batchDeleteEntities(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchDeleteEntities(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.EntityTypes/ListEntities
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListEntitiesResponse>
     */
    listEntities(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listEntities(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
EntityTypesClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: EntityTypesClient, deps: [{ token: GRPC_ENTITY_TYPES_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
EntityTypesClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: EntityTypesClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: EntityTypesClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_ENTITY_TYPES_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for ondewo.nlu.Context
 */
class Context {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Context to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.lifespanCount = _value.lifespanCount;
        (this.parameters = _value.parameters
            ? Object.keys(_value.parameters).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.parameters[k]
                    ? new Context.Parameter(_value.parameters[k])
                    : undefined })), {})
            : {}),
            (this.lifespanTime = _value.lifespanTime);
        Context.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Context();
        Context.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.lifespanCount = _instance.lifespanCount || 0;
        _instance.parameters = _instance.parameters || {};
        _instance.lifespanTime = _instance.lifespanTime || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.lifespanCount = _reader.readInt32();
                    break;
                case 3:
                    const msg_3 = {};
                    _reader.readMessage(msg_3, Context.ParametersEntry.deserializeBinaryFromReader);
                    _instance.parameters = _instance.parameters || {};
                    _instance.parameters[msg_3.key] = msg_3.value;
                    break;
                case 4:
                    _instance.lifespanTime = _reader.readFloat();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Context.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.lifespanCount) {
            _writer.writeInt32(2, _instance.lifespanCount);
        }
        if (!!_instance.parameters) {
            const keys_3 = Object.keys(_instance.parameters);
            if (keys_3.length) {
                const repeated_3 = keys_3
                    .map(key => ({ key: key, value: _instance.parameters[key] }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(3, repeated_3, Context.ParametersEntry.serializeBinaryToWriter);
            }
        }
        if (_instance.lifespanTime) {
            _writer.writeFloat(4, _instance.lifespanTime);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get lifespanCount() {
        return this._lifespanCount;
    }
    set lifespanCount(value) {
        this._lifespanCount = value;
    }
    get parameters() {
        return this._parameters;
    }
    set parameters(value) {
        this._parameters = value;
    }
    get lifespanTime() {
        return this._lifespanTime;
    }
    set lifespanTime(value) {
        this._lifespanTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Context.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            lifespanCount: this.lifespanCount,
            parameters: this.parameters
                ? Object.keys(this.parameters).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.parameters[k]
                        ? this.parameters[k].toObject()
                        : undefined })), {})
                : {},
            lifespanTime: this.lifespanTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            lifespanCount: this.lifespanCount,
            parameters: this.parameters
                ? Object.keys(this.parameters).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.parameters[k] ? this.parameters[k].toJSON() : null })), {})
                : {},
            lifespanTime: this.lifespanTime
        };
    }
}
Context.id = 'ondewo.nlu.Context';
(function (Context) {
    /**
     * Message implementation for ondewo.nlu.Parameter
     */
    class Parameter {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of Parameter to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.name = _value.name;
            this.displayName = _value.displayName;
            this.value = _value.value;
            this.valueOriginal = _value.valueOriginal;
            Parameter.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new Parameter();
            Parameter.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.name = _instance.name || '';
            _instance.displayName = _instance.displayName || '';
            _instance.value = _instance.value || '';
            _instance.valueOriginal = _instance.valueOriginal || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.name = _reader.readString();
                        break;
                    case 2:
                        _instance.displayName = _reader.readString();
                        break;
                    case 3:
                        _instance.value = _reader.readString();
                        break;
                    case 4:
                        _instance.valueOriginal = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            Parameter.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.name) {
                _writer.writeString(1, _instance.name);
            }
            if (_instance.displayName) {
                _writer.writeString(2, _instance.displayName);
            }
            if (_instance.value) {
                _writer.writeString(3, _instance.value);
            }
            if (_instance.valueOriginal) {
                _writer.writeString(4, _instance.valueOriginal);
            }
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        get displayName() {
            return this._displayName;
        }
        set displayName(value) {
            this._displayName = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        get valueOriginal() {
            return this._valueOriginal;
        }
        set valueOriginal(value) {
            this._valueOriginal = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            Parameter.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                name: this.name,
                displayName: this.displayName,
                value: this.value,
                valueOriginal: this.valueOriginal
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                name: this.name,
                displayName: this.displayName,
                value: this.value,
                valueOriginal: this.valueOriginal
            };
        }
    }
    Parameter.id = 'ondewo.nlu.Parameter';
    Context.Parameter = Parameter;
    /**
     * Message implementation for ondewo.nlu.ParametersEntry
     */
    class ParametersEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ParametersEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value
                ? new Context.Parameter(_value.value)
                : undefined;
            ParametersEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ParametersEntry();
            ParametersEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = new Context.Parameter();
                        _reader.readMessage(_instance.value, Context.Parameter.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ParametersEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeMessage(2, _instance.value, Context.Parameter.serializeBinaryToWriter);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ParametersEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value ? this.value.toObject() : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value ? this.value.toProtobufJSON(options) : null
            };
        }
    }
    ParametersEntry.id = 'ondewo.nlu.ParametersEntry';
    Context.ParametersEntry = ParametersEntry;
})(Context || (Context = {}));
/**
 * Message implementation for ondewo.nlu.ListContextsRequest
 */
class ListContextsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListContextsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.pageToken = _value.pageToken;
        ListContextsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListContextsRequest();
        ListContextsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 3:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListContextsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.pageToken) {
            _writer.writeString(3, _instance.pageToken);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListContextsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            pageToken: this.pageToken
        };
    }
}
ListContextsRequest.id = 'ondewo.nlu.ListContextsRequest';
/**
 * Message implementation for ondewo.nlu.ListContextsResponse
 */
class ListContextsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListContextsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.contexts = (_value.contexts || []).map(m => new Context(m));
        this.nextPageToken = _value.nextPageToken;
        ListContextsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListContextsResponse();
        ListContextsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.contexts = _instance.contexts || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Context();
                    _reader.readMessage(messageInitializer1, Context.deserializeBinaryFromReader);
                    (_instance.contexts = _instance.contexts || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListContextsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.contexts && _instance.contexts.length) {
            _writer.writeRepeatedMessage(1, _instance.contexts, Context.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get contexts() {
        return this._contexts;
    }
    set contexts(value) {
        this._contexts = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListContextsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            contexts: (this.contexts || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            contexts: (this.contexts || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListContextsResponse.id = 'ondewo.nlu.ListContextsResponse';
/**
 * Message implementation for ondewo.nlu.GetContextRequest
 */
class GetContextRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetContextRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        GetContextRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetContextRequest();
        GetContextRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetContextRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetContextRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
GetContextRequest.id = 'ondewo.nlu.GetContextRequest';
/**
 * Message implementation for ondewo.nlu.CreateContextRequest
 */
class CreateContextRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateContextRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.context = _value.context ? new Context(_value.context) : undefined;
        CreateContextRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateContextRequest();
        CreateContextRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.context = _instance.context || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.context = new Context();
                    _reader.readMessage(_instance.context, Context.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateContextRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.context) {
            _writer.writeMessage(2, _instance.context, Context.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get context() {
        return this._context;
    }
    set context(value) {
        this._context = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateContextRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            context: this.context ? this.context.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            context: this.context ? this.context.toProtobufJSON(options) : null
        };
    }
}
CreateContextRequest.id = 'ondewo.nlu.CreateContextRequest';
/**
 * Message implementation for ondewo.nlu.UpdateContextRequest
 */
class UpdateContextRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateContextRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.context = _value.context ? new Context(_value.context) : undefined;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        UpdateContextRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateContextRequest();
        UpdateContextRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.context = _instance.context || undefined;
        _instance.updateMask = _instance.updateMask || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.context = new Context();
                    _reader.readMessage(_instance.context, Context.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateContextRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.context) {
            _writer.writeMessage(1, _instance.context, Context.serializeBinaryToWriter);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(2, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
    }
    get context() {
        return this._context;
    }
    set context(value) {
        this._context = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateContextRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            context: this.context ? this.context.toObject() : undefined,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            context: this.context ? this.context.toProtobufJSON(options) : null,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null
        };
    }
}
UpdateContextRequest.id = 'ondewo.nlu.UpdateContextRequest';
/**
 * Message implementation for ondewo.nlu.DeleteContextRequest
 */
class DeleteContextRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteContextRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        DeleteContextRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteContextRequest();
        DeleteContextRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteContextRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteContextRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
DeleteContextRequest.id = 'ondewo.nlu.DeleteContextRequest';
/**
 * Message implementation for ondewo.nlu.DeleteAllContextsRequest
 */
class DeleteAllContextsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteAllContextsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        DeleteAllContextsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteAllContextsRequest();
        DeleteAllContextsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteAllContextsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteAllContextsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent
        };
    }
}
DeleteAllContextsRequest.id = 'ondewo.nlu.DeleteAllContextsRequest';

var IntentView;
(function (IntentView) {
    IntentView[IntentView["INTENT_VIEW_UNSPECIFIED"] = 0] = "INTENT_VIEW_UNSPECIFIED";
    IntentView[IntentView["INTENT_VIEW_FULL"] = 1] = "INTENT_VIEW_FULL";
    IntentView[IntentView["INTENT_VIEW_PARTIAL"] = 2] = "INTENT_VIEW_PARTIAL";
    IntentView[IntentView["INTENT_VIEW_SHALLOW"] = 3] = "INTENT_VIEW_SHALLOW";
})(IntentView || (IntentView = {}));
var IntentCategory;
(function (IntentCategory) {
    IntentCategory[IntentCategory["ALL_INTENTS"] = 0] = "ALL_INTENTS";
    IntentCategory[IntentCategory["DEFAULT_INTENTS"] = 1] = "DEFAULT_INTENTS";
    IntentCategory[IntentCategory["USER_DEFINED_INTENTS"] = 2] = "USER_DEFINED_INTENTS";
    IntentCategory[IntentCategory["DATE_EXPIRED_INTENTS"] = 3] = "DATE_EXPIRED_INTENTS";
    IntentCategory[IntentCategory["DATE_ACTIVE_INTENTS"] = 4] = "DATE_ACTIVE_INTENTS";
    IntentCategory[IntentCategory["DATE_UPCOMING_INTENTS"] = 5] = "DATE_UPCOMING_INTENTS";
})(IntentCategory || (IntentCategory = {}));
/**
 * Message implementation for ondewo.nlu.Intent
 */
class Intent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Intent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.displayName = _value.displayName;
        this.webhookState = _value.webhookState;
        this.priority = _value.priority;
        this.isFallback = _value.isFallback;
        this.mlDisabled = _value.mlDisabled;
        this.inputContextNames = (_value.inputContextNames || []).slice();
        this.events = (_value.events || []).slice();
        this.trainingPhrases = (_value.trainingPhrases || []).map(m => new Intent.TrainingPhrase(m));
        this.action = _value.action;
        this.outputContexts = (_value.outputContexts || []).map(m => new Context(m));
        this.resetContexts = _value.resetContexts;
        this.parameters = (_value.parameters || []).map(m => new Intent.Parameter(m));
        this.messages = (_value.messages || []).map(m => new Intent.Message(m));
        this.defaultResponsePlatforms = (_value.defaultResponsePlatforms || []).slice();
        this.rootFollowupIntentName = _value.rootFollowupIntentName;
        this.parentFollowupIntentName = _value.parentFollowupIntentName;
        this.followupIntentInfo = (_value.followupIntentInfo || []).map(m => new Intent.FollowupIntentInfo(m));
        this.nextPageToken = _value.nextPageToken;
        this.domainName = _value.domainName;
        this.isStartOfDeviation = _value.isStartOfDeviation;
        this.isEndOfDeviation = _value.isEndOfDeviation;
        this.trainingPhraseCount = _value.trainingPhraseCount;
        this.status = _value.status;
        this.startDate = _value.startDate
            ? new googleProtobuf003.Timestamp(_value.startDate)
            : undefined;
        this.endDate = _value.endDate
            ? new googleProtobuf003.Timestamp(_value.endDate)
            : undefined;
        this.tags = (_value.tags || []).slice();
        Intent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Intent();
        Intent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.displayName = _instance.displayName || '';
        _instance.webhookState = _instance.webhookState || 0;
        _instance.priority = _instance.priority || 0;
        _instance.isFallback = _instance.isFallback || false;
        _instance.mlDisabled = _instance.mlDisabled || false;
        _instance.inputContextNames = _instance.inputContextNames || [];
        _instance.events = _instance.events || [];
        _instance.trainingPhrases = _instance.trainingPhrases || [];
        _instance.action = _instance.action || '';
        _instance.outputContexts = _instance.outputContexts || [];
        _instance.resetContexts = _instance.resetContexts || false;
        _instance.parameters = _instance.parameters || [];
        _instance.messages = _instance.messages || [];
        _instance.defaultResponsePlatforms =
            _instance.defaultResponsePlatforms || [];
        _instance.rootFollowupIntentName = _instance.rootFollowupIntentName || '';
        _instance.parentFollowupIntentName =
            _instance.parentFollowupIntentName || '';
        _instance.followupIntentInfo = _instance.followupIntentInfo || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
        _instance.domainName = _instance.domainName || '';
        _instance.isStartOfDeviation = _instance.isStartOfDeviation || false;
        _instance.isEndOfDeviation = _instance.isEndOfDeviation || false;
        _instance.trainingPhraseCount = _instance.trainingPhraseCount || 0;
        _instance.status = _instance.status || 0;
        _instance.startDate = _instance.startDate || undefined;
        _instance.endDate = _instance.endDate || undefined;
        _instance.tags = _instance.tags || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.displayName = _reader.readString();
                    break;
                case 6:
                    _instance.webhookState = _reader.readEnum();
                    break;
                case 3:
                    _instance.priority = _reader.readInt32();
                    break;
                case 4:
                    _instance.isFallback = _reader.readBool();
                    break;
                case 19:
                    _instance.mlDisabled = _reader.readBool();
                    break;
                case 7:
                    (_instance.inputContextNames =
                        _instance.inputContextNames || []).push(_reader.readString());
                    break;
                case 8:
                    (_instance.events = _instance.events || []).push(_reader.readString());
                    break;
                case 9:
                    const messageInitializer9 = new Intent.TrainingPhrase();
                    _reader.readMessage(messageInitializer9, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    (_instance.trainingPhrases = _instance.trainingPhrases || []).push(messageInitializer9);
                    break;
                case 10:
                    _instance.action = _reader.readString();
                    break;
                case 11:
                    const messageInitializer11 = new Context();
                    _reader.readMessage(messageInitializer11, Context.deserializeBinaryFromReader);
                    (_instance.outputContexts = _instance.outputContexts || []).push(messageInitializer11);
                    break;
                case 12:
                    _instance.resetContexts = _reader.readBool();
                    break;
                case 13:
                    const messageInitializer13 = new Intent.Parameter();
                    _reader.readMessage(messageInitializer13, Intent.Parameter.deserializeBinaryFromReader);
                    (_instance.parameters = _instance.parameters || []).push(messageInitializer13);
                    break;
                case 14:
                    const messageInitializer14 = new Intent.Message();
                    _reader.readMessage(messageInitializer14, Intent.Message.deserializeBinaryFromReader);
                    (_instance.messages = _instance.messages || []).push(messageInitializer14);
                    break;
                case 15:
                    (_instance.defaultResponsePlatforms =
                        _instance.defaultResponsePlatforms || []).push(...(_reader.readPackedEnum() || []));
                    break;
                case 16:
                    _instance.rootFollowupIntentName = _reader.readString();
                    break;
                case 17:
                    _instance.parentFollowupIntentName = _reader.readString();
                    break;
                case 18:
                    const messageInitializer18 = new Intent.FollowupIntentInfo();
                    _reader.readMessage(messageInitializer18, Intent.FollowupIntentInfo.deserializeBinaryFromReader);
                    (_instance.followupIntentInfo =
                        _instance.followupIntentInfo || []).push(messageInitializer18);
                    break;
                case 30:
                    _instance.nextPageToken = _reader.readString();
                    break;
                case 31:
                    _instance.domainName = _reader.readString();
                    break;
                case 32:
                    _instance.isStartOfDeviation = _reader.readBool();
                    break;
                case 33:
                    _instance.isEndOfDeviation = _reader.readBool();
                    break;
                case 34:
                    _instance.trainingPhraseCount = _reader.readInt32();
                    break;
                case 35:
                    _instance.status = _reader.readEnum();
                    break;
                case 36:
                    _instance.startDate = new googleProtobuf003.Timestamp();
                    _reader.readMessage(_instance.startDate, googleProtobuf003.Timestamp.deserializeBinaryFromReader);
                    break;
                case 37:
                    _instance.endDate = new googleProtobuf003.Timestamp();
                    _reader.readMessage(_instance.endDate, googleProtobuf003.Timestamp.deserializeBinaryFromReader);
                    break;
                case 38:
                    (_instance.tags = _instance.tags || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        Intent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.displayName) {
            _writer.writeString(2, _instance.displayName);
        }
        if (_instance.webhookState) {
            _writer.writeEnum(6, _instance.webhookState);
        }
        if (_instance.priority) {
            _writer.writeInt32(3, _instance.priority);
        }
        if (_instance.isFallback) {
            _writer.writeBool(4, _instance.isFallback);
        }
        if (_instance.mlDisabled) {
            _writer.writeBool(19, _instance.mlDisabled);
        }
        if (_instance.inputContextNames && _instance.inputContextNames.length) {
            _writer.writeRepeatedString(7, _instance.inputContextNames);
        }
        if (_instance.events && _instance.events.length) {
            _writer.writeRepeatedString(8, _instance.events);
        }
        if (_instance.trainingPhrases && _instance.trainingPhrases.length) {
            _writer.writeRepeatedMessage(9, _instance.trainingPhrases, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
        if (_instance.action) {
            _writer.writeString(10, _instance.action);
        }
        if (_instance.outputContexts && _instance.outputContexts.length) {
            _writer.writeRepeatedMessage(11, _instance.outputContexts, Context.serializeBinaryToWriter);
        }
        if (_instance.resetContexts) {
            _writer.writeBool(12, _instance.resetContexts);
        }
        if (_instance.parameters && _instance.parameters.length) {
            _writer.writeRepeatedMessage(13, _instance.parameters, Intent.Parameter.serializeBinaryToWriter);
        }
        if (_instance.messages && _instance.messages.length) {
            _writer.writeRepeatedMessage(14, _instance.messages, Intent.Message.serializeBinaryToWriter);
        }
        if (_instance.defaultResponsePlatforms &&
            _instance.defaultResponsePlatforms.length) {
            _writer.writePackedEnum(15, _instance.defaultResponsePlatforms);
        }
        if (_instance.rootFollowupIntentName) {
            _writer.writeString(16, _instance.rootFollowupIntentName);
        }
        if (_instance.parentFollowupIntentName) {
            _writer.writeString(17, _instance.parentFollowupIntentName);
        }
        if (_instance.followupIntentInfo && _instance.followupIntentInfo.length) {
            _writer.writeRepeatedMessage(18, _instance.followupIntentInfo, Intent.FollowupIntentInfo.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(30, _instance.nextPageToken);
        }
        if (_instance.domainName) {
            _writer.writeString(31, _instance.domainName);
        }
        if (_instance.isStartOfDeviation) {
            _writer.writeBool(32, _instance.isStartOfDeviation);
        }
        if (_instance.isEndOfDeviation) {
            _writer.writeBool(33, _instance.isEndOfDeviation);
        }
        if (_instance.trainingPhraseCount) {
            _writer.writeInt32(34, _instance.trainingPhraseCount);
        }
        if (_instance.status) {
            _writer.writeEnum(35, _instance.status);
        }
        if (_instance.startDate) {
            _writer.writeMessage(36, _instance.startDate, googleProtobuf003.Timestamp.serializeBinaryToWriter);
        }
        if (_instance.endDate) {
            _writer.writeMessage(37, _instance.endDate, googleProtobuf003.Timestamp.serializeBinaryToWriter);
        }
        if (_instance.tags && _instance.tags.length) {
            _writer.writeRepeatedString(38, _instance.tags);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get displayName() {
        return this._displayName;
    }
    set displayName(value) {
        this._displayName = value;
    }
    get webhookState() {
        return this._webhookState;
    }
    set webhookState(value) {
        this._webhookState = value;
    }
    get priority() {
        return this._priority;
    }
    set priority(value) {
        this._priority = value;
    }
    get isFallback() {
        return this._isFallback;
    }
    set isFallback(value) {
        this._isFallback = value;
    }
    get mlDisabled() {
        return this._mlDisabled;
    }
    set mlDisabled(value) {
        this._mlDisabled = value;
    }
    get inputContextNames() {
        return this._inputContextNames;
    }
    set inputContextNames(value) {
        this._inputContextNames = value;
    }
    get events() {
        return this._events;
    }
    set events(value) {
        this._events = value;
    }
    get trainingPhrases() {
        return this._trainingPhrases;
    }
    set trainingPhrases(value) {
        this._trainingPhrases = value;
    }
    get action() {
        return this._action;
    }
    set action(value) {
        this._action = value;
    }
    get outputContexts() {
        return this._outputContexts;
    }
    set outputContexts(value) {
        this._outputContexts = value;
    }
    get resetContexts() {
        return this._resetContexts;
    }
    set resetContexts(value) {
        this._resetContexts = value;
    }
    get parameters() {
        return this._parameters;
    }
    set parameters(value) {
        this._parameters = value;
    }
    get messages() {
        return this._messages;
    }
    set messages(value) {
        this._messages = value;
    }
    get defaultResponsePlatforms() {
        return this._defaultResponsePlatforms;
    }
    set defaultResponsePlatforms(value) {
        this._defaultResponsePlatforms = value;
    }
    get rootFollowupIntentName() {
        return this._rootFollowupIntentName;
    }
    set rootFollowupIntentName(value) {
        this._rootFollowupIntentName = value;
    }
    get parentFollowupIntentName() {
        return this._parentFollowupIntentName;
    }
    set parentFollowupIntentName(value) {
        this._parentFollowupIntentName = value;
    }
    get followupIntentInfo() {
        return this._followupIntentInfo;
    }
    set followupIntentInfo(value) {
        this._followupIntentInfo = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    get domainName() {
        return this._domainName;
    }
    set domainName(value) {
        this._domainName = value;
    }
    get isStartOfDeviation() {
        return this._isStartOfDeviation;
    }
    set isStartOfDeviation(value) {
        this._isStartOfDeviation = value;
    }
    get isEndOfDeviation() {
        return this._isEndOfDeviation;
    }
    set isEndOfDeviation(value) {
        this._isEndOfDeviation = value;
    }
    get trainingPhraseCount() {
        return this._trainingPhraseCount;
    }
    set trainingPhraseCount(value) {
        this._trainingPhraseCount = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get startDate() {
        return this._startDate;
    }
    set startDate(value) {
        this._startDate = value;
    }
    get endDate() {
        return this._endDate;
    }
    set endDate(value) {
        this._endDate = value;
    }
    get tags() {
        return this._tags;
    }
    set tags(value) {
        this._tags = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Intent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            displayName: this.displayName,
            webhookState: this.webhookState,
            priority: this.priority,
            isFallback: this.isFallback,
            mlDisabled: this.mlDisabled,
            inputContextNames: (this.inputContextNames || []).slice(),
            events: (this.events || []).slice(),
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toObject()),
            action: this.action,
            outputContexts: (this.outputContexts || []).map(m => m.toObject()),
            resetContexts: this.resetContexts,
            parameters: (this.parameters || []).map(m => m.toObject()),
            messages: (this.messages || []).map(m => m.toObject()),
            defaultResponsePlatforms: (this.defaultResponsePlatforms || []).slice(),
            rootFollowupIntentName: this.rootFollowupIntentName,
            parentFollowupIntentName: this.parentFollowupIntentName,
            followupIntentInfo: (this.followupIntentInfo || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken,
            domainName: this.domainName,
            isStartOfDeviation: this.isStartOfDeviation,
            isEndOfDeviation: this.isEndOfDeviation,
            trainingPhraseCount: this.trainingPhraseCount,
            status: this.status,
            startDate: this.startDate ? this.startDate.toObject() : undefined,
            endDate: this.endDate ? this.endDate.toObject() : undefined,
            tags: (this.tags || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            displayName: this.displayName,
            webhookState: Intent.WebhookState[this.webhookState === null || this.webhookState === undefined
                ? 0
                : this.webhookState],
            priority: this.priority,
            isFallback: this.isFallback,
            mlDisabled: this.mlDisabled,
            inputContextNames: (this.inputContextNames || []).slice(),
            events: (this.events || []).slice(),
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toProtobufJSON(options)),
            action: this.action,
            outputContexts: (this.outputContexts || []).map(m => m.toProtobufJSON(options)),
            resetContexts: this.resetContexts,
            parameters: (this.parameters || []).map(m => m.toProtobufJSON(options)),
            messages: (this.messages || []).map(m => m.toProtobufJSON(options)),
            defaultResponsePlatforms: (this.defaultResponsePlatforms || []).map(v => Intent.Message.Platform[v]),
            rootFollowupIntentName: this.rootFollowupIntentName,
            parentFollowupIntentName: this.parentFollowupIntentName,
            followupIntentInfo: (this.followupIntentInfo || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken,
            domainName: this.domainName,
            isStartOfDeviation: this.isStartOfDeviation,
            isEndOfDeviation: this.isEndOfDeviation,
            trainingPhraseCount: this.trainingPhraseCount,
            status: Intent.IntentStatus[this.status === null || this.status === undefined ? 0 : this.status],
            startDate: this.startDate ? this.startDate.toProtobufJSON(options) : null,
            endDate: this.endDate ? this.endDate.toProtobufJSON(options) : null,
            tags: (this.tags || []).slice()
        };
    }
}
Intent.id = 'ondewo.nlu.Intent';
(function (Intent) {
    let IntentStatus;
    (function (IntentStatus) {
        IntentStatus[IntentStatus["ACTIVE"] = 0] = "ACTIVE";
        IntentStatus[IntentStatus["INACTIVE"] = 1] = "INACTIVE";
    })(IntentStatus = Intent.IntentStatus || (Intent.IntentStatus = {}));
    let WebhookState;
    (function (WebhookState) {
        WebhookState[WebhookState["WEBHOOK_STATE_UNSPECIFIED"] = 0] = "WEBHOOK_STATE_UNSPECIFIED";
        WebhookState[WebhookState["WEBHOOK_STATE_ENABLED"] = 1] = "WEBHOOK_STATE_ENABLED";
        WebhookState[WebhookState["WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING"] = 2] = "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING";
    })(WebhookState = Intent.WebhookState || (Intent.WebhookState = {}));
    /**
     * Message implementation for ondewo.nlu.TrainingPhrase
     */
    class TrainingPhrase {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of TrainingPhrase to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.name = _value.name;
            this.type = _value.type;
            this.text = _value.text;
            this.entities = (_value.entities || []).map(m => new Intent.TrainingPhrase.Entity(m));
            this.timesAddedCount = _value.timesAddedCount;
            this.languageCode = _value.languageCode;
            TrainingPhrase.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new TrainingPhrase();
            TrainingPhrase.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.name = _instance.name || '';
            _instance.type = _instance.type || 0;
            _instance.text = _instance.text || '';
            _instance.entities = _instance.entities || [];
            _instance.timesAddedCount = _instance.timesAddedCount || 0;
            _instance.languageCode = _instance.languageCode || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.name = _reader.readString();
                        break;
                    case 2:
                        _instance.type = _reader.readEnum();
                        break;
                    case 3:
                        _instance.text = _reader.readString();
                        break;
                    case 4:
                        const messageInitializer4 = new Intent.TrainingPhrase.Entity();
                        _reader.readMessage(messageInitializer4, Intent.TrainingPhrase.Entity.deserializeBinaryFromReader);
                        (_instance.entities = _instance.entities || []).push(messageInitializer4);
                        break;
                    case 5:
                        _instance.timesAddedCount = _reader.readInt32();
                        break;
                    case 6:
                        _instance.languageCode = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            TrainingPhrase.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.name) {
                _writer.writeString(1, _instance.name);
            }
            if (_instance.type) {
                _writer.writeEnum(2, _instance.type);
            }
            if (_instance.text) {
                _writer.writeString(3, _instance.text);
            }
            if (_instance.entities && _instance.entities.length) {
                _writer.writeRepeatedMessage(4, _instance.entities, Intent.TrainingPhrase.Entity.serializeBinaryToWriter);
            }
            if (_instance.timesAddedCount) {
                _writer.writeInt32(5, _instance.timesAddedCount);
            }
            if (_instance.languageCode) {
                _writer.writeString(6, _instance.languageCode);
            }
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        get type() {
            return this._type;
        }
        set type(value) {
            this._type = value;
        }
        get text() {
            return this._text;
        }
        set text(value) {
            this._text = value;
        }
        get entities() {
            return this._entities;
        }
        set entities(value) {
            this._entities = value;
        }
        get timesAddedCount() {
            return this._timesAddedCount;
        }
        set timesAddedCount(value) {
            this._timesAddedCount = value;
        }
        get languageCode() {
            return this._languageCode;
        }
        set languageCode(value) {
            this._languageCode = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            TrainingPhrase.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                name: this.name,
                type: this.type,
                text: this.text,
                entities: (this.entities || []).map(m => m.toObject()),
                timesAddedCount: this.timesAddedCount,
                languageCode: this.languageCode
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                name: this.name,
                type: Intent.TrainingPhrase.Type[this.type === null || this.type === undefined ? 0 : this.type],
                text: this.text,
                entities: (this.entities || []).map(m => m.toProtobufJSON(options)),
                timesAddedCount: this.timesAddedCount,
                languageCode: this.languageCode
            };
        }
    }
    TrainingPhrase.id = 'ondewo.nlu.TrainingPhrase';
    Intent.TrainingPhrase = TrainingPhrase;
    (function (TrainingPhrase) {
        let Type;
        (function (Type) {
            Type[Type["TYPE_UNSPECIFIED"] = 0] = "TYPE_UNSPECIFIED";
            Type[Type["EXAMPLE"] = 1] = "EXAMPLE";
            Type[Type["TEMPLATE"] = 2] = "TEMPLATE";
        })(Type = TrainingPhrase.Type || (TrainingPhrase.Type = {}));
        /**
         * Message implementation for ondewo.nlu.Entity
         */
        class Entity {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Entity to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.entityTypeName = _value.entityTypeName;
                this.entityTypeDisplayName = _value.entityTypeDisplayName;
                this.entityValueName = _value.entityValueName;
                this.entityValueDisplayName = _value.entityValueDisplayName;
                this.start = _value.start;
                this.end = _value.end;
                this.parameterName = _value.parameterName;
                this.parameterDisplayName = _value.parameterDisplayName;
                Entity.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Entity();
                Entity.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.entityTypeName = _instance.entityTypeName || '';
                _instance.entityTypeDisplayName = _instance.entityTypeDisplayName || '';
                _instance.entityValueName = _instance.entityValueName || '';
                _instance.entityValueDisplayName =
                    _instance.entityValueDisplayName || '';
                _instance.start = _instance.start || 0;
                _instance.end = _instance.end || 0;
                _instance.parameterName = _instance.parameterName || '';
                _instance.parameterDisplayName = _instance.parameterDisplayName || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.entityTypeName = _reader.readString();
                            break;
                        case 3:
                            _instance.entityTypeDisplayName = _reader.readString();
                            break;
                        case 4:
                            _instance.entityValueName = _reader.readString();
                            break;
                        case 5:
                            _instance.entityValueDisplayName = _reader.readString();
                            break;
                        case 6:
                            _instance.start = _reader.readInt32();
                            break;
                        case 7:
                            _instance.end = _reader.readInt32();
                            break;
                        case 8:
                            _instance.parameterName = _reader.readString();
                            break;
                        case 9:
                            _instance.parameterDisplayName = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Entity.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.entityTypeName) {
                    _writer.writeString(1, _instance.entityTypeName);
                }
                if (_instance.entityTypeDisplayName) {
                    _writer.writeString(3, _instance.entityTypeDisplayName);
                }
                if (_instance.entityValueName) {
                    _writer.writeString(4, _instance.entityValueName);
                }
                if (_instance.entityValueDisplayName) {
                    _writer.writeString(5, _instance.entityValueDisplayName);
                }
                if (_instance.start) {
                    _writer.writeInt32(6, _instance.start);
                }
                if (_instance.end) {
                    _writer.writeInt32(7, _instance.end);
                }
                if (_instance.parameterName) {
                    _writer.writeString(8, _instance.parameterName);
                }
                if (_instance.parameterDisplayName) {
                    _writer.writeString(9, _instance.parameterDisplayName);
                }
            }
            get entityTypeName() {
                return this._entityTypeName;
            }
            set entityTypeName(value) {
                this._entityTypeName = value;
            }
            get entityTypeDisplayName() {
                return this._entityTypeDisplayName;
            }
            set entityTypeDisplayName(value) {
                this._entityTypeDisplayName = value;
            }
            get entityValueName() {
                return this._entityValueName;
            }
            set entityValueName(value) {
                this._entityValueName = value;
            }
            get entityValueDisplayName() {
                return this._entityValueDisplayName;
            }
            set entityValueDisplayName(value) {
                this._entityValueDisplayName = value;
            }
            get start() {
                return this._start;
            }
            set start(value) {
                this._start = value;
            }
            get end() {
                return this._end;
            }
            set end(value) {
                this._end = value;
            }
            get parameterName() {
                return this._parameterName;
            }
            set parameterName(value) {
                this._parameterName = value;
            }
            get parameterDisplayName() {
                return this._parameterDisplayName;
            }
            set parameterDisplayName(value) {
                this._parameterDisplayName = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Entity.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    entityTypeName: this.entityTypeName,
                    entityTypeDisplayName: this.entityTypeDisplayName,
                    entityValueName: this.entityValueName,
                    entityValueDisplayName: this.entityValueDisplayName,
                    start: this.start,
                    end: this.end,
                    parameterName: this.parameterName,
                    parameterDisplayName: this.parameterDisplayName
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    entityTypeName: this.entityTypeName,
                    entityTypeDisplayName: this.entityTypeDisplayName,
                    entityValueName: this.entityValueName,
                    entityValueDisplayName: this.entityValueDisplayName,
                    start: this.start,
                    end: this.end,
                    parameterName: this.parameterName,
                    parameterDisplayName: this.parameterDisplayName
                };
            }
        }
        Entity.id = 'ondewo.nlu.Entity';
        TrainingPhrase.Entity = Entity;
    })(TrainingPhrase = Intent.TrainingPhrase || (Intent.TrainingPhrase = {}));
    /**
     * Message implementation for ondewo.nlu.Parameter
     */
    class Parameter {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of Parameter to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.name = _value.name;
            this.displayName = _value.displayName;
            this.value = _value.value;
            this.defaultValue = _value.defaultValue;
            this.entityTypeName = _value.entityTypeName;
            this.entityTypeDisplayName = _value.entityTypeDisplayName;
            this.mandatory = _value.mandatory;
            this.prompts = (_value.prompts || []).map(m => new Intent.Parameter.Prompt(m));
            this.isList = _value.isList;
            Parameter.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new Parameter();
            Parameter.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.name = _instance.name || '';
            _instance.displayName = _instance.displayName || '';
            _instance.value = _instance.value || '';
            _instance.defaultValue = _instance.defaultValue || '';
            _instance.entityTypeName = _instance.entityTypeName || '';
            _instance.entityTypeDisplayName = _instance.entityTypeDisplayName || '';
            _instance.mandatory = _instance.mandatory || false;
            _instance.prompts = _instance.prompts || [];
            _instance.isList = _instance.isList || false;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.name = _reader.readString();
                        break;
                    case 2:
                        _instance.displayName = _reader.readString();
                        break;
                    case 3:
                        _instance.value = _reader.readString();
                        break;
                    case 4:
                        _instance.defaultValue = _reader.readString();
                        break;
                    case 5:
                        _instance.entityTypeName = _reader.readString();
                        break;
                    case 6:
                        _instance.entityTypeDisplayName = _reader.readString();
                        break;
                    case 7:
                        _instance.mandatory = _reader.readBool();
                        break;
                    case 8:
                        const messageInitializer8 = new Intent.Parameter.Prompt();
                        _reader.readMessage(messageInitializer8, Intent.Parameter.Prompt.deserializeBinaryFromReader);
                        (_instance.prompts = _instance.prompts || []).push(messageInitializer8);
                        break;
                    case 9:
                        _instance.isList = _reader.readBool();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            Parameter.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.name) {
                _writer.writeString(1, _instance.name);
            }
            if (_instance.displayName) {
                _writer.writeString(2, _instance.displayName);
            }
            if (_instance.value) {
                _writer.writeString(3, _instance.value);
            }
            if (_instance.defaultValue) {
                _writer.writeString(4, _instance.defaultValue);
            }
            if (_instance.entityTypeName) {
                _writer.writeString(5, _instance.entityTypeName);
            }
            if (_instance.entityTypeDisplayName) {
                _writer.writeString(6, _instance.entityTypeDisplayName);
            }
            if (_instance.mandatory) {
                _writer.writeBool(7, _instance.mandatory);
            }
            if (_instance.prompts && _instance.prompts.length) {
                _writer.writeRepeatedMessage(8, _instance.prompts, Intent.Parameter.Prompt.serializeBinaryToWriter);
            }
            if (_instance.isList) {
                _writer.writeBool(9, _instance.isList);
            }
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        get displayName() {
            return this._displayName;
        }
        set displayName(value) {
            this._displayName = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        get defaultValue() {
            return this._defaultValue;
        }
        set defaultValue(value) {
            this._defaultValue = value;
        }
        get entityTypeName() {
            return this._entityTypeName;
        }
        set entityTypeName(value) {
            this._entityTypeName = value;
        }
        get entityTypeDisplayName() {
            return this._entityTypeDisplayName;
        }
        set entityTypeDisplayName(value) {
            this._entityTypeDisplayName = value;
        }
        get mandatory() {
            return this._mandatory;
        }
        set mandatory(value) {
            this._mandatory = value;
        }
        get prompts() {
            return this._prompts;
        }
        set prompts(value) {
            this._prompts = value;
        }
        get isList() {
            return this._isList;
        }
        set isList(value) {
            this._isList = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            Parameter.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                name: this.name,
                displayName: this.displayName,
                value: this.value,
                defaultValue: this.defaultValue,
                entityTypeName: this.entityTypeName,
                entityTypeDisplayName: this.entityTypeDisplayName,
                mandatory: this.mandatory,
                prompts: (this.prompts || []).map(m => m.toObject()),
                isList: this.isList
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                name: this.name,
                displayName: this.displayName,
                value: this.value,
                defaultValue: this.defaultValue,
                entityTypeName: this.entityTypeName,
                entityTypeDisplayName: this.entityTypeDisplayName,
                mandatory: this.mandatory,
                prompts: (this.prompts || []).map(m => m.toProtobufJSON(options)),
                isList: this.isList
            };
        }
    }
    Parameter.id = 'ondewo.nlu.Parameter';
    Intent.Parameter = Parameter;
    (function (Parameter) {
        /**
         * Message implementation for ondewo.nlu.Prompt
         */
        class Prompt {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Prompt to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.name = _value.name;
                this.text = _value.text;
                this.languageCode = _value.languageCode;
                Prompt.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Prompt();
                Prompt.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.name = _instance.name || '';
                _instance.text = _instance.text || '';
                _instance.languageCode = _instance.languageCode || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.name = _reader.readString();
                            break;
                        case 2:
                            _instance.text = _reader.readString();
                            break;
                        case 3:
                            _instance.languageCode = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Prompt.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.name) {
                    _writer.writeString(1, _instance.name);
                }
                if (_instance.text) {
                    _writer.writeString(2, _instance.text);
                }
                if (_instance.languageCode) {
                    _writer.writeString(3, _instance.languageCode);
                }
            }
            get name() {
                return this._name;
            }
            set name(value) {
                this._name = value;
            }
            get text() {
                return this._text;
            }
            set text(value) {
                this._text = value;
            }
            get languageCode() {
                return this._languageCode;
            }
            set languageCode(value) {
                this._languageCode = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Prompt.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    name: this.name,
                    text: this.text,
                    languageCode: this.languageCode
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    name: this.name,
                    text: this.text,
                    languageCode: this.languageCode
                };
            }
        }
        Prompt.id = 'ondewo.nlu.Prompt';
        Parameter.Prompt = Prompt;
    })(Parameter = Intent.Parameter || (Intent.Parameter = {}));
    /**
     * Message implementation for ondewo.nlu.Message
     */
    class Message {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of Message to deeply clone from
         */
        constructor(_value) {
            this._message = Message.MessageCase.none;
            _value = _value || {};
            this.name = _value.name;
            this.languageCode = _value.languageCode;
            this.text = _value.text
                ? new Intent.Message.Text(_value.text)
                : undefined;
            this.image = _value.image
                ? new Intent.Message.Image(_value.image)
                : undefined;
            this.quickReplies = _value.quickReplies
                ? new Intent.Message.QuickReplies(_value.quickReplies)
                : undefined;
            this.card = _value.card
                ? new Intent.Message.Card(_value.card)
                : undefined;
            this.payload = _value.payload
                ? new googleProtobuf003.Struct(_value.payload)
                : undefined;
            this.simpleResponses = _value.simpleResponses
                ? new Intent.Message.SimpleResponses(_value.simpleResponses)
                : undefined;
            this.basicCard = _value.basicCard
                ? new Intent.Message.BasicCard(_value.basicCard)
                : undefined;
            this.suggestions = _value.suggestions
                ? new Intent.Message.Suggestions(_value.suggestions)
                : undefined;
            this.linkOutSuggestion = _value.linkOutSuggestion
                ? new Intent.Message.LinkOutSuggestion(_value.linkOutSuggestion)
                : undefined;
            this.listSelect = _value.listSelect
                ? new Intent.Message.ListSelect(_value.listSelect)
                : undefined;
            this.carouselSelect = _value.carouselSelect
                ? new Intent.Message.CarouselSelect(_value.carouselSelect)
                : undefined;
            this.htmlText = _value.htmlText
                ? new Intent.Message.HTMLText(_value.htmlText)
                : undefined;
            this.video = _value.video
                ? new Intent.Message.Video(_value.video)
                : undefined;
            this.audio = _value.audio
                ? new Intent.Message.Audio(_value.audio)
                : undefined;
            this.platform = _value.platform;
            this.isPrompt = _value.isPrompt;
            Message.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new Message();
            Message.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.name = _instance.name || '';
            _instance.languageCode = _instance.languageCode || '';
            _instance.platform = _instance.platform || 0;
            _instance.isPrompt = _instance.isPrompt || false;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 16:
                        _instance.name = _reader.readString();
                        break;
                    case 17:
                        _instance.languageCode = _reader.readString();
                        break;
                    case 1:
                        _instance.text = new Intent.Message.Text();
                        _reader.readMessage(_instance.text, Intent.Message.Text.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.image = new Intent.Message.Image();
                        _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                        break;
                    case 3:
                        _instance.quickReplies = new Intent.Message.QuickReplies();
                        _reader.readMessage(_instance.quickReplies, Intent.Message.QuickReplies.deserializeBinaryFromReader);
                        break;
                    case 4:
                        _instance.card = new Intent.Message.Card();
                        _reader.readMessage(_instance.card, Intent.Message.Card.deserializeBinaryFromReader);
                        break;
                    case 5:
                        _instance.payload = new googleProtobuf003.Struct();
                        _reader.readMessage(_instance.payload, googleProtobuf003.Struct.deserializeBinaryFromReader);
                        break;
                    case 7:
                        _instance.simpleResponses = new Intent.Message.SimpleResponses();
                        _reader.readMessage(_instance.simpleResponses, Intent.Message.SimpleResponses.deserializeBinaryFromReader);
                        break;
                    case 8:
                        _instance.basicCard = new Intent.Message.BasicCard();
                        _reader.readMessage(_instance.basicCard, Intent.Message.BasicCard.deserializeBinaryFromReader);
                        break;
                    case 9:
                        _instance.suggestions = new Intent.Message.Suggestions();
                        _reader.readMessage(_instance.suggestions, Intent.Message.Suggestions.deserializeBinaryFromReader);
                        break;
                    case 10:
                        _instance.linkOutSuggestion = new Intent.Message.LinkOutSuggestion();
                        _reader.readMessage(_instance.linkOutSuggestion, Intent.Message.LinkOutSuggestion.deserializeBinaryFromReader);
                        break;
                    case 11:
                        _instance.listSelect = new Intent.Message.ListSelect();
                        _reader.readMessage(_instance.listSelect, Intent.Message.ListSelect.deserializeBinaryFromReader);
                        break;
                    case 12:
                        _instance.carouselSelect = new Intent.Message.CarouselSelect();
                        _reader.readMessage(_instance.carouselSelect, Intent.Message.CarouselSelect.deserializeBinaryFromReader);
                        break;
                    case 13:
                        _instance.htmlText = new Intent.Message.HTMLText();
                        _reader.readMessage(_instance.htmlText, Intent.Message.HTMLText.deserializeBinaryFromReader);
                        break;
                    case 14:
                        _instance.video = new Intent.Message.Video();
                        _reader.readMessage(_instance.video, Intent.Message.Video.deserializeBinaryFromReader);
                        break;
                    case 15:
                        _instance.audio = new Intent.Message.Audio();
                        _reader.readMessage(_instance.audio, Intent.Message.Audio.deserializeBinaryFromReader);
                        break;
                    case 6:
                        _instance.platform = _reader.readEnum();
                        break;
                    case 18:
                        _instance.isPrompt = _reader.readBool();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            Message.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.name) {
                _writer.writeString(16, _instance.name);
            }
            if (_instance.languageCode) {
                _writer.writeString(17, _instance.languageCode);
            }
            if (_instance.text) {
                _writer.writeMessage(1, _instance.text, Intent.Message.Text.serializeBinaryToWriter);
            }
            if (_instance.image) {
                _writer.writeMessage(2, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
            }
            if (_instance.quickReplies) {
                _writer.writeMessage(3, _instance.quickReplies, Intent.Message.QuickReplies.serializeBinaryToWriter);
            }
            if (_instance.card) {
                _writer.writeMessage(4, _instance.card, Intent.Message.Card.serializeBinaryToWriter);
            }
            if (_instance.payload) {
                _writer.writeMessage(5, _instance.payload, googleProtobuf003.Struct.serializeBinaryToWriter);
            }
            if (_instance.simpleResponses) {
                _writer.writeMessage(7, _instance.simpleResponses, Intent.Message.SimpleResponses.serializeBinaryToWriter);
            }
            if (_instance.basicCard) {
                _writer.writeMessage(8, _instance.basicCard, Intent.Message.BasicCard.serializeBinaryToWriter);
            }
            if (_instance.suggestions) {
                _writer.writeMessage(9, _instance.suggestions, Intent.Message.Suggestions.serializeBinaryToWriter);
            }
            if (_instance.linkOutSuggestion) {
                _writer.writeMessage(10, _instance.linkOutSuggestion, Intent.Message.LinkOutSuggestion.serializeBinaryToWriter);
            }
            if (_instance.listSelect) {
                _writer.writeMessage(11, _instance.listSelect, Intent.Message.ListSelect.serializeBinaryToWriter);
            }
            if (_instance.carouselSelect) {
                _writer.writeMessage(12, _instance.carouselSelect, Intent.Message.CarouselSelect.serializeBinaryToWriter);
            }
            if (_instance.htmlText) {
                _writer.writeMessage(13, _instance.htmlText, Intent.Message.HTMLText.serializeBinaryToWriter);
            }
            if (_instance.video) {
                _writer.writeMessage(14, _instance.video, Intent.Message.Video.serializeBinaryToWriter);
            }
            if (_instance.audio) {
                _writer.writeMessage(15, _instance.audio, Intent.Message.Audio.serializeBinaryToWriter);
            }
            if (_instance.platform) {
                _writer.writeEnum(6, _instance.platform);
            }
            if (_instance.isPrompt) {
                _writer.writeBool(18, _instance.isPrompt);
            }
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        get languageCode() {
            return this._languageCode;
        }
        set languageCode(value) {
            this._languageCode = value;
        }
        get text() {
            return this._text;
        }
        set text(value) {
            if (value !== undefined && value !== null) {
                this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.text;
            }
            this._text = value;
        }
        get image() {
            return this._image;
        }
        set image(value) {
            if (value !== undefined && value !== null) {
                this._text = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.image;
            }
            this._image = value;
        }
        get quickReplies() {
            return this._quickReplies;
        }
        set quickReplies(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.quickReplies;
            }
            this._quickReplies = value;
        }
        get card() {
            return this._card;
        }
        set card(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.card;
            }
            this._card = value;
        }
        get payload() {
            return this._payload;
        }
        set payload(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.payload;
            }
            this._payload = value;
        }
        get simpleResponses() {
            return this._simpleResponses;
        }
        set simpleResponses(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.simpleResponses;
            }
            this._simpleResponses = value;
        }
        get basicCard() {
            return this._basicCard;
        }
        set basicCard(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.basicCard;
            }
            this._basicCard = value;
        }
        get suggestions() {
            return this._suggestions;
        }
        set suggestions(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.suggestions;
            }
            this._suggestions = value;
        }
        get linkOutSuggestion() {
            return this._linkOutSuggestion;
        }
        set linkOutSuggestion(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.linkOutSuggestion;
            }
            this._linkOutSuggestion = value;
        }
        get listSelect() {
            return this._listSelect;
        }
        set listSelect(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.listSelect;
            }
            this._listSelect = value;
        }
        get carouselSelect() {
            return this._carouselSelect;
        }
        set carouselSelect(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.carouselSelect;
            }
            this._carouselSelect = value;
        }
        get htmlText() {
            return this._htmlText;
        }
        set htmlText(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._video = this._audio = undefined;
                this._message = Message.MessageCase.htmlText;
            }
            this._htmlText = value;
        }
        get video() {
            return this._video;
        }
        set video(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._audio = undefined;
                this._message = Message.MessageCase.video;
            }
            this._video = value;
        }
        get audio() {
            return this._audio;
        }
        set audio(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = undefined;
                this._message = Message.MessageCase.audio;
            }
            this._audio = value;
        }
        get platform() {
            return this._platform;
        }
        set platform(value) {
            this._platform = value;
        }
        get isPrompt() {
            return this._isPrompt;
        }
        set isPrompt(value) {
            this._isPrompt = value;
        }
        get message() {
            return this._message;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            Message.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                name: this.name,
                languageCode: this.languageCode,
                text: this.text ? this.text.toObject() : undefined,
                image: this.image ? this.image.toObject() : undefined,
                quickReplies: this.quickReplies
                    ? this.quickReplies.toObject()
                    : undefined,
                card: this.card ? this.card.toObject() : undefined,
                payload: this.payload ? this.payload.toObject() : undefined,
                simpleResponses: this.simpleResponses
                    ? this.simpleResponses.toObject()
                    : undefined,
                basicCard: this.basicCard ? this.basicCard.toObject() : undefined,
                suggestions: this.suggestions ? this.suggestions.toObject() : undefined,
                linkOutSuggestion: this.linkOutSuggestion
                    ? this.linkOutSuggestion.toObject()
                    : undefined,
                listSelect: this.listSelect ? this.listSelect.toObject() : undefined,
                carouselSelect: this.carouselSelect
                    ? this.carouselSelect.toObject()
                    : undefined,
                htmlText: this.htmlText ? this.htmlText.toObject() : undefined,
                video: this.video ? this.video.toObject() : undefined,
                audio: this.audio ? this.audio.toObject() : undefined,
                platform: this.platform,
                isPrompt: this.isPrompt
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                name: this.name,
                languageCode: this.languageCode,
                text: this.text ? this.text.toProtobufJSON(options) : null,
                image: this.image ? this.image.toProtobufJSON(options) : null,
                quickReplies: this.quickReplies
                    ? this.quickReplies.toProtobufJSON(options)
                    : null,
                card: this.card ? this.card.toProtobufJSON(options) : null,
                payload: this.payload ? this.payload.toProtobufJSON(options) : null,
                simpleResponses: this.simpleResponses
                    ? this.simpleResponses.toProtobufJSON(options)
                    : null,
                basicCard: this.basicCard
                    ? this.basicCard.toProtobufJSON(options)
                    : null,
                suggestions: this.suggestions
                    ? this.suggestions.toProtobufJSON(options)
                    : null,
                linkOutSuggestion: this.linkOutSuggestion
                    ? this.linkOutSuggestion.toProtobufJSON(options)
                    : null,
                listSelect: this.listSelect
                    ? this.listSelect.toProtobufJSON(options)
                    : null,
                carouselSelect: this.carouselSelect
                    ? this.carouselSelect.toProtobufJSON(options)
                    : null,
                htmlText: this.htmlText ? this.htmlText.toProtobufJSON(options) : null,
                video: this.video ? this.video.toProtobufJSON(options) : null,
                audio: this.audio ? this.audio.toProtobufJSON(options) : null,
                platform: Intent.Message.Platform[this.platform === null || this.platform === undefined
                    ? 0
                    : this.platform],
                isPrompt: this.isPrompt
            };
        }
    }
    Message.id = 'ondewo.nlu.Message';
    Intent.Message = Message;
    (function (Message) {
        let MessageCase;
        (function (MessageCase) {
            MessageCase[MessageCase["none"] = 0] = "none";
            MessageCase[MessageCase["text"] = 1] = "text";
            MessageCase[MessageCase["image"] = 2] = "image";
            MessageCase[MessageCase["quickReplies"] = 3] = "quickReplies";
            MessageCase[MessageCase["card"] = 4] = "card";
            MessageCase[MessageCase["payload"] = 5] = "payload";
            MessageCase[MessageCase["simpleResponses"] = 6] = "simpleResponses";
            MessageCase[MessageCase["basicCard"] = 7] = "basicCard";
            MessageCase[MessageCase["suggestions"] = 8] = "suggestions";
            MessageCase[MessageCase["linkOutSuggestion"] = 9] = "linkOutSuggestion";
            MessageCase[MessageCase["listSelect"] = 10] = "listSelect";
            MessageCase[MessageCase["carouselSelect"] = 11] = "carouselSelect";
            MessageCase[MessageCase["htmlText"] = 12] = "htmlText";
            MessageCase[MessageCase["video"] = 13] = "video";
            MessageCase[MessageCase["audio"] = 14] = "audio";
        })(MessageCase = Message.MessageCase || (Message.MessageCase = {}));
        let Platform;
        (function (Platform) {
            Platform[Platform["PLATFORM_UNSPECIFIED"] = 0] = "PLATFORM_UNSPECIFIED";
            Platform[Platform["FACEBOOK"] = 1] = "FACEBOOK";
            Platform[Platform["SLACK"] = 2] = "SLACK";
            Platform[Platform["TELEGRAM"] = 3] = "TELEGRAM";
            Platform[Platform["KIK"] = 4] = "KIK";
            Platform[Platform["SKYPE"] = 5] = "SKYPE";
            Platform[Platform["LINE"] = 6] = "LINE";
            Platform[Platform["VIBER"] = 7] = "VIBER";
            Platform[Platform["ACTIONS_ON_GOOGLE"] = 8] = "ACTIONS_ON_GOOGLE";
            Platform[Platform["PLACEHOLDER_1"] = 9] = "PLACEHOLDER_1";
            Platform[Platform["PLACEHOLDER_2"] = 10] = "PLACEHOLDER_2";
            Platform[Platform["PLACEHOLDER_3"] = 11] = "PLACEHOLDER_3";
            Platform[Platform["PLACEHOLDER_4"] = 12] = "PLACEHOLDER_4";
            Platform[Platform["PLACEHOLDER_5"] = 13] = "PLACEHOLDER_5";
            Platform[Platform["PLACEHOLDER_6"] = 14] = "PLACEHOLDER_6";
            Platform[Platform["PLACEHOLDER_7"] = 15] = "PLACEHOLDER_7";
            Platform[Platform["PLACEHOLDER_8"] = 16] = "PLACEHOLDER_8";
            Platform[Platform["PLACEHOLDER_9"] = 17] = "PLACEHOLDER_9";
            Platform[Platform["PLACEHOLDER_10"] = 18] = "PLACEHOLDER_10";
            Platform[Platform["PLACEHOLDER_11"] = 19] = "PLACEHOLDER_11";
            Platform[Platform["PLACEHOLDER_12"] = 20] = "PLACEHOLDER_12";
            Platform[Platform["PLACEHOLDER_13"] = 21] = "PLACEHOLDER_13";
            Platform[Platform["PLACEHOLDER_14"] = 22] = "PLACEHOLDER_14";
            Platform[Platform["PLACEHOLDER_15"] = 23] = "PLACEHOLDER_15";
            Platform[Platform["PLACEHOLDER_16"] = 24] = "PLACEHOLDER_16";
            Platform[Platform["PLACEHOLDER_17"] = 25] = "PLACEHOLDER_17";
            Platform[Platform["PLACEHOLDER_18"] = 26] = "PLACEHOLDER_18";
            Platform[Platform["PLACEHOLDER_19"] = 27] = "PLACEHOLDER_19";
            Platform[Platform["PLACEHOLDER_20"] = 28] = "PLACEHOLDER_20";
        })(Platform = Message.Platform || (Message.Platform = {}));
        /**
         * Message implementation for ondewo.nlu.Text
         */
        class Text {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Text to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.text = (_value.text || []).slice();
                Text.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Text();
                Text.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.text = _instance.text || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            (_instance.text = _instance.text || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Text.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.text && _instance.text.length) {
                    _writer.writeRepeatedString(1, _instance.text);
                }
            }
            get text() {
                return this._text;
            }
            set text(value) {
                this._text = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Text.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    text: (this.text || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    text: (this.text || []).slice()
                };
            }
        }
        Text.id = 'ondewo.nlu.Text';
        Message.Text = Text;
        /**
         * Message implementation for ondewo.nlu.Image
         */
        class Image {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Image to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.imageUri = _value.imageUri;
                this.accessibilityText = _value.accessibilityText;
                Image.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Image();
                Image.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.imageUri = _instance.imageUri || '';
                _instance.accessibilityText = _instance.accessibilityText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.imageUri = _reader.readString();
                            break;
                        case 2:
                            _instance.accessibilityText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Image.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.imageUri) {
                    _writer.writeString(1, _instance.imageUri);
                }
                if (_instance.accessibilityText) {
                    _writer.writeString(2, _instance.accessibilityText);
                }
            }
            get imageUri() {
                return this._imageUri;
            }
            set imageUri(value) {
                this._imageUri = value;
            }
            get accessibilityText() {
                return this._accessibilityText;
            }
            set accessibilityText(value) {
                this._accessibilityText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Image.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    imageUri: this.imageUri,
                    accessibilityText: this.accessibilityText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    imageUri: this.imageUri,
                    accessibilityText: this.accessibilityText
                };
            }
        }
        Image.id = 'ondewo.nlu.Image';
        Message.Image = Image;
        /**
         * Message implementation for ondewo.nlu.QuickReplies
         */
        class QuickReplies {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of QuickReplies to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.quickReplies = (_value.quickReplies || []).slice();
                QuickReplies.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new QuickReplies();
                QuickReplies.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.quickReplies = _instance.quickReplies || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            (_instance.quickReplies = _instance.quickReplies || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                QuickReplies.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.quickReplies && _instance.quickReplies.length) {
                    _writer.writeRepeatedString(2, _instance.quickReplies);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get quickReplies() {
                return this._quickReplies;
            }
            set quickReplies(value) {
                this._quickReplies = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                QuickReplies.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    quickReplies: (this.quickReplies || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    quickReplies: (this.quickReplies || []).slice()
                };
            }
        }
        QuickReplies.id = 'ondewo.nlu.QuickReplies';
        Message.QuickReplies = QuickReplies;
        /**
         * Message implementation for ondewo.nlu.Card
         */
        class Card {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Card to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.subtitle = _value.subtitle;
                this.imageUri = _value.imageUri;
                this.buttons = (_value.buttons || []).map(m => new Intent.Message.Card.Button(m));
                Card.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Card();
                Card.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.subtitle = _instance.subtitle || '';
                _instance.imageUri = _instance.imageUri || '';
                _instance.buttons = _instance.buttons || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            _instance.subtitle = _reader.readString();
                            break;
                        case 3:
                            _instance.imageUri = _reader.readString();
                            break;
                        case 4:
                            const messageInitializer4 = new Intent.Message.Card.Button();
                            _reader.readMessage(messageInitializer4, Intent.Message.Card.Button.deserializeBinaryFromReader);
                            (_instance.buttons = _instance.buttons || []).push(messageInitializer4);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Card.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.subtitle) {
                    _writer.writeString(2, _instance.subtitle);
                }
                if (_instance.imageUri) {
                    _writer.writeString(3, _instance.imageUri);
                }
                if (_instance.buttons && _instance.buttons.length) {
                    _writer.writeRepeatedMessage(4, _instance.buttons, Intent.Message.Card.Button.serializeBinaryToWriter);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get subtitle() {
                return this._subtitle;
            }
            set subtitle(value) {
                this._subtitle = value;
            }
            get imageUri() {
                return this._imageUri;
            }
            set imageUri(value) {
                this._imageUri = value;
            }
            get buttons() {
                return this._buttons;
            }
            set buttons(value) {
                this._buttons = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Card.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    imageUri: this.imageUri,
                    buttons: (this.buttons || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    imageUri: this.imageUri,
                    buttons: (this.buttons || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        Card.id = 'ondewo.nlu.Card';
        Message.Card = Card;
        (function (Card) {
            /**
             * Message implementation for ondewo.nlu.Button
             */
            class Button {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Button to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.text = _value.text;
                    this.postback = _value.postback;
                    Button.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Button();
                    Button.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.text = _instance.text || '';
                    _instance.postback = _instance.postback || '';
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.text = _reader.readString();
                                break;
                            case 2:
                                _instance.postback = _reader.readString();
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Button.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.text) {
                        _writer.writeString(1, _instance.text);
                    }
                    if (_instance.postback) {
                        _writer.writeString(2, _instance.postback);
                    }
                }
                get text() {
                    return this._text;
                }
                set text(value) {
                    this._text = value;
                }
                get postback() {
                    return this._postback;
                }
                set postback(value) {
                    this._postback = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Button.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        text: this.text,
                        postback: this.postback
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        text: this.text,
                        postback: this.postback
                    };
                }
            }
            Button.id = 'ondewo.nlu.Button';
            Card.Button = Button;
        })(Card = Message.Card || (Message.Card = {}));
        /**
         * Message implementation for ondewo.nlu.SimpleResponse
         */
        class SimpleResponse {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of SimpleResponse to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.textToSpeech = _value.textToSpeech;
                this.ssml = _value.ssml;
                this.displayText = _value.displayText;
                SimpleResponse.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new SimpleResponse();
                SimpleResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.textToSpeech = _instance.textToSpeech || '';
                _instance.ssml = _instance.ssml || '';
                _instance.displayText = _instance.displayText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.textToSpeech = _reader.readString();
                            break;
                        case 2:
                            _instance.ssml = _reader.readString();
                            break;
                        case 3:
                            _instance.displayText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                SimpleResponse.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.textToSpeech) {
                    _writer.writeString(1, _instance.textToSpeech);
                }
                if (_instance.ssml) {
                    _writer.writeString(2, _instance.ssml);
                }
                if (_instance.displayText) {
                    _writer.writeString(3, _instance.displayText);
                }
            }
            get textToSpeech() {
                return this._textToSpeech;
            }
            set textToSpeech(value) {
                this._textToSpeech = value;
            }
            get ssml() {
                return this._ssml;
            }
            set ssml(value) {
                this._ssml = value;
            }
            get displayText() {
                return this._displayText;
            }
            set displayText(value) {
                this._displayText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                SimpleResponse.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    textToSpeech: this.textToSpeech,
                    ssml: this.ssml,
                    displayText: this.displayText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    textToSpeech: this.textToSpeech,
                    ssml: this.ssml,
                    displayText: this.displayText
                };
            }
        }
        SimpleResponse.id = 'ondewo.nlu.SimpleResponse';
        Message.SimpleResponse = SimpleResponse;
        /**
         * Message implementation for ondewo.nlu.SimpleResponses
         */
        class SimpleResponses {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of SimpleResponses to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.simpleResponses = (_value.simpleResponses || []).map(m => new Intent.Message.SimpleResponse(m));
                SimpleResponses.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new SimpleResponses();
                SimpleResponses.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.simpleResponses = _instance.simpleResponses || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            const messageInitializer1 = new Intent.Message.SimpleResponse();
                            _reader.readMessage(messageInitializer1, Intent.Message.SimpleResponse.deserializeBinaryFromReader);
                            (_instance.simpleResponses =
                                _instance.simpleResponses || []).push(messageInitializer1);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                SimpleResponses.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.simpleResponses && _instance.simpleResponses.length) {
                    _writer.writeRepeatedMessage(1, _instance.simpleResponses, Intent.Message.SimpleResponse.serializeBinaryToWriter);
                }
            }
            get simpleResponses() {
                return this._simpleResponses;
            }
            set simpleResponses(value) {
                this._simpleResponses = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                SimpleResponses.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    simpleResponses: (this.simpleResponses || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    simpleResponses: (this.simpleResponses || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        SimpleResponses.id = 'ondewo.nlu.SimpleResponses';
        Message.SimpleResponses = SimpleResponses;
        /**
         * Message implementation for ondewo.nlu.BasicCard
         */
        class BasicCard {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of BasicCard to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.subtitle = _value.subtitle;
                this.formattedText = _value.formattedText;
                this.image = _value.image
                    ? new Intent.Message.Image(_value.image)
                    : undefined;
                this.buttons = (_value.buttons || []).map(m => new Intent.Message.BasicCard.Button(m));
                BasicCard.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new BasicCard();
                BasicCard.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.subtitle = _instance.subtitle || '';
                _instance.formattedText = _instance.formattedText || '';
                _instance.image = _instance.image || undefined;
                _instance.buttons = _instance.buttons || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            _instance.subtitle = _reader.readString();
                            break;
                        case 3:
                            _instance.formattedText = _reader.readString();
                            break;
                        case 4:
                            _instance.image = new Intent.Message.Image();
                            _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                            break;
                        case 5:
                            const messageInitializer5 = new Intent.Message.BasicCard.Button();
                            _reader.readMessage(messageInitializer5, Intent.Message.BasicCard.Button.deserializeBinaryFromReader);
                            (_instance.buttons = _instance.buttons || []).push(messageInitializer5);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                BasicCard.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.subtitle) {
                    _writer.writeString(2, _instance.subtitle);
                }
                if (_instance.formattedText) {
                    _writer.writeString(3, _instance.formattedText);
                }
                if (_instance.image) {
                    _writer.writeMessage(4, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
                }
                if (_instance.buttons && _instance.buttons.length) {
                    _writer.writeRepeatedMessage(5, _instance.buttons, Intent.Message.BasicCard.Button.serializeBinaryToWriter);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get subtitle() {
                return this._subtitle;
            }
            set subtitle(value) {
                this._subtitle = value;
            }
            get formattedText() {
                return this._formattedText;
            }
            set formattedText(value) {
                this._formattedText = value;
            }
            get image() {
                return this._image;
            }
            set image(value) {
                this._image = value;
            }
            get buttons() {
                return this._buttons;
            }
            set buttons(value) {
                this._buttons = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                BasicCard.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    formattedText: this.formattedText,
                    image: this.image ? this.image.toObject() : undefined,
                    buttons: (this.buttons || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    formattedText: this.formattedText,
                    image: this.image ? this.image.toProtobufJSON(options) : null,
                    buttons: (this.buttons || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        BasicCard.id = 'ondewo.nlu.BasicCard';
        Message.BasicCard = BasicCard;
        (function (BasicCard) {
            /**
             * Message implementation for ondewo.nlu.Button
             */
            class Button {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Button to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.title = _value.title;
                    this.openUriAction = _value.openUriAction
                        ? new Intent.Message.BasicCard.Button.OpenUriAction(_value.openUriAction)
                        : undefined;
                    Button.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Button();
                    Button.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.title = _instance.title || '';
                    _instance.openUriAction = _instance.openUriAction || undefined;
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.title = _reader.readString();
                                break;
                            case 2:
                                _instance.openUriAction = new Intent.Message.BasicCard.Button.OpenUriAction();
                                _reader.readMessage(_instance.openUriAction, Intent.Message.BasicCard.Button.OpenUriAction
                                    .deserializeBinaryFromReader);
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Button.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.title) {
                        _writer.writeString(1, _instance.title);
                    }
                    if (_instance.openUriAction) {
                        _writer.writeMessage(2, _instance.openUriAction, Intent.Message.BasicCard.Button.OpenUriAction
                            .serializeBinaryToWriter);
                    }
                }
                get title() {
                    return this._title;
                }
                set title(value) {
                    this._title = value;
                }
                get openUriAction() {
                    return this._openUriAction;
                }
                set openUriAction(value) {
                    this._openUriAction = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Button.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        title: this.title,
                        openUriAction: this.openUriAction
                            ? this.openUriAction.toObject()
                            : undefined
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        title: this.title,
                        openUriAction: this.openUriAction
                            ? this.openUriAction.toProtobufJSON(options)
                            : null
                    };
                }
            }
            Button.id = 'ondewo.nlu.Button';
            BasicCard.Button = Button;
            (function (Button) {
                /**
                 * Message implementation for ondewo.nlu.OpenUriAction
                 */
                class OpenUriAction {
                    /**
                     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                     * @param _value initial values object or instance of OpenUriAction to deeply clone from
                     */
                    constructor(_value) {
                        _value = _value || {};
                        this.uri = _value.uri;
                        OpenUriAction.refineValues(this);
                    }
                    /**
                     * Deserialize binary data to message
                     * @param instance message instance
                     */
                    static deserializeBinary(bytes) {
                        const instance = new OpenUriAction();
                        OpenUriAction.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                        return instance;
                    }
                    /**
                     * Check all the properties and set default protobuf values if necessary
                     * @param _instance message instance
                     */
                    static refineValues(_instance) {
                        _instance.uri = _instance.uri || '';
                    }
                    /**
                     * Deserializes / reads binary message into message instance using provided binary reader
                     * @param _instance message instance
                     * @param _reader binary reader instance
                     */
                    static deserializeBinaryFromReader(_instance, _reader) {
                        while (_reader.nextField()) {
                            if (_reader.isEndGroup())
                                break;
                            switch (_reader.getFieldNumber()) {
                                case 1:
                                    _instance.uri = _reader.readString();
                                    break;
                                default:
                                    _reader.skipField();
                            }
                        }
                        OpenUriAction.refineValues(_instance);
                    }
                    /**
                     * Serializes a message to binary format using provided binary reader
                     * @param _instance message instance
                     * @param _writer binary writer instance
                     */
                    static serializeBinaryToWriter(_instance, _writer) {
                        if (_instance.uri) {
                            _writer.writeString(1, _instance.uri);
                        }
                    }
                    get uri() {
                        return this._uri;
                    }
                    set uri(value) {
                        this._uri = value;
                    }
                    /**
                     * Serialize message to binary data
                     * @param instance message instance
                     */
                    serializeBinary() {
                        const writer = new BinaryWriter();
                        OpenUriAction.serializeBinaryToWriter(this, writer);
                        return writer.getResultBuffer();
                    }
                    /**
                     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                     */
                    toObject() {
                        return {
                            uri: this.uri
                        };
                    }
                    /**
                     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                     */
                    toJSON() {
                        return this.toObject();
                    }
                    /**
                     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                     */
                    toProtobufJSON(
                    // @ts-ignore
                    options) {
                        return {
                            uri: this.uri
                        };
                    }
                }
                OpenUriAction.id = 'ondewo.nlu.OpenUriAction';
                Button.OpenUriAction = OpenUriAction;
            })(Button = BasicCard.Button || (BasicCard.Button = {}));
        })(BasicCard = Message.BasicCard || (Message.BasicCard = {}));
        /**
         * Message implementation for ondewo.nlu.Suggestion
         */
        class Suggestion {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Suggestion to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                Suggestion.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Suggestion();
                Suggestion.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Suggestion.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Suggestion.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title
                };
            }
        }
        Suggestion.id = 'ondewo.nlu.Suggestion';
        Message.Suggestion = Suggestion;
        /**
         * Message implementation for ondewo.nlu.Suggestions
         */
        class Suggestions {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Suggestions to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.suggestions = (_value.suggestions || []).map(m => new Intent.Message.Suggestion(m));
                Suggestions.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Suggestions();
                Suggestions.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.suggestions = _instance.suggestions || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            const messageInitializer1 = new Intent.Message.Suggestion();
                            _reader.readMessage(messageInitializer1, Intent.Message.Suggestion.deserializeBinaryFromReader);
                            (_instance.suggestions = _instance.suggestions || []).push(messageInitializer1);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Suggestions.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.suggestions && _instance.suggestions.length) {
                    _writer.writeRepeatedMessage(1, _instance.suggestions, Intent.Message.Suggestion.serializeBinaryToWriter);
                }
            }
            get suggestions() {
                return this._suggestions;
            }
            set suggestions(value) {
                this._suggestions = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Suggestions.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    suggestions: (this.suggestions || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    suggestions: (this.suggestions || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        Suggestions.id = 'ondewo.nlu.Suggestions';
        Message.Suggestions = Suggestions;
        /**
         * Message implementation for ondewo.nlu.LinkOutSuggestion
         */
        class LinkOutSuggestion {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of LinkOutSuggestion to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.destinationName = _value.destinationName;
                this.uri = _value.uri;
                LinkOutSuggestion.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new LinkOutSuggestion();
                LinkOutSuggestion.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.destinationName = _instance.destinationName || '';
                _instance.uri = _instance.uri || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.destinationName = _reader.readString();
                            break;
                        case 2:
                            _instance.uri = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                LinkOutSuggestion.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.destinationName) {
                    _writer.writeString(1, _instance.destinationName);
                }
                if (_instance.uri) {
                    _writer.writeString(2, _instance.uri);
                }
            }
            get destinationName() {
                return this._destinationName;
            }
            set destinationName(value) {
                this._destinationName = value;
            }
            get uri() {
                return this._uri;
            }
            set uri(value) {
                this._uri = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                LinkOutSuggestion.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    destinationName: this.destinationName,
                    uri: this.uri
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    destinationName: this.destinationName,
                    uri: this.uri
                };
            }
        }
        LinkOutSuggestion.id = 'ondewo.nlu.LinkOutSuggestion';
        Message.LinkOutSuggestion = LinkOutSuggestion;
        /**
         * Message implementation for ondewo.nlu.ListSelect
         */
        class ListSelect {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of ListSelect to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.items = (_value.items || []).map(m => new Intent.Message.ListSelect.Item(m));
                ListSelect.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new ListSelect();
                ListSelect.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.items = _instance.items || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            const messageInitializer2 = new Intent.Message.ListSelect.Item();
                            _reader.readMessage(messageInitializer2, Intent.Message.ListSelect.Item.deserializeBinaryFromReader);
                            (_instance.items = _instance.items || []).push(messageInitializer2);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                ListSelect.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.items && _instance.items.length) {
                    _writer.writeRepeatedMessage(2, _instance.items, Intent.Message.ListSelect.Item.serializeBinaryToWriter);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get items() {
                return this._items;
            }
            set items(value) {
                this._items = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                ListSelect.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    items: (this.items || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    items: (this.items || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        ListSelect.id = 'ondewo.nlu.ListSelect';
        Message.ListSelect = ListSelect;
        (function (ListSelect) {
            /**
             * Message implementation for ondewo.nlu.Item
             */
            class Item {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Item to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.info = _value.info
                        ? new Intent.Message.SelectItemInfo(_value.info)
                        : undefined;
                    this.title = _value.title;
                    this.description = _value.description;
                    this.image = _value.image
                        ? new Intent.Message.Image(_value.image)
                        : undefined;
                    Item.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Item();
                    Item.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.info = _instance.info || undefined;
                    _instance.title = _instance.title || '';
                    _instance.description = _instance.description || '';
                    _instance.image = _instance.image || undefined;
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.info = new Intent.Message.SelectItemInfo();
                                _reader.readMessage(_instance.info, Intent.Message.SelectItemInfo.deserializeBinaryFromReader);
                                break;
                            case 2:
                                _instance.title = _reader.readString();
                                break;
                            case 3:
                                _instance.description = _reader.readString();
                                break;
                            case 4:
                                _instance.image = new Intent.Message.Image();
                                _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Item.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.info) {
                        _writer.writeMessage(1, _instance.info, Intent.Message.SelectItemInfo.serializeBinaryToWriter);
                    }
                    if (_instance.title) {
                        _writer.writeString(2, _instance.title);
                    }
                    if (_instance.description) {
                        _writer.writeString(3, _instance.description);
                    }
                    if (_instance.image) {
                        _writer.writeMessage(4, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
                    }
                }
                get info() {
                    return this._info;
                }
                set info(value) {
                    this._info = value;
                }
                get title() {
                    return this._title;
                }
                set title(value) {
                    this._title = value;
                }
                get description() {
                    return this._description;
                }
                set description(value) {
                    this._description = value;
                }
                get image() {
                    return this._image;
                }
                set image(value) {
                    this._image = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Item.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        info: this.info ? this.info.toObject() : undefined,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toObject() : undefined
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        info: this.info ? this.info.toProtobufJSON(options) : null,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toProtobufJSON(options) : null
                    };
                }
            }
            Item.id = 'ondewo.nlu.Item';
            ListSelect.Item = Item;
        })(ListSelect = Message.ListSelect || (Message.ListSelect = {}));
        /**
         * Message implementation for ondewo.nlu.CarouselSelect
         */
        class CarouselSelect {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of CarouselSelect to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.items = (_value.items || []).map(m => new Intent.Message.CarouselSelect.Item(m));
                CarouselSelect.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new CarouselSelect();
                CarouselSelect.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.items = _instance.items || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            const messageInitializer1 = new Intent.Message.CarouselSelect.Item();
                            _reader.readMessage(messageInitializer1, Intent.Message.CarouselSelect.Item.deserializeBinaryFromReader);
                            (_instance.items = _instance.items || []).push(messageInitializer1);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                CarouselSelect.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.items && _instance.items.length) {
                    _writer.writeRepeatedMessage(1, _instance.items, Intent.Message.CarouselSelect.Item.serializeBinaryToWriter);
                }
            }
            get items() {
                return this._items;
            }
            set items(value) {
                this._items = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                CarouselSelect.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    items: (this.items || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    items: (this.items || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        CarouselSelect.id = 'ondewo.nlu.CarouselSelect';
        Message.CarouselSelect = CarouselSelect;
        (function (CarouselSelect) {
            /**
             * Message implementation for ondewo.nlu.Item
             */
            class Item {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Item to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.info = _value.info
                        ? new Intent.Message.SelectItemInfo(_value.info)
                        : undefined;
                    this.title = _value.title;
                    this.description = _value.description;
                    this.image = _value.image
                        ? new Intent.Message.Image(_value.image)
                        : undefined;
                    Item.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Item();
                    Item.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.info = _instance.info || undefined;
                    _instance.title = _instance.title || '';
                    _instance.description = _instance.description || '';
                    _instance.image = _instance.image || undefined;
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.info = new Intent.Message.SelectItemInfo();
                                _reader.readMessage(_instance.info, Intent.Message.SelectItemInfo.deserializeBinaryFromReader);
                                break;
                            case 2:
                                _instance.title = _reader.readString();
                                break;
                            case 3:
                                _instance.description = _reader.readString();
                                break;
                            case 4:
                                _instance.image = new Intent.Message.Image();
                                _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Item.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.info) {
                        _writer.writeMessage(1, _instance.info, Intent.Message.SelectItemInfo.serializeBinaryToWriter);
                    }
                    if (_instance.title) {
                        _writer.writeString(2, _instance.title);
                    }
                    if (_instance.description) {
                        _writer.writeString(3, _instance.description);
                    }
                    if (_instance.image) {
                        _writer.writeMessage(4, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
                    }
                }
                get info() {
                    return this._info;
                }
                set info(value) {
                    this._info = value;
                }
                get title() {
                    return this._title;
                }
                set title(value) {
                    this._title = value;
                }
                get description() {
                    return this._description;
                }
                set description(value) {
                    this._description = value;
                }
                get image() {
                    return this._image;
                }
                set image(value) {
                    this._image = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Item.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        info: this.info ? this.info.toObject() : undefined,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toObject() : undefined
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        info: this.info ? this.info.toProtobufJSON(options) : null,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toProtobufJSON(options) : null
                    };
                }
            }
            Item.id = 'ondewo.nlu.Item';
            CarouselSelect.Item = Item;
        })(CarouselSelect = Message.CarouselSelect || (Message.CarouselSelect = {}));
        /**
         * Message implementation for ondewo.nlu.HTMLText
         */
        class HTMLText {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of HTMLText to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.text = (_value.text || []).slice();
                HTMLText.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new HTMLText();
                HTMLText.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.text = _instance.text || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            (_instance.text = _instance.text || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                HTMLText.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.text && _instance.text.length) {
                    _writer.writeRepeatedString(1, _instance.text);
                }
            }
            get text() {
                return this._text;
            }
            set text(value) {
                this._text = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                HTMLText.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    text: (this.text || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    text: (this.text || []).slice()
                };
            }
        }
        HTMLText.id = 'ondewo.nlu.HTMLText';
        Message.HTMLText = HTMLText;
        /**
         * Message implementation for ondewo.nlu.Video
         */
        class Video {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Video to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.uri = _value.uri;
                this.accessibilityText = _value.accessibilityText;
                Video.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Video();
                Video.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.uri = _instance.uri || '';
                _instance.accessibilityText = _instance.accessibilityText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.uri = _reader.readString();
                            break;
                        case 2:
                            _instance.accessibilityText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Video.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.uri) {
                    _writer.writeString(1, _instance.uri);
                }
                if (_instance.accessibilityText) {
                    _writer.writeString(2, _instance.accessibilityText);
                }
            }
            get uri() {
                return this._uri;
            }
            set uri(value) {
                this._uri = value;
            }
            get accessibilityText() {
                return this._accessibilityText;
            }
            set accessibilityText(value) {
                this._accessibilityText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Video.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
        }
        Video.id = 'ondewo.nlu.Video';
        Message.Video = Video;
        /**
         * Message implementation for ondewo.nlu.Audio
         */
        class Audio {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Audio to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.uri = _value.uri;
                this.accessibilityText = _value.accessibilityText;
                Audio.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Audio();
                Audio.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.uri = _instance.uri || '';
                _instance.accessibilityText = _instance.accessibilityText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.uri = _reader.readString();
                            break;
                        case 2:
                            _instance.accessibilityText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Audio.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.uri) {
                    _writer.writeString(1, _instance.uri);
                }
                if (_instance.accessibilityText) {
                    _writer.writeString(2, _instance.accessibilityText);
                }
            }
            get uri() {
                return this._uri;
            }
            set uri(value) {
                this._uri = value;
            }
            get accessibilityText() {
                return this._accessibilityText;
            }
            set accessibilityText(value) {
                this._accessibilityText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Audio.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
        }
        Audio.id = 'ondewo.nlu.Audio';
        Message.Audio = Audio;
        /**
         * Message implementation for ondewo.nlu.SelectItemInfo
         */
        class SelectItemInfo {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of SelectItemInfo to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.key = _value.key;
                this.synonyms = (_value.synonyms || []).slice();
                SelectItemInfo.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new SelectItemInfo();
                SelectItemInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.key = _instance.key || '';
                _instance.synonyms = _instance.synonyms || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.key = _reader.readString();
                            break;
                        case 2:
                            (_instance.synonyms = _instance.synonyms || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                SelectItemInfo.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.key) {
                    _writer.writeString(1, _instance.key);
                }
                if (_instance.synonyms && _instance.synonyms.length) {
                    _writer.writeRepeatedString(2, _instance.synonyms);
                }
            }
            get key() {
                return this._key;
            }
            set key(value) {
                this._key = value;
            }
            get synonyms() {
                return this._synonyms;
            }
            set synonyms(value) {
                this._synonyms = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                SelectItemInfo.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    key: this.key,
                    synonyms: (this.synonyms || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    key: this.key,
                    synonyms: (this.synonyms || []).slice()
                };
            }
        }
        SelectItemInfo.id = 'ondewo.nlu.SelectItemInfo';
        Message.SelectItemInfo = SelectItemInfo;
    })(Message = Intent.Message || (Intent.Message = {}));
    /**
     * Message implementation for ondewo.nlu.FollowupIntentInfo
     */
    class FollowupIntentInfo {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of FollowupIntentInfo to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.followupIntentName = _value.followupIntentName;
            this.parentFollowupIntentName = _value.parentFollowupIntentName;
            FollowupIntentInfo.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new FollowupIntentInfo();
            FollowupIntentInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.followupIntentName = _instance.followupIntentName || '';
            _instance.parentFollowupIntentName =
                _instance.parentFollowupIntentName || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.followupIntentName = _reader.readString();
                        break;
                    case 2:
                        _instance.parentFollowupIntentName = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            FollowupIntentInfo.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.followupIntentName) {
                _writer.writeString(1, _instance.followupIntentName);
            }
            if (_instance.parentFollowupIntentName) {
                _writer.writeString(2, _instance.parentFollowupIntentName);
            }
        }
        get followupIntentName() {
            return this._followupIntentName;
        }
        set followupIntentName(value) {
            this._followupIntentName = value;
        }
        get parentFollowupIntentName() {
            return this._parentFollowupIntentName;
        }
        set parentFollowupIntentName(value) {
            this._parentFollowupIntentName = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            FollowupIntentInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                followupIntentName: this.followupIntentName,
                parentFollowupIntentName: this.parentFollowupIntentName
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                followupIntentName: this.followupIntentName,
                parentFollowupIntentName: this.parentFollowupIntentName
            };
        }
    }
    FollowupIntentInfo.id = 'ondewo.nlu.FollowupIntentInfo';
    Intent.FollowupIntentInfo = FollowupIntentInfo;
})(Intent || (Intent = {}));
/**
 * Message implementation for ondewo.nlu.ListIntentsRequest
 */
class ListIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListIntentsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCode = _value.languageCode;
        this.intentView = _value.intentView;
        this.pageToken = _value.pageToken;
        this.filterByCategory = _value.filterByCategory;
        this.sortByField = _value.sortByField
            ? new IntentSorting(_value.sortByField)
            : undefined;
        this.filterByTags = (_value.filterByTags || []).slice();
        ListIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListIntentsRequest();
        ListIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.intentView = _instance.intentView || 0;
        _instance.pageToken = _instance.pageToken || '';
        _instance.filterByCategory = _instance.filterByCategory || 0;
        _instance.sortByField = _instance.sortByField || undefined;
        _instance.filterByTags = _instance.filterByTags || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.intentView = _reader.readEnum();
                    break;
                case 5:
                    _instance.pageToken = _reader.readString();
                    break;
                case 6:
                    _instance.filterByCategory = _reader.readEnum();
                    break;
                case 7:
                    _instance.sortByField = new IntentSorting();
                    _reader.readMessage(_instance.sortByField, IntentSorting.deserializeBinaryFromReader);
                    break;
                case 8:
                    (_instance.filterByTags = _instance.filterByTags || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.intentView) {
            _writer.writeEnum(3, _instance.intentView);
        }
        if (_instance.pageToken) {
            _writer.writeString(5, _instance.pageToken);
        }
        if (_instance.filterByCategory) {
            _writer.writeEnum(6, _instance.filterByCategory);
        }
        if (_instance.sortByField) {
            _writer.writeMessage(7, _instance.sortByField, IntentSorting.serializeBinaryToWriter);
        }
        if (_instance.filterByTags && _instance.filterByTags.length) {
            _writer.writeRepeatedString(8, _instance.filterByTags);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    get sortByField() {
        return this._sortByField;
    }
    set sortByField(value) {
        this._sortByField = value;
    }
    get filterByTags() {
        return this._filterByTags;
    }
    set filterByTags(value) {
        this._filterByTags = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            intentView: this.intentView,
            pageToken: this.pageToken,
            filterByCategory: this.filterByCategory,
            sortByField: this.sortByField ? this.sortByField.toObject() : undefined,
            filterByTags: (this.filterByTags || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            intentView: IntentView[this.intentView === null || this.intentView === undefined
                ? 0
                : this.intentView],
            pageToken: this.pageToken,
            filterByCategory: IntentCategory[this.filterByCategory === null || this.filterByCategory === undefined
                ? 0
                : this.filterByCategory],
            sortByField: this.sortByField
                ? this.sortByField.toProtobufJSON(options)
                : null,
            filterByTags: (this.filterByTags || []).slice()
        };
    }
}
ListIntentsRequest.id = 'ondewo.nlu.ListIntentsRequest';
/**
 * Message implementation for ondewo.nlu.ListIntentsResponse
 */
class ListIntentsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListIntentsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intents = (_value.intents || []).map(m => new Intent(m));
        this.nextPageToken = _value.nextPageToken;
        ListIntentsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListIntentsResponse();
        ListIntentsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intents = _instance.intents || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent();
                    _reader.readMessage(messageInitializer1, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListIntentsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(1, _instance.intents, Intent.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListIntentsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intents: (this.intents || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intents: (this.intents || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListIntentsResponse.id = 'ondewo.nlu.ListIntentsResponse';
/**
 * Message implementation for ondewo.nlu.GetIntentRequest
 */
class GetIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.languageCode = _value.languageCode;
        this.intentView = _value.intentView;
        this.pageToken = _value.pageToken;
        GetIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetIntentRequest();
        GetIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.intentView = _instance.intentView || 0;
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.intentView = _reader.readEnum();
                    break;
                case 10:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.intentView) {
            _writer.writeEnum(3, _instance.intentView);
        }
        if (_instance.pageToken) {
            _writer.writeString(10, _instance.pageToken);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            languageCode: this.languageCode,
            intentView: this.intentView,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            languageCode: this.languageCode,
            intentView: IntentView[this.intentView === null || this.intentView === undefined
                ? 0
                : this.intentView],
            pageToken: this.pageToken
        };
    }
}
GetIntentRequest.id = 'ondewo.nlu.GetIntentRequest';
/**
 * Message implementation for ondewo.nlu.CreateIntentRequest
 */
class CreateIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.intent = _value.intent ? new Intent(_value.intent) : undefined;
        this.languageCode = _value.languageCode;
        this.intentView = _value.intentView;
        CreateIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateIntentRequest();
        CreateIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.intent = _instance.intent || undefined;
        _instance.languageCode = _instance.languageCode || '';
        _instance.intentView = _instance.intentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.intent = new Intent();
                    _reader.readMessage(_instance.intent, Intent.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.intentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.intent) {
            _writer.writeMessage(2, _instance.intent, Intent.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.intentView) {
            _writer.writeEnum(4, _instance.intentView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get intent() {
        return this._intent;
    }
    set intent(value) {
        this._intent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            intent: this.intent ? this.intent.toObject() : undefined,
            languageCode: this.languageCode,
            intentView: this.intentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            intent: this.intent ? this.intent.toProtobufJSON(options) : null,
            languageCode: this.languageCode,
            intentView: IntentView[this.intentView === null || this.intentView === undefined
                ? 0
                : this.intentView]
        };
    }
}
CreateIntentRequest.id = 'ondewo.nlu.CreateIntentRequest';
/**
 * Message implementation for ondewo.nlu.UpdateIntentRequest
 */
class UpdateIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intent = _value.intent ? new Intent(_value.intent) : undefined;
        this.languageCode = _value.languageCode;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        this.intentView = _value.intentView;
        UpdateIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateIntentRequest();
        UpdateIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intent = _instance.intent || undefined;
        _instance.languageCode = _instance.languageCode || '';
        _instance.updateMask = _instance.updateMask || undefined;
        _instance.intentView = _instance.intentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intent = new Intent();
                    _reader.readMessage(_instance.intent, Intent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.intentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intent) {
            _writer.writeMessage(1, _instance.intent, Intent.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(3, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
        if (_instance.intentView) {
            _writer.writeEnum(4, _instance.intentView);
        }
    }
    get intent() {
        return this._intent;
    }
    set intent(value) {
        this._intent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intent: this.intent ? this.intent.toObject() : undefined,
            languageCode: this.languageCode,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined,
            intentView: this.intentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intent: this.intent ? this.intent.toProtobufJSON(options) : null,
            languageCode: this.languageCode,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null,
            intentView: IntentView[this.intentView === null || this.intentView === undefined
                ? 0
                : this.intentView]
        };
    }
}
UpdateIntentRequest.id = 'ondewo.nlu.UpdateIntentRequest';
/**
 * Message implementation for ondewo.nlu.DeleteIntentRequest
 */
class DeleteIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        DeleteIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteIntentRequest();
        DeleteIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
DeleteIntentRequest.id = 'ondewo.nlu.DeleteIntentRequest';
/**
 * Message implementation for ondewo.nlu.BatchUpdateIntentsRequest
 */
class BatchUpdateIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateIntentsRequest to deeply clone from
     */
    constructor(_value) {
        this._intentBatch = BatchUpdateIntentsRequest.IntentBatchCase.none;
        _value = _value || {};
        this.parent = _value.parent;
        this.intentBatchUri = _value.intentBatchUri;
        this.intentBatchInline = _value.intentBatchInline
            ? new IntentBatch(_value.intentBatchInline)
            : undefined;
        this.languageCode = _value.languageCode;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        this.intentView = _value.intentView;
        BatchUpdateIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateIntentsRequest();
        BatchUpdateIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.updateMask = _instance.updateMask || undefined;
        _instance.intentView = _instance.intentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.intentBatchUri = _reader.readString();
                    break;
                case 3:
                    _instance.intentBatchInline = new IntentBatch();
                    _reader.readMessage(_instance.intentBatchInline, IntentBatch.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.intentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.intentBatchUri || _instance.intentBatchUri === '') {
            _writer.writeString(2, _instance.intentBatchUri);
        }
        if (_instance.intentBatchInline) {
            _writer.writeMessage(3, _instance.intentBatchInline, IntentBatch.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(5, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
        if (_instance.intentView) {
            _writer.writeEnum(6, _instance.intentView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get intentBatchUri() {
        return this._intentBatchUri;
    }
    set intentBatchUri(value) {
        if (value !== undefined && value !== null) {
            this._intentBatchInline = undefined;
            this._intentBatch =
                BatchUpdateIntentsRequest.IntentBatchCase.intentBatchUri;
        }
        this._intentBatchUri = value;
    }
    get intentBatchInline() {
        return this._intentBatchInline;
    }
    set intentBatchInline(value) {
        if (value !== undefined && value !== null) {
            this._intentBatchUri = undefined;
            this._intentBatch =
                BatchUpdateIntentsRequest.IntentBatchCase.intentBatchInline;
        }
        this._intentBatchInline = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    get intentBatch() {
        return this._intentBatch;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            intentBatchUri: this.intentBatchUri,
            intentBatchInline: this.intentBatchInline
                ? this.intentBatchInline.toObject()
                : undefined,
            languageCode: this.languageCode,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined,
            intentView: this.intentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            intentBatchUri: this.intentBatchUri === null || this.intentBatchUri === undefined
                ? null
                : this.intentBatchUri,
            intentBatchInline: this.intentBatchInline
                ? this.intentBatchInline.toProtobufJSON(options)
                : null,
            languageCode: this.languageCode,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null,
            intentView: IntentView[this.intentView === null || this.intentView === undefined
                ? 0
                : this.intentView]
        };
    }
}
BatchUpdateIntentsRequest.id = 'ondewo.nlu.BatchUpdateIntentsRequest';
(function (BatchUpdateIntentsRequest) {
    let IntentBatchCase;
    (function (IntentBatchCase) {
        IntentBatchCase[IntentBatchCase["none"] = 0] = "none";
        IntentBatchCase[IntentBatchCase["intentBatchUri"] = 1] = "intentBatchUri";
        IntentBatchCase[IntentBatchCase["intentBatchInline"] = 2] = "intentBatchInline";
    })(IntentBatchCase = BatchUpdateIntentsRequest.IntentBatchCase || (BatchUpdateIntentsRequest.IntentBatchCase = {}));
})(BatchUpdateIntentsRequest || (BatchUpdateIntentsRequest = {}));
/**
 * Message implementation for ondewo.nlu.BatchUpdateIntentsResponse
 */
class BatchUpdateIntentsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateIntentsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intents = (_value.intents || []).map(m => new Intent(m));
        BatchUpdateIntentsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateIntentsResponse();
        BatchUpdateIntentsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intents = _instance.intents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent();
                    _reader.readMessage(messageInitializer1, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateIntentsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(1, _instance.intents, Intent.serializeBinaryToWriter);
        }
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateIntentsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intents: (this.intents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intents: (this.intents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchUpdateIntentsResponse.id = 'ondewo.nlu.BatchUpdateIntentsResponse';
/**
 * Message implementation for ondewo.nlu.BatchDeleteIntentsRequest
 */
class BatchDeleteIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteIntentsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.intents = (_value.intents || []).map(m => new Intent(m));
        BatchDeleteIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteIntentsRequest();
        BatchDeleteIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.intents = _instance.intents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new Intent();
                    _reader.readMessage(messageInitializer2, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(2, _instance.intents, Intent.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            intents: (this.intents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            intents: (this.intents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchDeleteIntentsRequest.id = 'ondewo.nlu.BatchDeleteIntentsRequest';
/**
 * Message implementation for ondewo.nlu.IntentBatch
 */
class IntentBatch {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IntentBatch to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intents = (_value.intents || []).map(m => new Intent(m));
        IntentBatch.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IntentBatch();
        IntentBatch.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intents = _instance.intents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent();
                    _reader.readMessage(messageInitializer1, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        IntentBatch.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(1, _instance.intents, Intent.serializeBinaryToWriter);
        }
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IntentBatch.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intents: (this.intents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intents: (this.intents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
IntentBatch.id = 'ondewo.nlu.IntentBatch';
/**
 * Message implementation for ondewo.nlu.IntentSorting
 */
class IntentSorting {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IntentSorting to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sortingField = _value.sortingField;
        this.sortingMode = _value.sortingMode;
        IntentSorting.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IntentSorting();
        IntentSorting.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sortingField = _instance.sortingField || 0;
        _instance.sortingMode = _instance.sortingMode || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sortingField = _reader.readEnum();
                    break;
                case 2:
                    _instance.sortingMode = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        IntentSorting.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sortingField) {
            _writer.writeEnum(1, _instance.sortingField);
        }
        if (_instance.sortingMode) {
            _writer.writeEnum(2, _instance.sortingMode);
        }
    }
    get sortingField() {
        return this._sortingField;
    }
    set sortingField(value) {
        this._sortingField = value;
    }
    get sortingMode() {
        return this._sortingMode;
    }
    set sortingMode(value) {
        this._sortingMode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IntentSorting.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sortingField: this.sortingField,
            sortingMode: this.sortingMode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sortingField: IntentSorting.IntentSortingField[this.sortingField === null || this.sortingField === undefined
                ? 0
                : this.sortingField],
            sortingMode: SortingMode[this.sortingMode === null || this.sortingMode === undefined
                ? 0
                : this.sortingMode]
        };
    }
}
IntentSorting.id = 'ondewo.nlu.IntentSorting';
(function (IntentSorting) {
    let IntentSortingField;
    (function (IntentSortingField) {
        IntentSortingField[IntentSortingField["NO_INTENT_SORTING"] = 0] = "NO_INTENT_SORTING";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_NAME"] = 1] = "SORT_INTENT_BY_NAME";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_CREATION_DATE"] = 2] = "SORT_INTENT_BY_CREATION_DATE";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_LAST_UPDATED"] = 3] = "SORT_INTENT_BY_LAST_UPDATED";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_USERSAYS_COUNT"] = 4] = "SORT_INTENT_BY_USERSAYS_COUNT";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_START_DATE"] = 5] = "SORT_INTENT_BY_START_DATE";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_END_DATE"] = 6] = "SORT_INTENT_BY_END_DATE";
    })(IntentSortingField = IntentSorting.IntentSortingField || (IntentSorting.IntentSortingField = {}));
})(IntentSorting || (IntentSorting = {}));
/**
 * Message implementation for ondewo.nlu.IntentTagRequest
 */
class IntentTagRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IntentTagRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intentName = _value.intentName;
        this.tags = (_value.tags || []).slice();
        IntentTagRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IntentTagRequest();
        IntentTagRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intentName = _instance.intentName || '';
        _instance.tags = _instance.tags || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intentName = _reader.readString();
                    break;
                case 2:
                    (_instance.tags = _instance.tags || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        IntentTagRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intentName) {
            _writer.writeString(1, _instance.intentName);
        }
        if (_instance.tags && _instance.tags.length) {
            _writer.writeRepeatedString(2, _instance.tags);
        }
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    get tags() {
        return this._tags;
    }
    set tags(value) {
        this._tags = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IntentTagRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intentName: this.intentName,
            tags: (this.tags || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intentName: this.intentName,
            tags: (this.tags || []).slice()
        };
    }
}
IntentTagRequest.id = 'ondewo.nlu.IntentTagRequest';
/**
 * Message implementation for ondewo.nlu.BatchUpdateTrainingPhrasesRequest
 */
class BatchUpdateTrainingPhrasesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateTrainingPhrasesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.trainingPhrases = (_value.trainingPhrases || []).map(m => new Intent.TrainingPhrase(m));
        BatchUpdateTrainingPhrasesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateTrainingPhrasesRequest();
        BatchUpdateTrainingPhrasesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.trainingPhrases = _instance.trainingPhrases || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent.TrainingPhrase();
                    _reader.readMessage(messageInitializer1, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    (_instance.trainingPhrases = _instance.trainingPhrases || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateTrainingPhrasesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.trainingPhrases && _instance.trainingPhrases.length) {
            _writer.writeRepeatedMessage(1, _instance.trainingPhrases, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
    }
    get trainingPhrases() {
        return this._trainingPhrases;
    }
    set trainingPhrases(value) {
        this._trainingPhrases = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateTrainingPhrasesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchUpdateTrainingPhrasesRequest.id = 'ondewo.nlu.BatchUpdateTrainingPhrasesRequest';
/**
 * Message implementation for ondewo.nlu.TrainingPhraseStatus
 */
class TrainingPhraseStatus {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TrainingPhraseStatus to deeply clone from
     */
    constructor(_value) {
        this._phraseOrStatus = TrainingPhraseStatus.PhraseOrStatusCase.none;
        _value = _value || {};
        this.trainingPhrase = _value.trainingPhrase
            ? new Intent.TrainingPhrase(_value.trainingPhrase)
            : undefined;
        this.errorMessage = _value.errorMessage;
        TrainingPhraseStatus.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TrainingPhraseStatus();
        TrainingPhraseStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.trainingPhrase = new Intent.TrainingPhrase();
                    _reader.readMessage(_instance.trainingPhrase, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.errorMessage = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        TrainingPhraseStatus.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.trainingPhrase) {
            _writer.writeMessage(1, _instance.trainingPhrase, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
        if (_instance.errorMessage || _instance.errorMessage === '') {
            _writer.writeString(2, _instance.errorMessage);
        }
    }
    get trainingPhrase() {
        return this._trainingPhrase;
    }
    set trainingPhrase(value) {
        if (value !== undefined && value !== null) {
            this._errorMessage = undefined;
            this._phraseOrStatus =
                TrainingPhraseStatus.PhraseOrStatusCase.trainingPhrase;
        }
        this._trainingPhrase = value;
    }
    get errorMessage() {
        return this._errorMessage;
    }
    set errorMessage(value) {
        if (value !== undefined && value !== null) {
            this._trainingPhrase = undefined;
            this._phraseOrStatus =
                TrainingPhraseStatus.PhraseOrStatusCase.errorMessage;
        }
        this._errorMessage = value;
    }
    get phraseOrStatus() {
        return this._phraseOrStatus;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TrainingPhraseStatus.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            trainingPhrase: this.trainingPhrase
                ? this.trainingPhrase.toObject()
                : undefined,
            errorMessage: this.errorMessage
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            trainingPhrase: this.trainingPhrase
                ? this.trainingPhrase.toProtobufJSON(options)
                : null,
            errorMessage: this.errorMessage === null || this.errorMessage === undefined
                ? null
                : this.errorMessage
        };
    }
}
TrainingPhraseStatus.id = 'ondewo.nlu.TrainingPhraseStatus';
(function (TrainingPhraseStatus) {
    let PhraseOrStatusCase;
    (function (PhraseOrStatusCase) {
        PhraseOrStatusCase[PhraseOrStatusCase["none"] = 0] = "none";
        PhraseOrStatusCase[PhraseOrStatusCase["trainingPhrase"] = 1] = "trainingPhrase";
        PhraseOrStatusCase[PhraseOrStatusCase["errorMessage"] = 2] = "errorMessage";
    })(PhraseOrStatusCase = TrainingPhraseStatus.PhraseOrStatusCase || (TrainingPhraseStatus.PhraseOrStatusCase = {}));
})(TrainingPhraseStatus || (TrainingPhraseStatus = {}));
/**
 * Message implementation for ondewo.nlu.BatchTrainingPhrasesStatusResponse
 */
class BatchTrainingPhrasesStatusResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchTrainingPhrasesStatusResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.trainingPhraseStatuses = (_value.trainingPhraseStatuses || []).map(m => new TrainingPhraseStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchTrainingPhrasesStatusResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchTrainingPhrasesStatusResponse();
        BatchTrainingPhrasesStatusResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.trainingPhraseStatuses = _instance.trainingPhraseStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new TrainingPhraseStatus();
                    _reader.readMessage(messageInitializer1, TrainingPhraseStatus.deserializeBinaryFromReader);
                    (_instance.trainingPhraseStatuses =
                        _instance.trainingPhraseStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchTrainingPhrasesStatusResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.trainingPhraseStatuses &&
            _instance.trainingPhraseStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.trainingPhraseStatuses, TrainingPhraseStatus.serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get trainingPhraseStatuses() {
        return this._trainingPhraseStatuses;
    }
    set trainingPhraseStatuses(value) {
        this._trainingPhraseStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchTrainingPhrasesStatusResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            trainingPhraseStatuses: (this.trainingPhraseStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            trainingPhraseStatuses: (this.trainingPhraseStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchTrainingPhrasesStatusResponse.id = 'ondewo.nlu.BatchTrainingPhrasesStatusResponse';
/**
 * Message implementation for ondewo.nlu.BatchCreateTrainingPhrasesRequest
 */
class BatchCreateTrainingPhrasesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchCreateTrainingPhrasesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.trainingPhraseRequests = (_value.trainingPhraseRequests || []).map(m => new BatchCreateTrainingPhrasesRequest.CreateTrainingPhraseRequest(m));
        BatchCreateTrainingPhrasesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchCreateTrainingPhrasesRequest();
        BatchCreateTrainingPhrasesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.trainingPhraseRequests = _instance.trainingPhraseRequests || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchCreateTrainingPhrasesRequest.CreateTrainingPhraseRequest();
                    _reader.readMessage(messageInitializer1, BatchCreateTrainingPhrasesRequest.CreateTrainingPhraseRequest
                        .deserializeBinaryFromReader);
                    (_instance.trainingPhraseRequests =
                        _instance.trainingPhraseRequests || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchCreateTrainingPhrasesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.trainingPhraseRequests &&
            _instance.trainingPhraseRequests.length) {
            _writer.writeRepeatedMessage(1, _instance.trainingPhraseRequests, BatchCreateTrainingPhrasesRequest.CreateTrainingPhraseRequest
                .serializeBinaryToWriter);
        }
    }
    get trainingPhraseRequests() {
        return this._trainingPhraseRequests;
    }
    set trainingPhraseRequests(value) {
        this._trainingPhraseRequests = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchCreateTrainingPhrasesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            trainingPhraseRequests: (this.trainingPhraseRequests || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            trainingPhraseRequests: (this.trainingPhraseRequests || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchCreateTrainingPhrasesRequest.id = 'ondewo.nlu.BatchCreateTrainingPhrasesRequest';
(function (BatchCreateTrainingPhrasesRequest) {
    /**
     * Message implementation for ondewo.nlu.CreateTrainingPhraseRequest
     */
    class CreateTrainingPhraseRequest {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of CreateTrainingPhraseRequest to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.intentName = _value.intentName;
            this.trainingPhrase = _value.trainingPhrase
                ? new Intent.TrainingPhrase(_value.trainingPhrase)
                : undefined;
            CreateTrainingPhraseRequest.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new CreateTrainingPhraseRequest();
            CreateTrainingPhraseRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.intentName = _instance.intentName || '';
            _instance.trainingPhrase = _instance.trainingPhrase || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.intentName = _reader.readString();
                        break;
                    case 2:
                        _instance.trainingPhrase = new Intent.TrainingPhrase();
                        _reader.readMessage(_instance.trainingPhrase, Intent.TrainingPhrase.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            CreateTrainingPhraseRequest.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.intentName) {
                _writer.writeString(1, _instance.intentName);
            }
            if (_instance.trainingPhrase) {
                _writer.writeMessage(2, _instance.trainingPhrase, Intent.TrainingPhrase.serializeBinaryToWriter);
            }
        }
        get intentName() {
            return this._intentName;
        }
        set intentName(value) {
            this._intentName = value;
        }
        get trainingPhrase() {
            return this._trainingPhrase;
        }
        set trainingPhrase(value) {
            this._trainingPhrase = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            CreateTrainingPhraseRequest.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                intentName: this.intentName,
                trainingPhrase: this.trainingPhrase
                    ? this.trainingPhrase.toObject()
                    : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                intentName: this.intentName,
                trainingPhrase: this.trainingPhrase
                    ? this.trainingPhrase.toProtobufJSON(options)
                    : null
            };
        }
    }
    CreateTrainingPhraseRequest.id = 'ondewo.nlu.CreateTrainingPhraseRequest';
    BatchCreateTrainingPhrasesRequest.CreateTrainingPhraseRequest = CreateTrainingPhraseRequest;
})(BatchCreateTrainingPhrasesRequest || (BatchCreateTrainingPhrasesRequest = {}));
/**
 * Message implementation for ondewo.nlu.BatchGetTrainingPhrasesRequest
 */
class BatchGetTrainingPhrasesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchGetTrainingPhrasesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchGetTrainingPhrasesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchGetTrainingPhrasesRequest();
        BatchGetTrainingPhrasesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchGetTrainingPhrasesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchGetTrainingPhrasesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchGetTrainingPhrasesRequest.id = 'ondewo.nlu.BatchGetTrainingPhrasesRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteTrainingPhrasesRequest
 */
class BatchDeleteTrainingPhrasesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteTrainingPhrasesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchDeleteTrainingPhrasesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteTrainingPhrasesRequest();
        BatchDeleteTrainingPhrasesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteTrainingPhrasesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteTrainingPhrasesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchDeleteTrainingPhrasesRequest.id = 'ondewo.nlu.BatchDeleteTrainingPhrasesRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteTrainingPhrasesResponse
 */
class BatchDeleteTrainingPhrasesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteTrainingPhrasesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.deleteStatuses = (_value.deleteStatuses || []).map(m => new BatchDeleteTrainingPhrasesResponse.DeleteTrainingPhraseStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchDeleteTrainingPhrasesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteTrainingPhrasesResponse();
        BatchDeleteTrainingPhrasesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.deleteStatuses = _instance.deleteStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchDeleteTrainingPhrasesResponse.DeleteTrainingPhraseStatus();
                    _reader.readMessage(messageInitializer1, BatchDeleteTrainingPhrasesResponse.DeleteTrainingPhraseStatus
                        .deserializeBinaryFromReader);
                    (_instance.deleteStatuses = _instance.deleteStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteTrainingPhrasesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.deleteStatuses && _instance.deleteStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.deleteStatuses, BatchDeleteTrainingPhrasesResponse.DeleteTrainingPhraseStatus
                .serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get deleteStatuses() {
        return this._deleteStatuses;
    }
    set deleteStatuses(value) {
        this._deleteStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteTrainingPhrasesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchDeleteTrainingPhrasesResponse.id = 'ondewo.nlu.BatchDeleteTrainingPhrasesResponse';
(function (BatchDeleteTrainingPhrasesResponse) {
    /**
     * Message implementation for ondewo.nlu.DeleteTrainingPhraseStatus
     */
    class DeleteTrainingPhraseStatus {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of DeleteTrainingPhraseStatus to deeply clone from
         */
        constructor(_value) {
            this._deleteStatus = DeleteTrainingPhraseStatus.DeleteStatusCase.none;
            _value = _value || {};
            this.successfullyDeleted = _value.successfullyDeleted
                ? new googleProtobuf003.Empty(_value.successfullyDeleted)
                : undefined;
            this.errorMessage = _value.errorMessage;
            DeleteTrainingPhraseStatus.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new DeleteTrainingPhraseStatus();
            DeleteTrainingPhraseStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) { }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.successfullyDeleted = new googleProtobuf003.Empty();
                        _reader.readMessage(_instance.successfullyDeleted, googleProtobuf003.Empty.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.errorMessage = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            DeleteTrainingPhraseStatus.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.successfullyDeleted) {
                _writer.writeMessage(1, _instance.successfullyDeleted, googleProtobuf003.Empty.serializeBinaryToWriter);
            }
            if (_instance.errorMessage || _instance.errorMessage === '') {
                _writer.writeString(2, _instance.errorMessage);
            }
        }
        get successfullyDeleted() {
            return this._successfullyDeleted;
        }
        set successfullyDeleted(value) {
            if (value !== undefined && value !== null) {
                this._errorMessage = undefined;
                this._deleteStatus =
                    DeleteTrainingPhraseStatus.DeleteStatusCase.successfullyDeleted;
            }
            this._successfullyDeleted = value;
        }
        get errorMessage() {
            return this._errorMessage;
        }
        set errorMessage(value) {
            if (value !== undefined && value !== null) {
                this._successfullyDeleted = undefined;
                this._deleteStatus =
                    DeleteTrainingPhraseStatus.DeleteStatusCase.errorMessage;
            }
            this._errorMessage = value;
        }
        get deleteStatus() {
            return this._deleteStatus;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            DeleteTrainingPhraseStatus.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toObject()
                    : undefined,
                errorMessage: this.errorMessage
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toProtobufJSON(options)
                    : null,
                errorMessage: this.errorMessage === null || this.errorMessage === undefined
                    ? null
                    : this.errorMessage
            };
        }
    }
    DeleteTrainingPhraseStatus.id = 'ondewo.nlu.DeleteTrainingPhraseStatus';
    BatchDeleteTrainingPhrasesResponse.DeleteTrainingPhraseStatus = DeleteTrainingPhraseStatus;
    (function (DeleteTrainingPhraseStatus) {
        let DeleteStatusCase;
        (function (DeleteStatusCase) {
            DeleteStatusCase[DeleteStatusCase["none"] = 0] = "none";
            DeleteStatusCase[DeleteStatusCase["successfullyDeleted"] = 1] = "successfullyDeleted";
            DeleteStatusCase[DeleteStatusCase["errorMessage"] = 2] = "errorMessage";
        })(DeleteStatusCase = DeleteTrainingPhraseStatus.DeleteStatusCase || (DeleteTrainingPhraseStatus.DeleteStatusCase = {}));
    })(DeleteTrainingPhraseStatus = BatchDeleteTrainingPhrasesResponse.DeleteTrainingPhraseStatus || (BatchDeleteTrainingPhrasesResponse.DeleteTrainingPhraseStatus = {}));
})(BatchDeleteTrainingPhrasesResponse || (BatchDeleteTrainingPhrasesResponse = {}));
/**
 * Message implementation for ondewo.nlu.ListTrainingPhrasesRequest
 */
class ListTrainingPhrasesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListTrainingPhrasesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intentName = _value.intentName;
        this.languageCode = _value.languageCode;
        this.pageToken = _value.pageToken;
        ListTrainingPhrasesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListTrainingPhrasesRequest();
        ListTrainingPhrasesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intentName = _instance.intentName || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intentName = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListTrainingPhrasesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intentName) {
            _writer.writeString(1, _instance.intentName);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.pageToken) {
            _writer.writeString(3, _instance.pageToken);
        }
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListTrainingPhrasesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intentName: this.intentName,
            languageCode: this.languageCode,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intentName: this.intentName,
            languageCode: this.languageCode,
            pageToken: this.pageToken
        };
    }
}
ListTrainingPhrasesRequest.id = 'ondewo.nlu.ListTrainingPhrasesRequest';
/**
 * Message implementation for ondewo.nlu.ListTrainingPhrasesResponse
 */
class ListTrainingPhrasesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListTrainingPhrasesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.trainingPhrases = (_value.trainingPhrases || []).map(m => new Intent.TrainingPhrase(m));
        this.nextPageToken = _value.nextPageToken;
        ListTrainingPhrasesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListTrainingPhrasesResponse();
        ListTrainingPhrasesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.trainingPhrases = _instance.trainingPhrases || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent.TrainingPhrase();
                    _reader.readMessage(messageInitializer1, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    (_instance.trainingPhrases = _instance.trainingPhrases || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListTrainingPhrasesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.trainingPhrases && _instance.trainingPhrases.length) {
            _writer.writeRepeatedMessage(1, _instance.trainingPhrases, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get trainingPhrases() {
        return this._trainingPhrases;
    }
    set trainingPhrases(value) {
        this._trainingPhrases = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListTrainingPhrasesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListTrainingPhrasesResponse.id = 'ondewo.nlu.ListTrainingPhrasesResponse';
/**
 * Message implementation for ondewo.nlu.BatchResponseMessagesStatusResponse
 */
class BatchResponseMessagesStatusResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchResponseMessagesStatusResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.responseMessageStatuses = (_value.responseMessageStatuses || []).map(m => new BatchResponseMessagesStatusResponse.ResponseMessageStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchResponseMessagesStatusResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchResponseMessagesStatusResponse();
        BatchResponseMessagesStatusResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.responseMessageStatuses = _instance.responseMessageStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchResponseMessagesStatusResponse.ResponseMessageStatus();
                    _reader.readMessage(messageInitializer1, BatchResponseMessagesStatusResponse.ResponseMessageStatus
                        .deserializeBinaryFromReader);
                    (_instance.responseMessageStatuses =
                        _instance.responseMessageStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchResponseMessagesStatusResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.responseMessageStatuses &&
            _instance.responseMessageStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.responseMessageStatuses, BatchResponseMessagesStatusResponse.ResponseMessageStatus
                .serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get responseMessageStatuses() {
        return this._responseMessageStatuses;
    }
    set responseMessageStatuses(value) {
        this._responseMessageStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchResponseMessagesStatusResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            responseMessageStatuses: (this.responseMessageStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            responseMessageStatuses: (this.responseMessageStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchResponseMessagesStatusResponse.id = 'ondewo.nlu.BatchResponseMessagesStatusResponse';
(function (BatchResponseMessagesStatusResponse) {
    /**
     * Message implementation for ondewo.nlu.ResponseMessageStatus
     */
    class ResponseMessageStatus {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ResponseMessageStatus to deeply clone from
         */
        constructor(_value) {
            this._phraseOrStatus = ResponseMessageStatus.PhraseOrStatusCase.none;
            _value = _value || {};
            this.responseMessage = _value.responseMessage
                ? new Intent.Message(_value.responseMessage)
                : undefined;
            this.errorMessage = _value.errorMessage;
            ResponseMessageStatus.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ResponseMessageStatus();
            ResponseMessageStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) { }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.responseMessage = new Intent.Message();
                        _reader.readMessage(_instance.responseMessage, Intent.Message.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.errorMessage = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ResponseMessageStatus.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.responseMessage) {
                _writer.writeMessage(1, _instance.responseMessage, Intent.Message.serializeBinaryToWriter);
            }
            if (_instance.errorMessage || _instance.errorMessage === '') {
                _writer.writeString(2, _instance.errorMessage);
            }
        }
        get responseMessage() {
            return this._responseMessage;
        }
        set responseMessage(value) {
            if (value !== undefined && value !== null) {
                this._errorMessage = undefined;
                this._phraseOrStatus =
                    ResponseMessageStatus.PhraseOrStatusCase.responseMessage;
            }
            this._responseMessage = value;
        }
        get errorMessage() {
            return this._errorMessage;
        }
        set errorMessage(value) {
            if (value !== undefined && value !== null) {
                this._responseMessage = undefined;
                this._phraseOrStatus =
                    ResponseMessageStatus.PhraseOrStatusCase.errorMessage;
            }
            this._errorMessage = value;
        }
        get phraseOrStatus() {
            return this._phraseOrStatus;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ResponseMessageStatus.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                responseMessage: this.responseMessage
                    ? this.responseMessage.toObject()
                    : undefined,
                errorMessage: this.errorMessage
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                responseMessage: this.responseMessage
                    ? this.responseMessage.toProtobufJSON(options)
                    : null,
                errorMessage: this.errorMessage === null || this.errorMessage === undefined
                    ? null
                    : this.errorMessage
            };
        }
    }
    ResponseMessageStatus.id = 'ondewo.nlu.ResponseMessageStatus';
    BatchResponseMessagesStatusResponse.ResponseMessageStatus = ResponseMessageStatus;
    (function (ResponseMessageStatus) {
        let PhraseOrStatusCase;
        (function (PhraseOrStatusCase) {
            PhraseOrStatusCase[PhraseOrStatusCase["none"] = 0] = "none";
            PhraseOrStatusCase[PhraseOrStatusCase["responseMessage"] = 1] = "responseMessage";
            PhraseOrStatusCase[PhraseOrStatusCase["errorMessage"] = 2] = "errorMessage";
        })(PhraseOrStatusCase = ResponseMessageStatus.PhraseOrStatusCase || (ResponseMessageStatus.PhraseOrStatusCase = {}));
    })(ResponseMessageStatus = BatchResponseMessagesStatusResponse.ResponseMessageStatus || (BatchResponseMessagesStatusResponse.ResponseMessageStatus = {}));
})(BatchResponseMessagesStatusResponse || (BatchResponseMessagesStatusResponse = {}));
/**
 * Message implementation for ondewo.nlu.BatchCreateResponseMessagesRequest
 */
class BatchCreateResponseMessagesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchCreateResponseMessagesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.responseMessageRequests = (_value.responseMessageRequests || []).map(m => new BatchCreateResponseMessagesRequest.CreateResponseMessageRequest(m));
        BatchCreateResponseMessagesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchCreateResponseMessagesRequest();
        BatchCreateResponseMessagesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.responseMessageRequests = _instance.responseMessageRequests || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchCreateResponseMessagesRequest.CreateResponseMessageRequest();
                    _reader.readMessage(messageInitializer1, BatchCreateResponseMessagesRequest.CreateResponseMessageRequest
                        .deserializeBinaryFromReader);
                    (_instance.responseMessageRequests =
                        _instance.responseMessageRequests || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchCreateResponseMessagesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.responseMessageRequests &&
            _instance.responseMessageRequests.length) {
            _writer.writeRepeatedMessage(1, _instance.responseMessageRequests, BatchCreateResponseMessagesRequest.CreateResponseMessageRequest
                .serializeBinaryToWriter);
        }
    }
    get responseMessageRequests() {
        return this._responseMessageRequests;
    }
    set responseMessageRequests(value) {
        this._responseMessageRequests = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchCreateResponseMessagesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            responseMessageRequests: (this.responseMessageRequests || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            responseMessageRequests: (this.responseMessageRequests || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchCreateResponseMessagesRequest.id = 'ondewo.nlu.BatchCreateResponseMessagesRequest';
(function (BatchCreateResponseMessagesRequest) {
    /**
     * Message implementation for ondewo.nlu.CreateResponseMessageRequest
     */
    class CreateResponseMessageRequest {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of CreateResponseMessageRequest to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.intentName = _value.intentName;
            this.responseMessage = _value.responseMessage
                ? new Intent.Message(_value.responseMessage)
                : undefined;
            CreateResponseMessageRequest.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new CreateResponseMessageRequest();
            CreateResponseMessageRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.intentName = _instance.intentName || '';
            _instance.responseMessage = _instance.responseMessage || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.intentName = _reader.readString();
                        break;
                    case 2:
                        _instance.responseMessage = new Intent.Message();
                        _reader.readMessage(_instance.responseMessage, Intent.Message.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            CreateResponseMessageRequest.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.intentName) {
                _writer.writeString(1, _instance.intentName);
            }
            if (_instance.responseMessage) {
                _writer.writeMessage(2, _instance.responseMessage, Intent.Message.serializeBinaryToWriter);
            }
        }
        get intentName() {
            return this._intentName;
        }
        set intentName(value) {
            this._intentName = value;
        }
        get responseMessage() {
            return this._responseMessage;
        }
        set responseMessage(value) {
            this._responseMessage = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            CreateResponseMessageRequest.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                intentName: this.intentName,
                responseMessage: this.responseMessage
                    ? this.responseMessage.toObject()
                    : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                intentName: this.intentName,
                responseMessage: this.responseMessage
                    ? this.responseMessage.toProtobufJSON(options)
                    : null
            };
        }
    }
    CreateResponseMessageRequest.id = 'ondewo.nlu.CreateResponseMessageRequest';
    BatchCreateResponseMessagesRequest.CreateResponseMessageRequest = CreateResponseMessageRequest;
})(BatchCreateResponseMessagesRequest || (BatchCreateResponseMessagesRequest = {}));
/**
 * Message implementation for ondewo.nlu.BatchUpdateResponseMessagesRequest
 */
class BatchUpdateResponseMessagesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateResponseMessagesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.responseMessages = (_value.responseMessages || []).map(m => new Intent.Message(m));
        BatchUpdateResponseMessagesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateResponseMessagesRequest();
        BatchUpdateResponseMessagesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.responseMessages = _instance.responseMessages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent.Message();
                    _reader.readMessage(messageInitializer1, Intent.Message.deserializeBinaryFromReader);
                    (_instance.responseMessages = _instance.responseMessages || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateResponseMessagesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.responseMessages && _instance.responseMessages.length) {
            _writer.writeRepeatedMessage(1, _instance.responseMessages, Intent.Message.serializeBinaryToWriter);
        }
    }
    get responseMessages() {
        return this._responseMessages;
    }
    set responseMessages(value) {
        this._responseMessages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateResponseMessagesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            responseMessages: (this.responseMessages || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            responseMessages: (this.responseMessages || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchUpdateResponseMessagesRequest.id = 'ondewo.nlu.BatchUpdateResponseMessagesRequest';
/**
 * Message implementation for ondewo.nlu.BatchGetResponseMessagesRequest
 */
class BatchGetResponseMessagesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchGetResponseMessagesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchGetResponseMessagesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchGetResponseMessagesRequest();
        BatchGetResponseMessagesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchGetResponseMessagesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchGetResponseMessagesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchGetResponseMessagesRequest.id = 'ondewo.nlu.BatchGetResponseMessagesRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteResponseMessagesRequest
 */
class BatchDeleteResponseMessagesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteResponseMessagesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchDeleteResponseMessagesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteResponseMessagesRequest();
        BatchDeleteResponseMessagesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteResponseMessagesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteResponseMessagesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchDeleteResponseMessagesRequest.id = 'ondewo.nlu.BatchDeleteResponseMessagesRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteResponseMessagesResponse
 */
class BatchDeleteResponseMessagesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteResponseMessagesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.deleteStatuses = (_value.deleteStatuses || []).map(m => new BatchDeleteResponseMessagesResponse.DeleteResponseMessageStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchDeleteResponseMessagesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteResponseMessagesResponse();
        BatchDeleteResponseMessagesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.deleteStatuses = _instance.deleteStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchDeleteResponseMessagesResponse.DeleteResponseMessageStatus();
                    _reader.readMessage(messageInitializer1, BatchDeleteResponseMessagesResponse.DeleteResponseMessageStatus
                        .deserializeBinaryFromReader);
                    (_instance.deleteStatuses = _instance.deleteStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteResponseMessagesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.deleteStatuses && _instance.deleteStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.deleteStatuses, BatchDeleteResponseMessagesResponse.DeleteResponseMessageStatus
                .serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get deleteStatuses() {
        return this._deleteStatuses;
    }
    set deleteStatuses(value) {
        this._deleteStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteResponseMessagesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchDeleteResponseMessagesResponse.id = 'ondewo.nlu.BatchDeleteResponseMessagesResponse';
(function (BatchDeleteResponseMessagesResponse) {
    /**
     * Message implementation for ondewo.nlu.DeleteResponseMessageStatus
     */
    class DeleteResponseMessageStatus {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of DeleteResponseMessageStatus to deeply clone from
         */
        constructor(_value) {
            this._deleteStatus = DeleteResponseMessageStatus.DeleteStatusCase.none;
            _value = _value || {};
            this.successfullyDeleted = _value.successfullyDeleted
                ? new googleProtobuf003.Empty(_value.successfullyDeleted)
                : undefined;
            this.errorMessage = _value.errorMessage;
            DeleteResponseMessageStatus.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new DeleteResponseMessageStatus();
            DeleteResponseMessageStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) { }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.successfullyDeleted = new googleProtobuf003.Empty();
                        _reader.readMessage(_instance.successfullyDeleted, googleProtobuf003.Empty.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.errorMessage = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            DeleteResponseMessageStatus.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.successfullyDeleted) {
                _writer.writeMessage(1, _instance.successfullyDeleted, googleProtobuf003.Empty.serializeBinaryToWriter);
            }
            if (_instance.errorMessage || _instance.errorMessage === '') {
                _writer.writeString(2, _instance.errorMessage);
            }
        }
        get successfullyDeleted() {
            return this._successfullyDeleted;
        }
        set successfullyDeleted(value) {
            if (value !== undefined && value !== null) {
                this._errorMessage = undefined;
                this._deleteStatus =
                    DeleteResponseMessageStatus.DeleteStatusCase.successfullyDeleted;
            }
            this._successfullyDeleted = value;
        }
        get errorMessage() {
            return this._errorMessage;
        }
        set errorMessage(value) {
            if (value !== undefined && value !== null) {
                this._successfullyDeleted = undefined;
                this._deleteStatus =
                    DeleteResponseMessageStatus.DeleteStatusCase.errorMessage;
            }
            this._errorMessage = value;
        }
        get deleteStatus() {
            return this._deleteStatus;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            DeleteResponseMessageStatus.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toObject()
                    : undefined,
                errorMessage: this.errorMessage
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toProtobufJSON(options)
                    : null,
                errorMessage: this.errorMessage === null || this.errorMessage === undefined
                    ? null
                    : this.errorMessage
            };
        }
    }
    DeleteResponseMessageStatus.id = 'ondewo.nlu.DeleteResponseMessageStatus';
    BatchDeleteResponseMessagesResponse.DeleteResponseMessageStatus = DeleteResponseMessageStatus;
    (function (DeleteResponseMessageStatus) {
        let DeleteStatusCase;
        (function (DeleteStatusCase) {
            DeleteStatusCase[DeleteStatusCase["none"] = 0] = "none";
            DeleteStatusCase[DeleteStatusCase["successfullyDeleted"] = 1] = "successfullyDeleted";
            DeleteStatusCase[DeleteStatusCase["errorMessage"] = 2] = "errorMessage";
        })(DeleteStatusCase = DeleteResponseMessageStatus.DeleteStatusCase || (DeleteResponseMessageStatus.DeleteStatusCase = {}));
    })(DeleteResponseMessageStatus = BatchDeleteResponseMessagesResponse.DeleteResponseMessageStatus || (BatchDeleteResponseMessagesResponse.DeleteResponseMessageStatus = {}));
})(BatchDeleteResponseMessagesResponse || (BatchDeleteResponseMessagesResponse = {}));
/**
 * Message implementation for ondewo.nlu.ListResponseMessagesRequest
 */
class ListResponseMessagesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListResponseMessagesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intentName = _value.intentName;
        this.languageCode = _value.languageCode;
        this.pageToken = _value.pageToken;
        ListResponseMessagesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListResponseMessagesRequest();
        ListResponseMessagesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intentName = _instance.intentName || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intentName = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListResponseMessagesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intentName) {
            _writer.writeString(1, _instance.intentName);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.pageToken) {
            _writer.writeString(3, _instance.pageToken);
        }
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListResponseMessagesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intentName: this.intentName,
            languageCode: this.languageCode,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intentName: this.intentName,
            languageCode: this.languageCode,
            pageToken: this.pageToken
        };
    }
}
ListResponseMessagesRequest.id = 'ondewo.nlu.ListResponseMessagesRequest';
/**
 * Message implementation for ondewo.nlu.ListResponseMessagesResponse
 */
class ListResponseMessagesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListResponseMessagesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.responseMessages = (_value.responseMessages || []).map(m => new Intent.Message(m));
        this.nextPageToken = _value.nextPageToken;
        ListResponseMessagesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListResponseMessagesResponse();
        ListResponseMessagesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.responseMessages = _instance.responseMessages || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent.Message();
                    _reader.readMessage(messageInitializer1, Intent.Message.deserializeBinaryFromReader);
                    (_instance.responseMessages = _instance.responseMessages || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListResponseMessagesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.responseMessages && _instance.responseMessages.length) {
            _writer.writeRepeatedMessage(1, _instance.responseMessages, Intent.Message.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get responseMessages() {
        return this._responseMessages;
    }
    set responseMessages(value) {
        this._responseMessages = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListResponseMessagesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            responseMessages: (this.responseMessages || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            responseMessages: (this.responseMessages || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListResponseMessagesResponse.id = 'ondewo.nlu.ListResponseMessagesResponse';
/**
 * Message implementation for ondewo.nlu.BatchParametersStatusResponse
 */
class BatchParametersStatusResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchParametersStatusResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parameterStatuses = (_value.parameterStatuses || []).map(m => new BatchParametersStatusResponse.ParameterStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchParametersStatusResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchParametersStatusResponse();
        BatchParametersStatusResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parameterStatuses = _instance.parameterStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchParametersStatusResponse.ParameterStatus();
                    _reader.readMessage(messageInitializer1, BatchParametersStatusResponse.ParameterStatus
                        .deserializeBinaryFromReader);
                    (_instance.parameterStatuses =
                        _instance.parameterStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchParametersStatusResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parameterStatuses && _instance.parameterStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.parameterStatuses, BatchParametersStatusResponse.ParameterStatus.serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get parameterStatuses() {
        return this._parameterStatuses;
    }
    set parameterStatuses(value) {
        this._parameterStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchParametersStatusResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parameterStatuses: (this.parameterStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parameterStatuses: (this.parameterStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchParametersStatusResponse.id = 'ondewo.nlu.BatchParametersStatusResponse';
(function (BatchParametersStatusResponse) {
    /**
     * Message implementation for ondewo.nlu.ParameterStatus
     */
    class ParameterStatus {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ParameterStatus to deeply clone from
         */
        constructor(_value) {
            this._phraseOrStatus = ParameterStatus.PhraseOrStatusCase.none;
            _value = _value || {};
            this.parameter = _value.parameter
                ? new Intent.Parameter(_value.parameter)
                : undefined;
            this.errorMessage = _value.errorMessage;
            ParameterStatus.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ParameterStatus();
            ParameterStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) { }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.parameter = new Intent.Parameter();
                        _reader.readMessage(_instance.parameter, Intent.Parameter.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.errorMessage = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ParameterStatus.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.parameter) {
                _writer.writeMessage(1, _instance.parameter, Intent.Parameter.serializeBinaryToWriter);
            }
            if (_instance.errorMessage || _instance.errorMessage === '') {
                _writer.writeString(2, _instance.errorMessage);
            }
        }
        get parameter() {
            return this._parameter;
        }
        set parameter(value) {
            if (value !== undefined && value !== null) {
                this._errorMessage = undefined;
                this._phraseOrStatus = ParameterStatus.PhraseOrStatusCase.parameter;
            }
            this._parameter = value;
        }
        get errorMessage() {
            return this._errorMessage;
        }
        set errorMessage(value) {
            if (value !== undefined && value !== null) {
                this._parameter = undefined;
                this._phraseOrStatus = ParameterStatus.PhraseOrStatusCase.errorMessage;
            }
            this._errorMessage = value;
        }
        get phraseOrStatus() {
            return this._phraseOrStatus;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ParameterStatus.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                parameter: this.parameter ? this.parameter.toObject() : undefined,
                errorMessage: this.errorMessage
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                parameter: this.parameter
                    ? this.parameter.toProtobufJSON(options)
                    : null,
                errorMessage: this.errorMessage === null || this.errorMessage === undefined
                    ? null
                    : this.errorMessage
            };
        }
    }
    ParameterStatus.id = 'ondewo.nlu.ParameterStatus';
    BatchParametersStatusResponse.ParameterStatus = ParameterStatus;
    (function (ParameterStatus) {
        let PhraseOrStatusCase;
        (function (PhraseOrStatusCase) {
            PhraseOrStatusCase[PhraseOrStatusCase["none"] = 0] = "none";
            PhraseOrStatusCase[PhraseOrStatusCase["parameter"] = 1] = "parameter";
            PhraseOrStatusCase[PhraseOrStatusCase["errorMessage"] = 2] = "errorMessage";
        })(PhraseOrStatusCase = ParameterStatus.PhraseOrStatusCase || (ParameterStatus.PhraseOrStatusCase = {}));
    })(ParameterStatus = BatchParametersStatusResponse.ParameterStatus || (BatchParametersStatusResponse.ParameterStatus = {}));
})(BatchParametersStatusResponse || (BatchParametersStatusResponse = {}));
/**
 * Message implementation for ondewo.nlu.BatchCreateParametersRequest
 */
class BatchCreateParametersRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchCreateParametersRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parameterRequests = (_value.parameterRequests || []).map(m => new BatchCreateParametersRequest.CreateParameterRequest(m));
        BatchCreateParametersRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchCreateParametersRequest();
        BatchCreateParametersRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parameterRequests = _instance.parameterRequests || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchCreateParametersRequest.CreateParameterRequest();
                    _reader.readMessage(messageInitializer1, BatchCreateParametersRequest.CreateParameterRequest
                        .deserializeBinaryFromReader);
                    (_instance.parameterRequests =
                        _instance.parameterRequests || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchCreateParametersRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parameterRequests && _instance.parameterRequests.length) {
            _writer.writeRepeatedMessage(1, _instance.parameterRequests, BatchCreateParametersRequest.CreateParameterRequest
                .serializeBinaryToWriter);
        }
    }
    get parameterRequests() {
        return this._parameterRequests;
    }
    set parameterRequests(value) {
        this._parameterRequests = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchCreateParametersRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parameterRequests: (this.parameterRequests || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parameterRequests: (this.parameterRequests || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchCreateParametersRequest.id = 'ondewo.nlu.BatchCreateParametersRequest';
(function (BatchCreateParametersRequest) {
    /**
     * Message implementation for ondewo.nlu.CreateParameterRequest
     */
    class CreateParameterRequest {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of CreateParameterRequest to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.intentName = _value.intentName;
            this.parameter = _value.parameter
                ? new Intent.Parameter(_value.parameter)
                : undefined;
            CreateParameterRequest.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new CreateParameterRequest();
            CreateParameterRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.intentName = _instance.intentName || '';
            _instance.parameter = _instance.parameter || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.intentName = _reader.readString();
                        break;
                    case 2:
                        _instance.parameter = new Intent.Parameter();
                        _reader.readMessage(_instance.parameter, Intent.Parameter.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            CreateParameterRequest.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.intentName) {
                _writer.writeString(1, _instance.intentName);
            }
            if (_instance.parameter) {
                _writer.writeMessage(2, _instance.parameter, Intent.Parameter.serializeBinaryToWriter);
            }
        }
        get intentName() {
            return this._intentName;
        }
        set intentName(value) {
            this._intentName = value;
        }
        get parameter() {
            return this._parameter;
        }
        set parameter(value) {
            this._parameter = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            CreateParameterRequest.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                intentName: this.intentName,
                parameter: this.parameter ? this.parameter.toObject() : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                intentName: this.intentName,
                parameter: this.parameter
                    ? this.parameter.toProtobufJSON(options)
                    : null
            };
        }
    }
    CreateParameterRequest.id = 'ondewo.nlu.CreateParameterRequest';
    BatchCreateParametersRequest.CreateParameterRequest = CreateParameterRequest;
})(BatchCreateParametersRequest || (BatchCreateParametersRequest = {}));
/**
 * Message implementation for ondewo.nlu.BatchUpdateParametersRequest
 */
class BatchUpdateParametersRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateParametersRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parameters = (_value.parameters || []).map(m => new Intent.Parameter(m));
        BatchUpdateParametersRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateParametersRequest();
        BatchUpdateParametersRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parameters = _instance.parameters || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent.Parameter();
                    _reader.readMessage(messageInitializer1, Intent.Parameter.deserializeBinaryFromReader);
                    (_instance.parameters = _instance.parameters || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateParametersRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parameters && _instance.parameters.length) {
            _writer.writeRepeatedMessage(1, _instance.parameters, Intent.Parameter.serializeBinaryToWriter);
        }
    }
    get parameters() {
        return this._parameters;
    }
    set parameters(value) {
        this._parameters = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateParametersRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parameters: (this.parameters || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parameters: (this.parameters || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchUpdateParametersRequest.id = 'ondewo.nlu.BatchUpdateParametersRequest';
/**
 * Message implementation for ondewo.nlu.BatchGetParametersRequest
 */
class BatchGetParametersRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchGetParametersRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchGetParametersRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchGetParametersRequest();
        BatchGetParametersRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchGetParametersRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchGetParametersRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchGetParametersRequest.id = 'ondewo.nlu.BatchGetParametersRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteParametersRequest
 */
class BatchDeleteParametersRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteParametersRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.names = (_value.names || []).slice();
        BatchDeleteParametersRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteParametersRequest();
        BatchDeleteParametersRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.names = _instance.names || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.names = _instance.names || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteParametersRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.names && _instance.names.length) {
            _writer.writeRepeatedString(1, _instance.names);
        }
    }
    get names() {
        return this._names;
    }
    set names(value) {
        this._names = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteParametersRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            names: (this.names || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            names: (this.names || []).slice()
        };
    }
}
BatchDeleteParametersRequest.id = 'ondewo.nlu.BatchDeleteParametersRequest';
/**
 * Message implementation for ondewo.nlu.BatchDeleteParametersResponse
 */
class BatchDeleteParametersResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteParametersResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.deleteStatuses = (_value.deleteStatuses || []).map(m => new BatchDeleteParametersResponse.DeleteParameterStatus(m));
        this.hasErrors = _value.hasErrors;
        BatchDeleteParametersResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteParametersResponse();
        BatchDeleteParametersResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.deleteStatuses = _instance.deleteStatuses || [];
        _instance.hasErrors = _instance.hasErrors || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new BatchDeleteParametersResponse.DeleteParameterStatus();
                    _reader.readMessage(messageInitializer1, BatchDeleteParametersResponse.DeleteParameterStatus
                        .deserializeBinaryFromReader);
                    (_instance.deleteStatuses = _instance.deleteStatuses || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.hasErrors = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteParametersResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.deleteStatuses && _instance.deleteStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.deleteStatuses, BatchDeleteParametersResponse.DeleteParameterStatus
                .serializeBinaryToWriter);
        }
        if (_instance.hasErrors) {
            _writer.writeBool(2, _instance.hasErrors);
        }
    }
    get deleteStatuses() {
        return this._deleteStatuses;
    }
    set deleteStatuses(value) {
        this._deleteStatuses = value;
    }
    get hasErrors() {
        return this._hasErrors;
    }
    set hasErrors(value) {
        this._hasErrors = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteParametersResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toObject()),
            hasErrors: this.hasErrors
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            deleteStatuses: (this.deleteStatuses || []).map(m => m.toProtobufJSON(options)),
            hasErrors: this.hasErrors
        };
    }
}
BatchDeleteParametersResponse.id = 'ondewo.nlu.BatchDeleteParametersResponse';
(function (BatchDeleteParametersResponse) {
    /**
     * Message implementation for ondewo.nlu.DeleteParameterStatus
     */
    class DeleteParameterStatus {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of DeleteParameterStatus to deeply clone from
         */
        constructor(_value) {
            this._deleteStatus = DeleteParameterStatus.DeleteStatusCase.none;
            _value = _value || {};
            this.successfullyDeleted = _value.successfullyDeleted
                ? new googleProtobuf003.Empty(_value.successfullyDeleted)
                : undefined;
            this.errorMessage = _value.errorMessage;
            DeleteParameterStatus.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new DeleteParameterStatus();
            DeleteParameterStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) { }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.successfullyDeleted = new googleProtobuf003.Empty();
                        _reader.readMessage(_instance.successfullyDeleted, googleProtobuf003.Empty.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.errorMessage = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            DeleteParameterStatus.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.successfullyDeleted) {
                _writer.writeMessage(1, _instance.successfullyDeleted, googleProtobuf003.Empty.serializeBinaryToWriter);
            }
            if (_instance.errorMessage || _instance.errorMessage === '') {
                _writer.writeString(2, _instance.errorMessage);
            }
        }
        get successfullyDeleted() {
            return this._successfullyDeleted;
        }
        set successfullyDeleted(value) {
            if (value !== undefined && value !== null) {
                this._errorMessage = undefined;
                this._deleteStatus =
                    DeleteParameterStatus.DeleteStatusCase.successfullyDeleted;
            }
            this._successfullyDeleted = value;
        }
        get errorMessage() {
            return this._errorMessage;
        }
        set errorMessage(value) {
            if (value !== undefined && value !== null) {
                this._successfullyDeleted = undefined;
                this._deleteStatus =
                    DeleteParameterStatus.DeleteStatusCase.errorMessage;
            }
            this._errorMessage = value;
        }
        get deleteStatus() {
            return this._deleteStatus;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            DeleteParameterStatus.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toObject()
                    : undefined,
                errorMessage: this.errorMessage
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                successfullyDeleted: this.successfullyDeleted
                    ? this.successfullyDeleted.toProtobufJSON(options)
                    : null,
                errorMessage: this.errorMessage === null || this.errorMessage === undefined
                    ? null
                    : this.errorMessage
            };
        }
    }
    DeleteParameterStatus.id = 'ondewo.nlu.DeleteParameterStatus';
    BatchDeleteParametersResponse.DeleteParameterStatus = DeleteParameterStatus;
    (function (DeleteParameterStatus) {
        let DeleteStatusCase;
        (function (DeleteStatusCase) {
            DeleteStatusCase[DeleteStatusCase["none"] = 0] = "none";
            DeleteStatusCase[DeleteStatusCase["successfullyDeleted"] = 1] = "successfullyDeleted";
            DeleteStatusCase[DeleteStatusCase["errorMessage"] = 2] = "errorMessage";
        })(DeleteStatusCase = DeleteParameterStatus.DeleteStatusCase || (DeleteParameterStatus.DeleteStatusCase = {}));
    })(DeleteParameterStatus = BatchDeleteParametersResponse.DeleteParameterStatus || (BatchDeleteParametersResponse.DeleteParameterStatus = {}));
})(BatchDeleteParametersResponse || (BatchDeleteParametersResponse = {}));
/**
 * Message implementation for ondewo.nlu.ListParametersRequest
 */
class ListParametersRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListParametersRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intentName = _value.intentName;
        this.languageCode = _value.languageCode;
        this.pageToken = _value.pageToken;
        ListParametersRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListParametersRequest();
        ListParametersRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intentName = _instance.intentName || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intentName = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListParametersRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intentName) {
            _writer.writeString(1, _instance.intentName);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.pageToken) {
            _writer.writeString(3, _instance.pageToken);
        }
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListParametersRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intentName: this.intentName,
            languageCode: this.languageCode,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intentName: this.intentName,
            languageCode: this.languageCode,
            pageToken: this.pageToken
        };
    }
}
ListParametersRequest.id = 'ondewo.nlu.ListParametersRequest';
/**
 * Message implementation for ondewo.nlu.ListParametersResponse
 */
class ListParametersResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListParametersResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parameters = (_value.parameters || []).map(m => new Intent.Parameter(m));
        this.nextPageToken = _value.nextPageToken;
        ListParametersResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListParametersResponse();
        ListParametersResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parameters = _instance.parameters || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent.Parameter();
                    _reader.readMessage(messageInitializer1, Intent.Parameter.deserializeBinaryFromReader);
                    (_instance.parameters = _instance.parameters || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListParametersResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parameters && _instance.parameters.length) {
            _writer.writeRepeatedMessage(1, _instance.parameters, Intent.Parameter.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get parameters() {
        return this._parameters;
    }
    set parameters(value) {
        this._parameters = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListParametersResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parameters: (this.parameters || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parameters: (this.parameters || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListParametersResponse.id = 'ondewo.nlu.ListParametersResponse';

/* tslint:disable */
var AudioEncoding;
(function (AudioEncoding) {
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_UNSPECIFIED"] = 0] = "AUDIO_ENCODING_UNSPECIFIED";
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_LINEAR_16"] = 1] = "AUDIO_ENCODING_LINEAR_16";
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_FLAC"] = 2] = "AUDIO_ENCODING_FLAC";
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_MULAW"] = 3] = "AUDIO_ENCODING_MULAW";
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_AMR"] = 4] = "AUDIO_ENCODING_AMR";
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_AMR_WB"] = 5] = "AUDIO_ENCODING_AMR_WB";
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_OGG_OPUS"] = 6] = "AUDIO_ENCODING_OGG_OPUS";
    AudioEncoding[AudioEncoding["AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE"] = 7] = "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE";
})(AudioEncoding || (AudioEncoding = {}));
/**
 * Message implementation for ondewo.nlu.DetectIntentRequest
 */
class DetectIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DetectIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.session = _value.session;
        this.queryParams = _value.queryParams
            ? new QueryParameters(_value.queryParams)
            : undefined;
        this.queryInput = _value.queryInput
            ? new QueryInput(_value.queryInput)
            : undefined;
        this.inputAudio = _value.inputAudio;
        DetectIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DetectIntentRequest();
        DetectIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.session = _instance.session || '';
        _instance.queryParams = _instance.queryParams || undefined;
        _instance.queryInput = _instance.queryInput || undefined;
        _instance.inputAudio = _instance.inputAudio || new Uint8Array();
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.session = _reader.readString();
                    break;
                case 2:
                    _instance.queryParams = new QueryParameters();
                    _reader.readMessage(_instance.queryParams, QueryParameters.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.queryInput = new QueryInput();
                    _reader.readMessage(_instance.queryInput, QueryInput.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.inputAudio = _reader.readBytes();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DetectIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.session) {
            _writer.writeString(1, _instance.session);
        }
        if (_instance.queryParams) {
            _writer.writeMessage(2, _instance.queryParams, QueryParameters.serializeBinaryToWriter);
        }
        if (_instance.queryInput) {
            _writer.writeMessage(3, _instance.queryInput, QueryInput.serializeBinaryToWriter);
        }
        if (_instance.inputAudio && _instance.inputAudio.length) {
            _writer.writeBytes(5, _instance.inputAudio);
        }
    }
    get session() {
        return this._session;
    }
    set session(value) {
        this._session = value;
    }
    get queryParams() {
        return this._queryParams;
    }
    set queryParams(value) {
        this._queryParams = value;
    }
    get queryInput() {
        return this._queryInput;
    }
    set queryInput(value) {
        this._queryInput = value;
    }
    get inputAudio() {
        return this._inputAudio;
    }
    set inputAudio(value) {
        this._inputAudio = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DetectIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            session: this.session,
            queryParams: this.queryParams ? this.queryParams.toObject() : undefined,
            queryInput: this.queryInput ? this.queryInput.toObject() : undefined,
            inputAudio: this.inputAudio
                ? this.inputAudio.subarray(0)
                : new Uint8Array()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            session: this.session,
            queryParams: this.queryParams
                ? this.queryParams.toProtobufJSON(options)
                : null,
            queryInput: this.queryInput
                ? this.queryInput.toProtobufJSON(options)
                : null,
            inputAudio: this.inputAudio ? uint8ArrayToBase64(this.inputAudio) : ''
        };
    }
}
DetectIntentRequest.id = 'ondewo.nlu.DetectIntentRequest';
/**
 * Message implementation for ondewo.nlu.DetectIntentResponse
 */
class DetectIntentResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DetectIntentResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.responseId = _value.responseId;
        this.queryResult = _value.queryResult
            ? new QueryResult(_value.queryResult)
            : undefined;
        this.webhookStatus = _value.webhookStatus
            ? new Status(_value.webhookStatus)
            : undefined;
        DetectIntentResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DetectIntentResponse();
        DetectIntentResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.responseId = _instance.responseId || '';
        _instance.queryResult = _instance.queryResult || undefined;
        _instance.webhookStatus = _instance.webhookStatus || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.responseId = _reader.readString();
                    break;
                case 2:
                    _instance.queryResult = new QueryResult();
                    _reader.readMessage(_instance.queryResult, QueryResult.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.webhookStatus = new Status();
                    _reader.readMessage(_instance.webhookStatus, Status.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        DetectIntentResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.responseId) {
            _writer.writeString(1, _instance.responseId);
        }
        if (_instance.queryResult) {
            _writer.writeMessage(2, _instance.queryResult, QueryResult.serializeBinaryToWriter);
        }
        if (_instance.webhookStatus) {
            _writer.writeMessage(3, _instance.webhookStatus, Status.serializeBinaryToWriter);
        }
    }
    get responseId() {
        return this._responseId;
    }
    set responseId(value) {
        this._responseId = value;
    }
    get queryResult() {
        return this._queryResult;
    }
    set queryResult(value) {
        this._queryResult = value;
    }
    get webhookStatus() {
        return this._webhookStatus;
    }
    set webhookStatus(value) {
        this._webhookStatus = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DetectIntentResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            responseId: this.responseId,
            queryResult: this.queryResult ? this.queryResult.toObject() : undefined,
            webhookStatus: this.webhookStatus
                ? this.webhookStatus.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            responseId: this.responseId,
            queryResult: this.queryResult
                ? this.queryResult.toProtobufJSON(options)
                : null,
            webhookStatus: this.webhookStatus
                ? this.webhookStatus.toProtobufJSON(options)
                : null
        };
    }
}
DetectIntentResponse.id = 'ondewo.nlu.DetectIntentResponse';
/**
 * Message implementation for ondewo.nlu.QueryParameters
 */
class QueryParameters {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of QueryParameters to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.timeZone = _value.timeZone;
        this.geoLocation = _value.geoLocation
            ? new LatLng(_value.geoLocation)
            : undefined;
        this.contexts = (_value.contexts || []).map(m => new Context(m));
        this.resetContexts = _value.resetContexts;
        this.payload = _value.payload
            ? new googleProtobuf003.Struct(_value.payload)
            : undefined;
        QueryParameters.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new QueryParameters();
        QueryParameters.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.timeZone = _instance.timeZone || '';
        _instance.geoLocation = _instance.geoLocation || undefined;
        _instance.contexts = _instance.contexts || [];
        _instance.resetContexts = _instance.resetContexts || false;
        _instance.payload = _instance.payload || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.timeZone = _reader.readString();
                    break;
                case 2:
                    _instance.geoLocation = new LatLng();
                    _reader.readMessage(_instance.geoLocation, LatLng.deserializeBinaryFromReader);
                    break;
                case 3:
                    const messageInitializer3 = new Context();
                    _reader.readMessage(messageInitializer3, Context.deserializeBinaryFromReader);
                    (_instance.contexts = _instance.contexts || []).push(messageInitializer3);
                    break;
                case 4:
                    _instance.resetContexts = _reader.readBool();
                    break;
                case 6:
                    _instance.payload = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.payload, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        QueryParameters.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.timeZone) {
            _writer.writeString(1, _instance.timeZone);
        }
        if (_instance.geoLocation) {
            _writer.writeMessage(2, _instance.geoLocation, LatLng.serializeBinaryToWriter);
        }
        if (_instance.contexts && _instance.contexts.length) {
            _writer.writeRepeatedMessage(3, _instance.contexts, Context.serializeBinaryToWriter);
        }
        if (_instance.resetContexts) {
            _writer.writeBool(4, _instance.resetContexts);
        }
        if (_instance.payload) {
            _writer.writeMessage(6, _instance.payload, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
    }
    get timeZone() {
        return this._timeZone;
    }
    set timeZone(value) {
        this._timeZone = value;
    }
    get geoLocation() {
        return this._geoLocation;
    }
    set geoLocation(value) {
        this._geoLocation = value;
    }
    get contexts() {
        return this._contexts;
    }
    set contexts(value) {
        this._contexts = value;
    }
    get resetContexts() {
        return this._resetContexts;
    }
    set resetContexts(value) {
        this._resetContexts = value;
    }
    get payload() {
        return this._payload;
    }
    set payload(value) {
        this._payload = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        QueryParameters.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            timeZone: this.timeZone,
            geoLocation: this.geoLocation ? this.geoLocation.toObject() : undefined,
            contexts: (this.contexts || []).map(m => m.toObject()),
            resetContexts: this.resetContexts,
            payload: this.payload ? this.payload.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            timeZone: this.timeZone,
            geoLocation: this.geoLocation
                ? this.geoLocation.toProtobufJSON(options)
                : null,
            contexts: (this.contexts || []).map(m => m.toProtobufJSON(options)),
            resetContexts: this.resetContexts,
            payload: this.payload ? this.payload.toProtobufJSON(options) : null
        };
    }
}
QueryParameters.id = 'ondewo.nlu.QueryParameters';
/**
 * Message implementation for ondewo.nlu.QueryInput
 */
class QueryInput {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of QueryInput to deeply clone from
     */
    constructor(_value) {
        this._input = QueryInput.InputCase.none;
        _value = _value || {};
        this.audioConfig = _value.audioConfig
            ? new InputAudioConfig(_value.audioConfig)
            : undefined;
        this.text = _value.text ? new TextInput(_value.text) : undefined;
        this.event = _value.event ? new EventInput(_value.event) : undefined;
        QueryInput.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new QueryInput();
        QueryInput.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.audioConfig = new InputAudioConfig();
                    _reader.readMessage(_instance.audioConfig, InputAudioConfig.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.text = new TextInput();
                    _reader.readMessage(_instance.text, TextInput.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.event = new EventInput();
                    _reader.readMessage(_instance.event, EventInput.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        QueryInput.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.audioConfig) {
            _writer.writeMessage(1, _instance.audioConfig, InputAudioConfig.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeMessage(2, _instance.text, TextInput.serializeBinaryToWriter);
        }
        if (_instance.event) {
            _writer.writeMessage(3, _instance.event, EventInput.serializeBinaryToWriter);
        }
    }
    get audioConfig() {
        return this._audioConfig;
    }
    set audioConfig(value) {
        if (value !== undefined && value !== null) {
            this._text = this._event = undefined;
            this._input = QueryInput.InputCase.audioConfig;
        }
        this._audioConfig = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value !== undefined && value !== null) {
            this._audioConfig = this._event = undefined;
            this._input = QueryInput.InputCase.text;
        }
        this._text = value;
    }
    get event() {
        return this._event;
    }
    set event(value) {
        if (value !== undefined && value !== null) {
            this._audioConfig = this._text = undefined;
            this._input = QueryInput.InputCase.event;
        }
        this._event = value;
    }
    get input() {
        return this._input;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        QueryInput.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            audioConfig: this.audioConfig ? this.audioConfig.toObject() : undefined,
            text: this.text ? this.text.toObject() : undefined,
            event: this.event ? this.event.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            audioConfig: this.audioConfig
                ? this.audioConfig.toProtobufJSON(options)
                : null,
            text: this.text ? this.text.toProtobufJSON(options) : null,
            event: this.event ? this.event.toProtobufJSON(options) : null
        };
    }
}
QueryInput.id = 'ondewo.nlu.QueryInput';
(function (QueryInput) {
    let InputCase;
    (function (InputCase) {
        InputCase[InputCase["none"] = 0] = "none";
        InputCase[InputCase["audioConfig"] = 1] = "audioConfig";
        InputCase[InputCase["text"] = 2] = "text";
        InputCase[InputCase["event"] = 3] = "event";
    })(InputCase = QueryInput.InputCase || (QueryInput.InputCase = {}));
})(QueryInput || (QueryInput = {}));
/**
 * Message implementation for ondewo.nlu.QueryResult
 */
class QueryResult {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of QueryResult to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.queryText = _value.queryText;
        this.languageCode = _value.languageCode;
        this.speechRecognitionConfidence = _value.speechRecognitionConfidence;
        this.action = _value.action;
        this.parameters = _value.parameters
            ? new googleProtobuf003.Struct(_value.parameters)
            : undefined;
        this.allRequiredParamsPresent = _value.allRequiredParamsPresent;
        this.fulfillmentText = _value.fulfillmentText;
        this.fulfillmentMessages = (_value.fulfillmentMessages || []).map(m => new Intent.Message(m));
        this.webhookSource = _value.webhookSource;
        this.webhookPayload = _value.webhookPayload
            ? new googleProtobuf003.Struct(_value.webhookPayload)
            : undefined;
        this.outputContexts = (_value.outputContexts || []).map(m => new Context(m));
        this.intent = _value.intent
            ? new Intent(_value.intent)
            : undefined;
        this.intentDetectionConfidence = _value.intentDetectionConfidence;
        this.diagnosticInfo = _value.diagnosticInfo
            ? new googleProtobuf003.Struct(_value.diagnosticInfo)
            : undefined;
        QueryResult.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new QueryResult();
        QueryResult.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.queryText = _instance.queryText || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.speechRecognitionConfidence =
            _instance.speechRecognitionConfidence || 0;
        _instance.action = _instance.action || '';
        _instance.parameters = _instance.parameters || undefined;
        _instance.allRequiredParamsPresent =
            _instance.allRequiredParamsPresent || false;
        _instance.fulfillmentText = _instance.fulfillmentText || '';
        _instance.fulfillmentMessages = _instance.fulfillmentMessages || [];
        _instance.webhookSource = _instance.webhookSource || '';
        _instance.webhookPayload = _instance.webhookPayload || undefined;
        _instance.outputContexts = _instance.outputContexts || [];
        _instance.intent = _instance.intent || undefined;
        _instance.intentDetectionConfidence =
            _instance.intentDetectionConfidence || 0;
        _instance.diagnosticInfo = _instance.diagnosticInfo || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.queryText = _reader.readString();
                    break;
                case 15:
                    _instance.languageCode = _reader.readString();
                    break;
                case 2:
                    _instance.speechRecognitionConfidence = _reader.readFloat();
                    break;
                case 3:
                    _instance.action = _reader.readString();
                    break;
                case 4:
                    _instance.parameters = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.parameters, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.allRequiredParamsPresent = _reader.readBool();
                    break;
                case 6:
                    _instance.fulfillmentText = _reader.readString();
                    break;
                case 7:
                    const messageInitializer7 = new Intent.Message();
                    _reader.readMessage(messageInitializer7, Intent.Message.deserializeBinaryFromReader);
                    (_instance.fulfillmentMessages =
                        _instance.fulfillmentMessages || []).push(messageInitializer7);
                    break;
                case 8:
                    _instance.webhookSource = _reader.readString();
                    break;
                case 9:
                    _instance.webhookPayload = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.webhookPayload, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                case 10:
                    const messageInitializer10 = new Context();
                    _reader.readMessage(messageInitializer10, Context.deserializeBinaryFromReader);
                    (_instance.outputContexts = _instance.outputContexts || []).push(messageInitializer10);
                    break;
                case 11:
                    _instance.intent = new Intent();
                    _reader.readMessage(_instance.intent, Intent.deserializeBinaryFromReader);
                    break;
                case 12:
                    _instance.intentDetectionConfidence = _reader.readFloat();
                    break;
                case 14:
                    _instance.diagnosticInfo = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.diagnosticInfo, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        QueryResult.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.queryText) {
            _writer.writeString(1, _instance.queryText);
        }
        if (_instance.languageCode) {
            _writer.writeString(15, _instance.languageCode);
        }
        if (_instance.speechRecognitionConfidence) {
            _writer.writeFloat(2, _instance.speechRecognitionConfidence);
        }
        if (_instance.action) {
            _writer.writeString(3, _instance.action);
        }
        if (_instance.parameters) {
            _writer.writeMessage(4, _instance.parameters, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
        if (_instance.allRequiredParamsPresent) {
            _writer.writeBool(5, _instance.allRequiredParamsPresent);
        }
        if (_instance.fulfillmentText) {
            _writer.writeString(6, _instance.fulfillmentText);
        }
        if (_instance.fulfillmentMessages && _instance.fulfillmentMessages.length) {
            _writer.writeRepeatedMessage(7, _instance.fulfillmentMessages, Intent.Message.serializeBinaryToWriter);
        }
        if (_instance.webhookSource) {
            _writer.writeString(8, _instance.webhookSource);
        }
        if (_instance.webhookPayload) {
            _writer.writeMessage(9, _instance.webhookPayload, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
        if (_instance.outputContexts && _instance.outputContexts.length) {
            _writer.writeRepeatedMessage(10, _instance.outputContexts, Context.serializeBinaryToWriter);
        }
        if (_instance.intent) {
            _writer.writeMessage(11, _instance.intent, Intent.serializeBinaryToWriter);
        }
        if (_instance.intentDetectionConfidence) {
            _writer.writeFloat(12, _instance.intentDetectionConfidence);
        }
        if (_instance.diagnosticInfo) {
            _writer.writeMessage(14, _instance.diagnosticInfo, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
    }
    get queryText() {
        return this._queryText;
    }
    set queryText(value) {
        this._queryText = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get speechRecognitionConfidence() {
        return this._speechRecognitionConfidence;
    }
    set speechRecognitionConfidence(value) {
        this._speechRecognitionConfidence = value;
    }
    get action() {
        return this._action;
    }
    set action(value) {
        this._action = value;
    }
    get parameters() {
        return this._parameters;
    }
    set parameters(value) {
        this._parameters = value;
    }
    get allRequiredParamsPresent() {
        return this._allRequiredParamsPresent;
    }
    set allRequiredParamsPresent(value) {
        this._allRequiredParamsPresent = value;
    }
    get fulfillmentText() {
        return this._fulfillmentText;
    }
    set fulfillmentText(value) {
        this._fulfillmentText = value;
    }
    get fulfillmentMessages() {
        return this._fulfillmentMessages;
    }
    set fulfillmentMessages(value) {
        this._fulfillmentMessages = value;
    }
    get webhookSource() {
        return this._webhookSource;
    }
    set webhookSource(value) {
        this._webhookSource = value;
    }
    get webhookPayload() {
        return this._webhookPayload;
    }
    set webhookPayload(value) {
        this._webhookPayload = value;
    }
    get outputContexts() {
        return this._outputContexts;
    }
    set outputContexts(value) {
        this._outputContexts = value;
    }
    get intent() {
        return this._intent;
    }
    set intent(value) {
        this._intent = value;
    }
    get intentDetectionConfidence() {
        return this._intentDetectionConfidence;
    }
    set intentDetectionConfidence(value) {
        this._intentDetectionConfidence = value;
    }
    get diagnosticInfo() {
        return this._diagnosticInfo;
    }
    set diagnosticInfo(value) {
        this._diagnosticInfo = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        QueryResult.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            queryText: this.queryText,
            languageCode: this.languageCode,
            speechRecognitionConfidence: this.speechRecognitionConfidence,
            action: this.action,
            parameters: this.parameters ? this.parameters.toObject() : undefined,
            allRequiredParamsPresent: this.allRequiredParamsPresent,
            fulfillmentText: this.fulfillmentText,
            fulfillmentMessages: (this.fulfillmentMessages || []).map(m => m.toObject()),
            webhookSource: this.webhookSource,
            webhookPayload: this.webhookPayload
                ? this.webhookPayload.toObject()
                : undefined,
            outputContexts: (this.outputContexts || []).map(m => m.toObject()),
            intent: this.intent ? this.intent.toObject() : undefined,
            intentDetectionConfidence: this.intentDetectionConfidence,
            diagnosticInfo: this.diagnosticInfo
                ? this.diagnosticInfo.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            queryText: this.queryText,
            languageCode: this.languageCode,
            speechRecognitionConfidence: this.speechRecognitionConfidence,
            action: this.action,
            parameters: this.parameters
                ? this.parameters.toProtobufJSON(options)
                : null,
            allRequiredParamsPresent: this.allRequiredParamsPresent,
            fulfillmentText: this.fulfillmentText,
            fulfillmentMessages: (this.fulfillmentMessages || []).map(m => m.toProtobufJSON(options)),
            webhookSource: this.webhookSource,
            webhookPayload: this.webhookPayload
                ? this.webhookPayload.toProtobufJSON(options)
                : null,
            outputContexts: (this.outputContexts || []).map(m => m.toProtobufJSON(options)),
            intent: this.intent ? this.intent.toProtobufJSON(options) : null,
            intentDetectionConfidence: this.intentDetectionConfidence,
            diagnosticInfo: this.diagnosticInfo
                ? this.diagnosticInfo.toProtobufJSON(options)
                : null
        };
    }
}
QueryResult.id = 'ondewo.nlu.QueryResult';
/**
 * Message implementation for ondewo.nlu.StreamingDetectIntentRequest
 */
class StreamingDetectIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of StreamingDetectIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.session = _value.session;
        this.queryParams = _value.queryParams
            ? new QueryParameters(_value.queryParams)
            : undefined;
        this.queryInput = _value.queryInput
            ? new QueryInput(_value.queryInput)
            : undefined;
        this.singleUtterance = _value.singleUtterance;
        this.inputAudio = _value.inputAudio;
        StreamingDetectIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new StreamingDetectIntentRequest();
        StreamingDetectIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.session = _instance.session || '';
        _instance.queryParams = _instance.queryParams || undefined;
        _instance.queryInput = _instance.queryInput || undefined;
        _instance.singleUtterance = _instance.singleUtterance || false;
        _instance.inputAudio = _instance.inputAudio || new Uint8Array();
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.session = _reader.readString();
                    break;
                case 2:
                    _instance.queryParams = new QueryParameters();
                    _reader.readMessage(_instance.queryParams, QueryParameters.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.queryInput = new QueryInput();
                    _reader.readMessage(_instance.queryInput, QueryInput.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.singleUtterance = _reader.readBool();
                    break;
                case 6:
                    _instance.inputAudio = _reader.readBytes();
                    break;
                default:
                    _reader.skipField();
            }
        }
        StreamingDetectIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.session) {
            _writer.writeString(1, _instance.session);
        }
        if (_instance.queryParams) {
            _writer.writeMessage(2, _instance.queryParams, QueryParameters.serializeBinaryToWriter);
        }
        if (_instance.queryInput) {
            _writer.writeMessage(3, _instance.queryInput, QueryInput.serializeBinaryToWriter);
        }
        if (_instance.singleUtterance) {
            _writer.writeBool(4, _instance.singleUtterance);
        }
        if (_instance.inputAudio && _instance.inputAudio.length) {
            _writer.writeBytes(6, _instance.inputAudio);
        }
    }
    get session() {
        return this._session;
    }
    set session(value) {
        this._session = value;
    }
    get queryParams() {
        return this._queryParams;
    }
    set queryParams(value) {
        this._queryParams = value;
    }
    get queryInput() {
        return this._queryInput;
    }
    set queryInput(value) {
        this._queryInput = value;
    }
    get singleUtterance() {
        return this._singleUtterance;
    }
    set singleUtterance(value) {
        this._singleUtterance = value;
    }
    get inputAudio() {
        return this._inputAudio;
    }
    set inputAudio(value) {
        this._inputAudio = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        StreamingDetectIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            session: this.session,
            queryParams: this.queryParams ? this.queryParams.toObject() : undefined,
            queryInput: this.queryInput ? this.queryInput.toObject() : undefined,
            singleUtterance: this.singleUtterance,
            inputAudio: this.inputAudio
                ? this.inputAudio.subarray(0)
                : new Uint8Array()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            session: this.session,
            queryParams: this.queryParams
                ? this.queryParams.toProtobufJSON(options)
                : null,
            queryInput: this.queryInput
                ? this.queryInput.toProtobufJSON(options)
                : null,
            singleUtterance: this.singleUtterance,
            inputAudio: this.inputAudio ? uint8ArrayToBase64(this.inputAudio) : ''
        };
    }
}
StreamingDetectIntentRequest.id = 'ondewo.nlu.StreamingDetectIntentRequest';
/**
 * Message implementation for ondewo.nlu.StreamingDetectIntentResponse
 */
class StreamingDetectIntentResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of StreamingDetectIntentResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.responseId = _value.responseId;
        this.recognitionResult = _value.recognitionResult
            ? new StreamingRecognitionResult(_value.recognitionResult)
            : undefined;
        this.queryResult = _value.queryResult
            ? new QueryResult(_value.queryResult)
            : undefined;
        this.webhookStatus = _value.webhookStatus
            ? new Status(_value.webhookStatus)
            : undefined;
        StreamingDetectIntentResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new StreamingDetectIntentResponse();
        StreamingDetectIntentResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.responseId = _instance.responseId || '';
        _instance.recognitionResult = _instance.recognitionResult || undefined;
        _instance.queryResult = _instance.queryResult || undefined;
        _instance.webhookStatus = _instance.webhookStatus || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.responseId = _reader.readString();
                    break;
                case 2:
                    _instance.recognitionResult = new StreamingRecognitionResult();
                    _reader.readMessage(_instance.recognitionResult, StreamingRecognitionResult.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.queryResult = new QueryResult();
                    _reader.readMessage(_instance.queryResult, QueryResult.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.webhookStatus = new Status();
                    _reader.readMessage(_instance.webhookStatus, Status.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        StreamingDetectIntentResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.responseId) {
            _writer.writeString(1, _instance.responseId);
        }
        if (_instance.recognitionResult) {
            _writer.writeMessage(2, _instance.recognitionResult, StreamingRecognitionResult.serializeBinaryToWriter);
        }
        if (_instance.queryResult) {
            _writer.writeMessage(3, _instance.queryResult, QueryResult.serializeBinaryToWriter);
        }
        if (_instance.webhookStatus) {
            _writer.writeMessage(4, _instance.webhookStatus, Status.serializeBinaryToWriter);
        }
    }
    get responseId() {
        return this._responseId;
    }
    set responseId(value) {
        this._responseId = value;
    }
    get recognitionResult() {
        return this._recognitionResult;
    }
    set recognitionResult(value) {
        this._recognitionResult = value;
    }
    get queryResult() {
        return this._queryResult;
    }
    set queryResult(value) {
        this._queryResult = value;
    }
    get webhookStatus() {
        return this._webhookStatus;
    }
    set webhookStatus(value) {
        this._webhookStatus = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        StreamingDetectIntentResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            responseId: this.responseId,
            recognitionResult: this.recognitionResult
                ? this.recognitionResult.toObject()
                : undefined,
            queryResult: this.queryResult ? this.queryResult.toObject() : undefined,
            webhookStatus: this.webhookStatus
                ? this.webhookStatus.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            responseId: this.responseId,
            recognitionResult: this.recognitionResult
                ? this.recognitionResult.toProtobufJSON(options)
                : null,
            queryResult: this.queryResult
                ? this.queryResult.toProtobufJSON(options)
                : null,
            webhookStatus: this.webhookStatus
                ? this.webhookStatus.toProtobufJSON(options)
                : null
        };
    }
}
StreamingDetectIntentResponse.id = 'ondewo.nlu.StreamingDetectIntentResponse';
/**
 * Message implementation for ondewo.nlu.StreamingRecognitionResult
 */
class StreamingRecognitionResult {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of StreamingRecognitionResult to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messageType = _value.messageType;
        this.transcript = _value.transcript;
        this.isFinal = _value.isFinal;
        this.confidence = _value.confidence;
        StreamingRecognitionResult.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new StreamingRecognitionResult();
        StreamingRecognitionResult.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messageType = _instance.messageType || 0;
        _instance.transcript = _instance.transcript || '';
        _instance.isFinal = _instance.isFinal || false;
        _instance.confidence = _instance.confidence || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.messageType = _reader.readEnum();
                    break;
                case 2:
                    _instance.transcript = _reader.readString();
                    break;
                case 3:
                    _instance.isFinal = _reader.readBool();
                    break;
                case 4:
                    _instance.confidence = _reader.readFloat();
                    break;
                default:
                    _reader.skipField();
            }
        }
        StreamingRecognitionResult.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messageType) {
            _writer.writeEnum(1, _instance.messageType);
        }
        if (_instance.transcript) {
            _writer.writeString(2, _instance.transcript);
        }
        if (_instance.isFinal) {
            _writer.writeBool(3, _instance.isFinal);
        }
        if (_instance.confidence) {
            _writer.writeFloat(4, _instance.confidence);
        }
    }
    get messageType() {
        return this._messageType;
    }
    set messageType(value) {
        this._messageType = value;
    }
    get transcript() {
        return this._transcript;
    }
    set transcript(value) {
        this._transcript = value;
    }
    get isFinal() {
        return this._isFinal;
    }
    set isFinal(value) {
        this._isFinal = value;
    }
    get confidence() {
        return this._confidence;
    }
    set confidence(value) {
        this._confidence = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        StreamingRecognitionResult.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messageType: this.messageType,
            transcript: this.transcript,
            isFinal: this.isFinal,
            confidence: this.confidence
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messageType: StreamingRecognitionResult.MessageType[this.messageType === null || this.messageType === undefined
                ? 0
                : this.messageType],
            transcript: this.transcript,
            isFinal: this.isFinal,
            confidence: this.confidence
        };
    }
}
StreamingRecognitionResult.id = 'ondewo.nlu.StreamingRecognitionResult';
(function (StreamingRecognitionResult) {
    let MessageType;
    (function (MessageType) {
        MessageType[MessageType["MESSAGE_TYPE_UNSPECIFIED"] = 0] = "MESSAGE_TYPE_UNSPECIFIED";
        MessageType[MessageType["TRANSCRIPT"] = 1] = "TRANSCRIPT";
        MessageType[MessageType["END_OF_SINGLE_UTTERANCE"] = 2] = "END_OF_SINGLE_UTTERANCE";
    })(MessageType = StreamingRecognitionResult.MessageType || (StreamingRecognitionResult.MessageType = {}));
})(StreamingRecognitionResult || (StreamingRecognitionResult = {}));
/**
 * Message implementation for ondewo.nlu.InputAudioConfig
 */
class InputAudioConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InputAudioConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.audioEncoding = _value.audioEncoding;
        this.sampleRateHertz = _value.sampleRateHertz;
        this.languageCode = _value.languageCode;
        this.phraseHints = (_value.phraseHints || []).slice();
        InputAudioConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InputAudioConfig();
        InputAudioConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.audioEncoding = _instance.audioEncoding || 0;
        _instance.sampleRateHertz = _instance.sampleRateHertz || 0;
        _instance.languageCode = _instance.languageCode || '';
        _instance.phraseHints = _instance.phraseHints || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.audioEncoding = _reader.readEnum();
                    break;
                case 2:
                    _instance.sampleRateHertz = _reader.readInt32();
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    (_instance.phraseHints = _instance.phraseHints || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        InputAudioConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.audioEncoding) {
            _writer.writeEnum(1, _instance.audioEncoding);
        }
        if (_instance.sampleRateHertz) {
            _writer.writeInt32(2, _instance.sampleRateHertz);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.phraseHints && _instance.phraseHints.length) {
            _writer.writeRepeatedString(4, _instance.phraseHints);
        }
    }
    get audioEncoding() {
        return this._audioEncoding;
    }
    set audioEncoding(value) {
        this._audioEncoding = value;
    }
    get sampleRateHertz() {
        return this._sampleRateHertz;
    }
    set sampleRateHertz(value) {
        this._sampleRateHertz = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get phraseHints() {
        return this._phraseHints;
    }
    set phraseHints(value) {
        this._phraseHints = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InputAudioConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            audioEncoding: this.audioEncoding,
            sampleRateHertz: this.sampleRateHertz,
            languageCode: this.languageCode,
            phraseHints: (this.phraseHints || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            audioEncoding: AudioEncoding[this.audioEncoding === null || this.audioEncoding === undefined
                ? 0
                : this.audioEncoding],
            sampleRateHertz: this.sampleRateHertz,
            languageCode: this.languageCode,
            phraseHints: (this.phraseHints || []).slice()
        };
    }
}
InputAudioConfig.id = 'ondewo.nlu.InputAudioConfig';
/**
 * Message implementation for ondewo.nlu.TextInput
 */
class TextInput {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TextInput to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.text = _value.text;
        this.languageCode = _value.languageCode;
        TextInput.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TextInput();
        TextInput.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.text = _instance.text || '';
        _instance.languageCode = _instance.languageCode || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        TextInput.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeString(1, _instance.text);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TextInput.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text,
            languageCode: this.languageCode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text,
            languageCode: this.languageCode
        };
    }
}
TextInput.id = 'ondewo.nlu.TextInput';
/**
 * Message implementation for ondewo.nlu.EventInput
 */
class EventInput {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EventInput to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.parameters = _value.parameters
            ? new googleProtobuf003.Struct(_value.parameters)
            : undefined;
        this.languageCode = _value.languageCode;
        EventInput.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EventInput();
        EventInput.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.parameters = _instance.parameters || undefined;
        _instance.languageCode = _instance.languageCode || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.parameters = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.parameters, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EventInput.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.parameters) {
            _writer.writeMessage(2, _instance.parameters, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get parameters() {
        return this._parameters;
    }
    set parameters(value) {
        this._parameters = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EventInput.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            parameters: this.parameters ? this.parameters.toObject() : undefined,
            languageCode: this.languageCode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            parameters: this.parameters
                ? this.parameters.toProtobufJSON(options)
                : null,
            languageCode: this.languageCode
        };
    }
}
EventInput.id = 'ondewo.nlu.EventInput';
/**
 * Message implementation for ondewo.nlu.Session
 */
class Session {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Session to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.sessionSteps = (_value.sessionSteps || []).map(m => new SessionStep(m));
        this.sessionInfo = _value.sessionInfo
            ? new SessionInfo(_value.sessionInfo)
            : undefined;
        Session.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Session();
        Session.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.sessionSteps = _instance.sessionSteps || [];
        _instance.sessionInfo = _instance.sessionInfo || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new SessionStep();
                    _reader.readMessage(messageInitializer2, SessionStep.deserializeBinaryFromReader);
                    (_instance.sessionSteps = _instance.sessionSteps || []).push(messageInitializer2);
                    break;
                case 3:
                    _instance.sessionInfo = new SessionInfo();
                    _reader.readMessage(_instance.sessionInfo, SessionInfo.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Session.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.sessionSteps && _instance.sessionSteps.length) {
            _writer.writeRepeatedMessage(2, _instance.sessionSteps, SessionStep.serializeBinaryToWriter);
        }
        if (_instance.sessionInfo) {
            _writer.writeMessage(3, _instance.sessionInfo, SessionInfo.serializeBinaryToWriter);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get sessionSteps() {
        return this._sessionSteps;
    }
    set sessionSteps(value) {
        this._sessionSteps = value;
    }
    get sessionInfo() {
        return this._sessionInfo;
    }
    set sessionInfo(value) {
        this._sessionInfo = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Session.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            sessionSteps: (this.sessionSteps || []).map(m => m.toObject()),
            sessionInfo: this.sessionInfo ? this.sessionInfo.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            sessionSteps: (this.sessionSteps || []).map(m => m.toProtobufJSON(options)),
            sessionInfo: this.sessionInfo
                ? this.sessionInfo.toProtobufJSON(options)
                : null
        };
    }
}
Session.id = 'ondewo.nlu.Session';
(function (Session) {
    let View;
    (function (View) {
        View[View["VIEW_UNSPECIFIED"] = 0] = "VIEW_UNSPECIFIED";
        View[View["VIEW_FULL"] = 1] = "VIEW_FULL";
        View[View["VIEW_SPARSE"] = 2] = "VIEW_SPARSE";
    })(View = Session.View || (Session.View = {}));
})(Session || (Session = {}));
/**
 * Message implementation for ondewo.nlu.SessionStep
 */
class SessionStep {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SessionStep to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.detectIntentRequest = _value.detectIntentRequest
            ? new DetectIntentRequest(_value.detectIntentRequest)
            : undefined;
        this.detectIntentResponse = _value.detectIntentResponse
            ? new DetectIntentResponse(_value.detectIntentResponse)
            : undefined;
        this.contexts = (_value.contexts || []).map(m => new Context(m));
        SessionStep.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SessionStep();
        SessionStep.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.detectIntentRequest = _instance.detectIntentRequest || undefined;
        _instance.detectIntentResponse =
            _instance.detectIntentResponse || undefined;
        _instance.contexts = _instance.contexts || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.detectIntentRequest = new DetectIntentRequest();
                    _reader.readMessage(_instance.detectIntentRequest, DetectIntentRequest.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.detectIntentResponse = new DetectIntentResponse();
                    _reader.readMessage(_instance.detectIntentResponse, DetectIntentResponse.deserializeBinaryFromReader);
                    break;
                case 3:
                    const messageInitializer3 = new Context();
                    _reader.readMessage(messageInitializer3, Context.deserializeBinaryFromReader);
                    (_instance.contexts = _instance.contexts || []).push(messageInitializer3);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SessionStep.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.detectIntentRequest) {
            _writer.writeMessage(1, _instance.detectIntentRequest, DetectIntentRequest.serializeBinaryToWriter);
        }
        if (_instance.detectIntentResponse) {
            _writer.writeMessage(2, _instance.detectIntentResponse, DetectIntentResponse.serializeBinaryToWriter);
        }
        if (_instance.contexts && _instance.contexts.length) {
            _writer.writeRepeatedMessage(3, _instance.contexts, Context.serializeBinaryToWriter);
        }
    }
    get detectIntentRequest() {
        return this._detectIntentRequest;
    }
    set detectIntentRequest(value) {
        this._detectIntentRequest = value;
    }
    get detectIntentResponse() {
        return this._detectIntentResponse;
    }
    set detectIntentResponse(value) {
        this._detectIntentResponse = value;
    }
    get contexts() {
        return this._contexts;
    }
    set contexts(value) {
        this._contexts = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SessionStep.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            detectIntentRequest: this.detectIntentRequest
                ? this.detectIntentRequest.toObject()
                : undefined,
            detectIntentResponse: this.detectIntentResponse
                ? this.detectIntentResponse.toObject()
                : undefined,
            contexts: (this.contexts || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            detectIntentRequest: this.detectIntentRequest
                ? this.detectIntentRequest.toProtobufJSON(options)
                : null,
            detectIntentResponse: this.detectIntentResponse
                ? this.detectIntentResponse.toProtobufJSON(options)
                : null,
            contexts: (this.contexts || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SessionStep.id = 'ondewo.nlu.SessionStep';
/**
 * Message implementation for ondewo.nlu.TrackSessionStepRequest
 */
class TrackSessionStepRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TrackSessionStepRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.sessionStep = _value.sessionStep
            ? new SessionStep(_value.sessionStep)
            : undefined;
        this.sessionView = _value.sessionView;
        TrackSessionStepRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TrackSessionStepRequest();
        TrackSessionStepRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.sessionStep = _instance.sessionStep || undefined;
        _instance.sessionView = _instance.sessionView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    _instance.sessionStep = new SessionStep();
                    _reader.readMessage(_instance.sessionStep, SessionStep.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.sessionView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        TrackSessionStepRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.sessionStep) {
            _writer.writeMessage(2, _instance.sessionStep, SessionStep.serializeBinaryToWriter);
        }
        if (_instance.sessionView) {
            _writer.writeEnum(3, _instance.sessionView);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get sessionStep() {
        return this._sessionStep;
    }
    set sessionStep(value) {
        this._sessionStep = value;
    }
    get sessionView() {
        return this._sessionView;
    }
    set sessionView(value) {
        this._sessionView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TrackSessionStepRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            sessionStep: this.sessionStep ? this.sessionStep.toObject() : undefined,
            sessionView: this.sessionView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            sessionStep: this.sessionStep
                ? this.sessionStep.toProtobufJSON(options)
                : null,
            sessionView: Session.View[this.sessionView === null || this.sessionView === undefined
                ? 0
                : this.sessionView]
        };
    }
}
TrackSessionStepRequest.id = 'ondewo.nlu.TrackSessionStepRequest';
/**
 * Message implementation for ondewo.nlu.ListSessionsRequest
 */
class ListSessionsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListSessionsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.sessionView = _value.sessionView;
        this.pageToken = _value.pageToken;
        this.sessionFilter = _value.sessionFilter
            ? new SessionFilter(_value.sessionFilter)
            : undefined;
        ListSessionsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListSessionsRequest();
        ListSessionsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.sessionView = _instance.sessionView || 0;
        _instance.pageToken = _instance.pageToken || '';
        _instance.sessionFilter = _instance.sessionFilter || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.sessionView = _reader.readEnum();
                    break;
                case 4:
                    _instance.pageToken = _reader.readString();
                    break;
                case 5:
                    _instance.sessionFilter = new SessionFilter();
                    _reader.readMessage(_instance.sessionFilter, SessionFilter.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListSessionsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.sessionView) {
            _writer.writeEnum(2, _instance.sessionView);
        }
        if (_instance.pageToken) {
            _writer.writeString(4, _instance.pageToken);
        }
        if (_instance.sessionFilter) {
            _writer.writeMessage(5, _instance.sessionFilter, SessionFilter.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get sessionView() {
        return this._sessionView;
    }
    set sessionView(value) {
        this._sessionView = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get sessionFilter() {
        return this._sessionFilter;
    }
    set sessionFilter(value) {
        this._sessionFilter = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListSessionsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            sessionView: this.sessionView,
            pageToken: this.pageToken,
            sessionFilter: this.sessionFilter
                ? this.sessionFilter.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            sessionView: Session.View[this.sessionView === null || this.sessionView === undefined
                ? 0
                : this.sessionView],
            pageToken: this.pageToken,
            sessionFilter: this.sessionFilter
                ? this.sessionFilter.toProtobufJSON(options)
                : null
        };
    }
}
ListSessionsRequest.id = 'ondewo.nlu.ListSessionsRequest';
/**
 * Message implementation for ondewo.nlu.SessionFilter
 */
class SessionFilter {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SessionFilter to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.languageCodes = (_value.languageCodes || []).slice();
        this.matchedIntents = (_value.matchedIntents || []).map(m => new Intent(m));
        this.matchedEntityTypes = (_value.matchedEntityTypes || []).map(m => new EntityType(m));
        this.minIntentsConfidenceMin = _value.minIntentsConfidenceMin;
        this.minIntentsConfidenceMax = _value.minIntentsConfidenceMax;
        this.minEntityTypesConfidenceMin = _value.minEntityTypesConfidenceMin;
        this.minEntityTypesConfidenceMax = _value.minEntityTypesConfidenceMax;
        this.earliest = _value.earliest;
        this.latest = _value.latest;
        this.minNumberTurns = _value.minNumberTurns;
        this.maxNumberTurns = _value.maxNumberTurns;
        this.labels = (_value.labels || []).slice();
        this.userIds = (_value.userIds || []).slice();
        this.intentTags = (_value.intentTags || []).slice();
        SessionFilter.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SessionFilter();
        SessionFilter.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.languageCodes = _instance.languageCodes || [];
        _instance.matchedIntents = _instance.matchedIntents || [];
        _instance.matchedEntityTypes = _instance.matchedEntityTypes || [];
        _instance.minIntentsConfidenceMin = _instance.minIntentsConfidenceMin || 0;
        _instance.minIntentsConfidenceMax = _instance.minIntentsConfidenceMax || 0;
        _instance.minEntityTypesConfidenceMin =
            _instance.minEntityTypesConfidenceMin || 0;
        _instance.minEntityTypesConfidenceMax =
            _instance.minEntityTypesConfidenceMax || 0;
        _instance.earliest = _instance.earliest || 0;
        _instance.latest = _instance.latest || 0;
        _instance.minNumberTurns = _instance.minNumberTurns || 0;
        _instance.maxNumberTurns = _instance.maxNumberTurns || 0;
        _instance.labels = _instance.labels || [];
        _instance.userIds = _instance.userIds || [];
        _instance.intentTags = _instance.intentTags || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.languageCodes = _instance.languageCodes || []).push(_reader.readString());
                    break;
                case 2:
                    const messageInitializer2 = new Intent();
                    _reader.readMessage(messageInitializer2, Intent.deserializeBinaryFromReader);
                    (_instance.matchedIntents = _instance.matchedIntents || []).push(messageInitializer2);
                    break;
                case 3:
                    const messageInitializer3 = new EntityType();
                    _reader.readMessage(messageInitializer3, EntityType.deserializeBinaryFromReader);
                    (_instance.matchedEntityTypes =
                        _instance.matchedEntityTypes || []).push(messageInitializer3);
                    break;
                case 4:
                    _instance.minIntentsConfidenceMin = _reader.readFloat();
                    break;
                case 5:
                    _instance.minIntentsConfidenceMax = _reader.readFloat();
                    break;
                case 6:
                    _instance.minEntityTypesConfidenceMin = _reader.readFloat();
                    break;
                case 7:
                    _instance.minEntityTypesConfidenceMax = _reader.readFloat();
                    break;
                case 8:
                    _instance.earliest = _reader.readFloat();
                    break;
                case 9:
                    _instance.latest = _reader.readFloat();
                    break;
                case 10:
                    _instance.minNumberTurns = _reader.readInt32();
                    break;
                case 11:
                    _instance.maxNumberTurns = _reader.readInt32();
                    break;
                case 12:
                    (_instance.labels = _instance.labels || []).push(_reader.readString());
                    break;
                case 13:
                    (_instance.userIds = _instance.userIds || []).push(_reader.readString());
                    break;
                case 14:
                    (_instance.intentTags = _instance.intentTags || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        SessionFilter.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.languageCodes && _instance.languageCodes.length) {
            _writer.writeRepeatedString(1, _instance.languageCodes);
        }
        if (_instance.matchedIntents && _instance.matchedIntents.length) {
            _writer.writeRepeatedMessage(2, _instance.matchedIntents, Intent.serializeBinaryToWriter);
        }
        if (_instance.matchedEntityTypes && _instance.matchedEntityTypes.length) {
            _writer.writeRepeatedMessage(3, _instance.matchedEntityTypes, EntityType.serializeBinaryToWriter);
        }
        if (_instance.minIntentsConfidenceMin) {
            _writer.writeFloat(4, _instance.minIntentsConfidenceMin);
        }
        if (_instance.minIntentsConfidenceMax) {
            _writer.writeFloat(5, _instance.minIntentsConfidenceMax);
        }
        if (_instance.minEntityTypesConfidenceMin) {
            _writer.writeFloat(6, _instance.minEntityTypesConfidenceMin);
        }
        if (_instance.minEntityTypesConfidenceMax) {
            _writer.writeFloat(7, _instance.minEntityTypesConfidenceMax);
        }
        if (_instance.earliest) {
            _writer.writeFloat(8, _instance.earliest);
        }
        if (_instance.latest) {
            _writer.writeFloat(9, _instance.latest);
        }
        if (_instance.minNumberTurns) {
            _writer.writeInt32(10, _instance.minNumberTurns);
        }
        if (_instance.maxNumberTurns) {
            _writer.writeInt32(11, _instance.maxNumberTurns);
        }
        if (_instance.labels && _instance.labels.length) {
            _writer.writeRepeatedString(12, _instance.labels);
        }
        if (_instance.userIds && _instance.userIds.length) {
            _writer.writeRepeatedString(13, _instance.userIds);
        }
        if (_instance.intentTags && _instance.intentTags.length) {
            _writer.writeRepeatedString(14, _instance.intentTags);
        }
    }
    get languageCodes() {
        return this._languageCodes;
    }
    set languageCodes(value) {
        this._languageCodes = value;
    }
    get matchedIntents() {
        return this._matchedIntents;
    }
    set matchedIntents(value) {
        this._matchedIntents = value;
    }
    get matchedEntityTypes() {
        return this._matchedEntityTypes;
    }
    set matchedEntityTypes(value) {
        this._matchedEntityTypes = value;
    }
    get minIntentsConfidenceMin() {
        return this._minIntentsConfidenceMin;
    }
    set minIntentsConfidenceMin(value) {
        this._minIntentsConfidenceMin = value;
    }
    get minIntentsConfidenceMax() {
        return this._minIntentsConfidenceMax;
    }
    set minIntentsConfidenceMax(value) {
        this._minIntentsConfidenceMax = value;
    }
    get minEntityTypesConfidenceMin() {
        return this._minEntityTypesConfidenceMin;
    }
    set minEntityTypesConfidenceMin(value) {
        this._minEntityTypesConfidenceMin = value;
    }
    get minEntityTypesConfidenceMax() {
        return this._minEntityTypesConfidenceMax;
    }
    set minEntityTypesConfidenceMax(value) {
        this._minEntityTypesConfidenceMax = value;
    }
    get earliest() {
        return this._earliest;
    }
    set earliest(value) {
        this._earliest = value;
    }
    get latest() {
        return this._latest;
    }
    set latest(value) {
        this._latest = value;
    }
    get minNumberTurns() {
        return this._minNumberTurns;
    }
    set minNumberTurns(value) {
        this._minNumberTurns = value;
    }
    get maxNumberTurns() {
        return this._maxNumberTurns;
    }
    set maxNumberTurns(value) {
        this._maxNumberTurns = value;
    }
    get labels() {
        return this._labels;
    }
    set labels(value) {
        this._labels = value;
    }
    get userIds() {
        return this._userIds;
    }
    set userIds(value) {
        this._userIds = value;
    }
    get intentTags() {
        return this._intentTags;
    }
    set intentTags(value) {
        this._intentTags = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SessionFilter.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            languageCodes: (this.languageCodes || []).slice(),
            matchedIntents: (this.matchedIntents || []).map(m => m.toObject()),
            matchedEntityTypes: (this.matchedEntityTypes || []).map(m => m.toObject()),
            minIntentsConfidenceMin: this.minIntentsConfidenceMin,
            minIntentsConfidenceMax: this.minIntentsConfidenceMax,
            minEntityTypesConfidenceMin: this.minEntityTypesConfidenceMin,
            minEntityTypesConfidenceMax: this.minEntityTypesConfidenceMax,
            earliest: this.earliest,
            latest: this.latest,
            minNumberTurns: this.minNumberTurns,
            maxNumberTurns: this.maxNumberTurns,
            labels: (this.labels || []).slice(),
            userIds: (this.userIds || []).slice(),
            intentTags: (this.intentTags || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            languageCodes: (this.languageCodes || []).slice(),
            matchedIntents: (this.matchedIntents || []).map(m => m.toProtobufJSON(options)),
            matchedEntityTypes: (this.matchedEntityTypes || []).map(m => m.toProtobufJSON(options)),
            minIntentsConfidenceMin: this.minIntentsConfidenceMin,
            minIntentsConfidenceMax: this.minIntentsConfidenceMax,
            minEntityTypesConfidenceMin: this.minEntityTypesConfidenceMin,
            minEntityTypesConfidenceMax: this.minEntityTypesConfidenceMax,
            earliest: this.earliest,
            latest: this.latest,
            minNumberTurns: this.minNumberTurns,
            maxNumberTurns: this.maxNumberTurns,
            labels: (this.labels || []).slice(),
            userIds: (this.userIds || []).slice(),
            intentTags: (this.intentTags || []).slice()
        };
    }
}
SessionFilter.id = 'ondewo.nlu.SessionFilter';
/**
 * Message implementation for ondewo.nlu.SessionInfo
 */
class SessionInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SessionInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.languageCodes = (_value.languageCodes || []).slice();
        this.matchedIntents = (_value.matchedIntents || []).map(m => new Intent(m));
        this.matchedEntityTypes = (_value.matchedEntityTypes || []).map(m => new EntityType(m));
        this.minIntentsConfidence = _value.minIntentsConfidence;
        this.minEntityTypesConfidence = _value.minEntityTypesConfidence;
        this.earliest = _value.earliest;
        this.latest = _value.latest;
        this.numberTurns = _value.numberTurns;
        this.labels = (_value.labels || []).slice();
        this.userIds = (_value.userIds || []).slice();
        this.intentTags = (_value.intentTags || []).slice();
        SessionInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SessionInfo();
        SessionInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.languageCodes = _instance.languageCodes || [];
        _instance.matchedIntents = _instance.matchedIntents || [];
        _instance.matchedEntityTypes = _instance.matchedEntityTypes || [];
        _instance.minIntentsConfidence = _instance.minIntentsConfidence || 0;
        _instance.minEntityTypesConfidence =
            _instance.minEntityTypesConfidence || 0;
        _instance.earliest = _instance.earliest || 0;
        _instance.latest = _instance.latest || 0;
        _instance.numberTurns = _instance.numberTurns || 0;
        _instance.labels = _instance.labels || [];
        _instance.userIds = _instance.userIds || [];
        _instance.intentTags = _instance.intentTags || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.languageCodes = _instance.languageCodes || []).push(_reader.readString());
                    break;
                case 2:
                    const messageInitializer2 = new Intent();
                    _reader.readMessage(messageInitializer2, Intent.deserializeBinaryFromReader);
                    (_instance.matchedIntents = _instance.matchedIntents || []).push(messageInitializer2);
                    break;
                case 3:
                    const messageInitializer3 = new EntityType();
                    _reader.readMessage(messageInitializer3, EntityType.deserializeBinaryFromReader);
                    (_instance.matchedEntityTypes =
                        _instance.matchedEntityTypes || []).push(messageInitializer3);
                    break;
                case 4:
                    _instance.minIntentsConfidence = _reader.readFloat();
                    break;
                case 5:
                    _instance.minEntityTypesConfidence = _reader.readFloat();
                    break;
                case 6:
                    _instance.earliest = _reader.readFloat();
                    break;
                case 7:
                    _instance.latest = _reader.readFloat();
                    break;
                case 8:
                    _instance.numberTurns = _reader.readInt32();
                    break;
                case 9:
                    (_instance.labels = _instance.labels || []).push(_reader.readString());
                    break;
                case 10:
                    (_instance.userIds = _instance.userIds || []).push(_reader.readString());
                    break;
                case 11:
                    (_instance.intentTags = _instance.intentTags || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        SessionInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.languageCodes && _instance.languageCodes.length) {
            _writer.writeRepeatedString(1, _instance.languageCodes);
        }
        if (_instance.matchedIntents && _instance.matchedIntents.length) {
            _writer.writeRepeatedMessage(2, _instance.matchedIntents, Intent.serializeBinaryToWriter);
        }
        if (_instance.matchedEntityTypes && _instance.matchedEntityTypes.length) {
            _writer.writeRepeatedMessage(3, _instance.matchedEntityTypes, EntityType.serializeBinaryToWriter);
        }
        if (_instance.minIntentsConfidence) {
            _writer.writeFloat(4, _instance.minIntentsConfidence);
        }
        if (_instance.minEntityTypesConfidence) {
            _writer.writeFloat(5, _instance.minEntityTypesConfidence);
        }
        if (_instance.earliest) {
            _writer.writeFloat(6, _instance.earliest);
        }
        if (_instance.latest) {
            _writer.writeFloat(7, _instance.latest);
        }
        if (_instance.numberTurns) {
            _writer.writeInt32(8, _instance.numberTurns);
        }
        if (_instance.labels && _instance.labels.length) {
            _writer.writeRepeatedString(9, _instance.labels);
        }
        if (_instance.userIds && _instance.userIds.length) {
            _writer.writeRepeatedString(10, _instance.userIds);
        }
        if (_instance.intentTags && _instance.intentTags.length) {
            _writer.writeRepeatedString(11, _instance.intentTags);
        }
    }
    get languageCodes() {
        return this._languageCodes;
    }
    set languageCodes(value) {
        this._languageCodes = value;
    }
    get matchedIntents() {
        return this._matchedIntents;
    }
    set matchedIntents(value) {
        this._matchedIntents = value;
    }
    get matchedEntityTypes() {
        return this._matchedEntityTypes;
    }
    set matchedEntityTypes(value) {
        this._matchedEntityTypes = value;
    }
    get minIntentsConfidence() {
        return this._minIntentsConfidence;
    }
    set minIntentsConfidence(value) {
        this._minIntentsConfidence = value;
    }
    get minEntityTypesConfidence() {
        return this._minEntityTypesConfidence;
    }
    set minEntityTypesConfidence(value) {
        this._minEntityTypesConfidence = value;
    }
    get earliest() {
        return this._earliest;
    }
    set earliest(value) {
        this._earliest = value;
    }
    get latest() {
        return this._latest;
    }
    set latest(value) {
        this._latest = value;
    }
    get numberTurns() {
        return this._numberTurns;
    }
    set numberTurns(value) {
        this._numberTurns = value;
    }
    get labels() {
        return this._labels;
    }
    set labels(value) {
        this._labels = value;
    }
    get userIds() {
        return this._userIds;
    }
    set userIds(value) {
        this._userIds = value;
    }
    get intentTags() {
        return this._intentTags;
    }
    set intentTags(value) {
        this._intentTags = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SessionInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            languageCodes: (this.languageCodes || []).slice(),
            matchedIntents: (this.matchedIntents || []).map(m => m.toObject()),
            matchedEntityTypes: (this.matchedEntityTypes || []).map(m => m.toObject()),
            minIntentsConfidence: this.minIntentsConfidence,
            minEntityTypesConfidence: this.minEntityTypesConfidence,
            earliest: this.earliest,
            latest: this.latest,
            numberTurns: this.numberTurns,
            labels: (this.labels || []).slice(),
            userIds: (this.userIds || []).slice(),
            intentTags: (this.intentTags || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            languageCodes: (this.languageCodes || []).slice(),
            matchedIntents: (this.matchedIntents || []).map(m => m.toProtobufJSON(options)),
            matchedEntityTypes: (this.matchedEntityTypes || []).map(m => m.toProtobufJSON(options)),
            minIntentsConfidence: this.minIntentsConfidence,
            minEntityTypesConfidence: this.minEntityTypesConfidence,
            earliest: this.earliest,
            latest: this.latest,
            numberTurns: this.numberTurns,
            labels: (this.labels || []).slice(),
            userIds: (this.userIds || []).slice(),
            intentTags: (this.intentTags || []).slice()
        };
    }
}
SessionInfo.id = 'ondewo.nlu.SessionInfo';
/**
 * Message implementation for ondewo.nlu.ListSessionsResponse
 */
class ListSessionsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListSessionsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessions = (_value.sessions || []).map(m => new Session(m));
        this.nextPageToken = _value.nextPageToken;
        ListSessionsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListSessionsResponse();
        ListSessionsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessions = _instance.sessions || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Session();
                    _reader.readMessage(messageInitializer1, Session.deserializeBinaryFromReader);
                    (_instance.sessions = _instance.sessions || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListSessionsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessions && _instance.sessions.length) {
            _writer.writeRepeatedMessage(1, _instance.sessions, Session.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get sessions() {
        return this._sessions;
    }
    set sessions(value) {
        this._sessions = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListSessionsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessions: (this.sessions || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessions: (this.sessions || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListSessionsResponse.id = 'ondewo.nlu.ListSessionsResponse';
/**
 * Message implementation for ondewo.nlu.GetSessionRequest
 */
class GetSessionRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetSessionRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.sessionView = _value.sessionView;
        GetSessionRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetSessionRequest();
        GetSessionRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.sessionView = _instance.sessionView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    _instance.sessionView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetSessionRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.sessionView) {
            _writer.writeEnum(2, _instance.sessionView);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get sessionView() {
        return this._sessionView;
    }
    set sessionView(value) {
        this._sessionView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetSessionRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            sessionView: this.sessionView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            sessionView: Session.View[this.sessionView === null || this.sessionView === undefined
                ? 0
                : this.sessionView]
        };
    }
}
GetSessionRequest.id = 'ondewo.nlu.GetSessionRequest';
/**
 * Message implementation for ondewo.nlu.CreateSessionRequest
 */
class CreateSessionRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateSessionRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.sessionUuid = _value.sessionUuid;
        CreateSessionRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateSessionRequest();
        CreateSessionRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.sessionUuid = _instance.sessionUuid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.sessionUuid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateSessionRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.sessionUuid) {
            _writer.writeString(2, _instance.sessionUuid);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get sessionUuid() {
        return this._sessionUuid;
    }
    set sessionUuid(value) {
        this._sessionUuid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateSessionRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            sessionUuid: this.sessionUuid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            sessionUuid: this.sessionUuid
        };
    }
}
CreateSessionRequest.id = 'ondewo.nlu.CreateSessionRequest';
/**
 * Message implementation for ondewo.nlu.DeleteSessionRequest
 */
class DeleteSessionRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteSessionRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        DeleteSessionRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteSessionRequest();
        DeleteSessionRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteSessionRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteSessionRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId
        };
    }
}
DeleteSessionRequest.id = 'ondewo.nlu.DeleteSessionRequest';
/**
 * Message implementation for ondewo.nlu.CreateSessionReviewRequest
 */
class CreateSessionReviewRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateSessionReviewRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.parentReviewId = _value.parentReviewId;
        this.sessionReview = _value.sessionReview
            ? new SessionReview(_value.sessionReview)
            : undefined;
        this.sessionReviewView = _value.sessionReviewView;
        CreateSessionReviewRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateSessionReviewRequest();
        CreateSessionReviewRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.parentReviewId = _instance.parentReviewId || '';
        _instance.sessionReview = _instance.sessionReview || undefined;
        _instance.sessionReviewView = _instance.sessionReviewView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    _instance.parentReviewId = _reader.readString();
                    break;
                case 3:
                    _instance.sessionReview = new SessionReview();
                    _reader.readMessage(_instance.sessionReview, SessionReview.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.sessionReviewView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateSessionReviewRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.parentReviewId) {
            _writer.writeString(2, _instance.parentReviewId);
        }
        if (_instance.sessionReview) {
            _writer.writeMessage(3, _instance.sessionReview, SessionReview.serializeBinaryToWriter);
        }
        if (_instance.sessionReviewView) {
            _writer.writeEnum(4, _instance.sessionReviewView);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get parentReviewId() {
        return this._parentReviewId;
    }
    set parentReviewId(value) {
        this._parentReviewId = value;
    }
    get sessionReview() {
        return this._sessionReview;
    }
    set sessionReview(value) {
        this._sessionReview = value;
    }
    get sessionReviewView() {
        return this._sessionReviewView;
    }
    set sessionReviewView(value) {
        this._sessionReviewView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateSessionReviewRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            parentReviewId: this.parentReviewId,
            sessionReview: this.sessionReview
                ? this.sessionReview.toObject()
                : undefined,
            sessionReviewView: this.sessionReviewView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            parentReviewId: this.parentReviewId,
            sessionReview: this.sessionReview
                ? this.sessionReview.toProtobufJSON(options)
                : null,
            sessionReviewView: SessionReview.View[this.sessionReviewView === null ||
                this.sessionReviewView === undefined
                ? 0
                : this.sessionReviewView]
        };
    }
}
CreateSessionReviewRequest.id = 'ondewo.nlu.CreateSessionReviewRequest';
/**
 * Message implementation for ondewo.nlu.SessionReview
 */
class SessionReview {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SessionReview to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionReviewId = _value.sessionReviewId;
        this.sessionReviewSteps = (_value.sessionReviewSteps || []).map(m => new SessionReviewStep(m));
        SessionReview.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SessionReview();
        SessionReview.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionReviewId = _instance.sessionReviewId || '';
        _instance.sessionReviewSteps = _instance.sessionReviewSteps || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionReviewId = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new SessionReviewStep();
                    _reader.readMessage(messageInitializer2, SessionReviewStep.deserializeBinaryFromReader);
                    (_instance.sessionReviewSteps =
                        _instance.sessionReviewSteps || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SessionReview.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionReviewId) {
            _writer.writeString(1, _instance.sessionReviewId);
        }
        if (_instance.sessionReviewSteps && _instance.sessionReviewSteps.length) {
            _writer.writeRepeatedMessage(2, _instance.sessionReviewSteps, SessionReviewStep.serializeBinaryToWriter);
        }
    }
    get sessionReviewId() {
        return this._sessionReviewId;
    }
    set sessionReviewId(value) {
        this._sessionReviewId = value;
    }
    get sessionReviewSteps() {
        return this._sessionReviewSteps;
    }
    set sessionReviewSteps(value) {
        this._sessionReviewSteps = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SessionReview.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionReviewId: this.sessionReviewId,
            sessionReviewSteps: (this.sessionReviewSteps || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionReviewId: this.sessionReviewId,
            sessionReviewSteps: (this.sessionReviewSteps || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SessionReview.id = 'ondewo.nlu.SessionReview';
(function (SessionReview) {
    let View;
    (function (View) {
        View[View["VIEW_UNSPECIFIED"] = 0] = "VIEW_UNSPECIFIED";
        View[View["VIEW_FULL"] = 1] = "VIEW_FULL";
        View[View["VIEW_SPARSE"] = 2] = "VIEW_SPARSE";
    })(View = SessionReview.View || (SessionReview.View = {}));
})(SessionReview || (SessionReview = {}));
/**
 * Message implementation for ondewo.nlu.SessionReviewStep
 */
class SessionReviewStep {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SessionReviewStep to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.annotatedUsersays = _value.annotatedUsersays
            ? new Intent.TrainingPhrase(_value.annotatedUsersays)
            : undefined;
        this.languageCode = _value.languageCode;
        this.detectedIntents = (_value.detectedIntents || []).map(m => new DetectedIntent(m));
        this.contexts = (_value.contexts || []).map(m => new Context(m));
        this.contextsOut = (_value.contextsOut || []).map(m => new Context(m));
        SessionReviewStep.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SessionReviewStep();
        SessionReviewStep.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.annotatedUsersays = _instance.annotatedUsersays || undefined;
        _instance.languageCode = _instance.languageCode || '';
        _instance.detectedIntents = _instance.detectedIntents || [];
        _instance.contexts = _instance.contexts || [];
        _instance.contextsOut = _instance.contextsOut || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.annotatedUsersays = new Intent.TrainingPhrase();
                    _reader.readMessage(_instance.annotatedUsersays, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    const messageInitializer3 = new DetectedIntent();
                    _reader.readMessage(messageInitializer3, DetectedIntent.deserializeBinaryFromReader);
                    (_instance.detectedIntents = _instance.detectedIntents || []).push(messageInitializer3);
                    break;
                case 4:
                    const messageInitializer4 = new Context();
                    _reader.readMessage(messageInitializer4, Context.deserializeBinaryFromReader);
                    (_instance.contexts = _instance.contexts || []).push(messageInitializer4);
                    break;
                case 5:
                    const messageInitializer5 = new Context();
                    _reader.readMessage(messageInitializer5, Context.deserializeBinaryFromReader);
                    (_instance.contextsOut = _instance.contextsOut || []).push(messageInitializer5);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SessionReviewStep.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.annotatedUsersays) {
            _writer.writeMessage(1, _instance.annotatedUsersays, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.detectedIntents && _instance.detectedIntents.length) {
            _writer.writeRepeatedMessage(3, _instance.detectedIntents, DetectedIntent.serializeBinaryToWriter);
        }
        if (_instance.contexts && _instance.contexts.length) {
            _writer.writeRepeatedMessage(4, _instance.contexts, Context.serializeBinaryToWriter);
        }
        if (_instance.contextsOut && _instance.contextsOut.length) {
            _writer.writeRepeatedMessage(5, _instance.contextsOut, Context.serializeBinaryToWriter);
        }
    }
    get annotatedUsersays() {
        return this._annotatedUsersays;
    }
    set annotatedUsersays(value) {
        this._annotatedUsersays = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get detectedIntents() {
        return this._detectedIntents;
    }
    set detectedIntents(value) {
        this._detectedIntents = value;
    }
    get contexts() {
        return this._contexts;
    }
    set contexts(value) {
        this._contexts = value;
    }
    get contextsOut() {
        return this._contextsOut;
    }
    set contextsOut(value) {
        this._contextsOut = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SessionReviewStep.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            annotatedUsersays: this.annotatedUsersays
                ? this.annotatedUsersays.toObject()
                : undefined,
            languageCode: this.languageCode,
            detectedIntents: (this.detectedIntents || []).map(m => m.toObject()),
            contexts: (this.contexts || []).map(m => m.toObject()),
            contextsOut: (this.contextsOut || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            annotatedUsersays: this.annotatedUsersays
                ? this.annotatedUsersays.toProtobufJSON(options)
                : null,
            languageCode: this.languageCode,
            detectedIntents: (this.detectedIntents || []).map(m => m.toProtobufJSON(options)),
            contexts: (this.contexts || []).map(m => m.toProtobufJSON(options)),
            contextsOut: (this.contextsOut || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SessionReviewStep.id = 'ondewo.nlu.SessionReviewStep';
/**
 * Message implementation for ondewo.nlu.DetectedIntent
 */
class DetectedIntent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DetectedIntent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intent = _value.intent
            ? new Intent(_value.intent)
            : undefined;
        this.score = _value.score;
        this.algorithm = _value.algorithm;
        this.fulfillmentMessages = (_value.fulfillmentMessages || []).map(m => new Intent.Message(m));
        this.requiredParamMissing = _value.requiredParamMissing;
        DetectedIntent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DetectedIntent();
        DetectedIntent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intent = _instance.intent || undefined;
        _instance.score = _instance.score || 0;
        _instance.algorithm = _instance.algorithm || '';
        _instance.fulfillmentMessages = _instance.fulfillmentMessages || [];
        _instance.requiredParamMissing = _instance.requiredParamMissing || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intent = new Intent();
                    _reader.readMessage(_instance.intent, Intent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.score = _reader.readFloat();
                    break;
                case 3:
                    _instance.algorithm = _reader.readString();
                    break;
                case 4:
                    const messageInitializer4 = new Intent.Message();
                    _reader.readMessage(messageInitializer4, Intent.Message.deserializeBinaryFromReader);
                    (_instance.fulfillmentMessages =
                        _instance.fulfillmentMessages || []).push(messageInitializer4);
                    break;
                case 5:
                    _instance.requiredParamMissing = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DetectedIntent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intent) {
            _writer.writeMessage(1, _instance.intent, Intent.serializeBinaryToWriter);
        }
        if (_instance.score) {
            _writer.writeFloat(2, _instance.score);
        }
        if (_instance.algorithm) {
            _writer.writeString(3, _instance.algorithm);
        }
        if (_instance.fulfillmentMessages && _instance.fulfillmentMessages.length) {
            _writer.writeRepeatedMessage(4, _instance.fulfillmentMessages, Intent.Message.serializeBinaryToWriter);
        }
        if (_instance.requiredParamMissing) {
            _writer.writeBool(5, _instance.requiredParamMissing);
        }
    }
    get intent() {
        return this._intent;
    }
    set intent(value) {
        this._intent = value;
    }
    get score() {
        return this._score;
    }
    set score(value) {
        this._score = value;
    }
    get algorithm() {
        return this._algorithm;
    }
    set algorithm(value) {
        this._algorithm = value;
    }
    get fulfillmentMessages() {
        return this._fulfillmentMessages;
    }
    set fulfillmentMessages(value) {
        this._fulfillmentMessages = value;
    }
    get requiredParamMissing() {
        return this._requiredParamMissing;
    }
    set requiredParamMissing(value) {
        this._requiredParamMissing = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DetectedIntent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intent: this.intent ? this.intent.toObject() : undefined,
            score: this.score,
            algorithm: this.algorithm,
            fulfillmentMessages: (this.fulfillmentMessages || []).map(m => m.toObject()),
            requiredParamMissing: this.requiredParamMissing
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intent: this.intent ? this.intent.toProtobufJSON(options) : null,
            score: this.score,
            algorithm: this.algorithm,
            fulfillmentMessages: (this.fulfillmentMessages || []).map(m => m.toProtobufJSON(options)),
            requiredParamMissing: this.requiredParamMissing
        };
    }
}
DetectedIntent.id = 'ondewo.nlu.DetectedIntent';
/**
 * Message implementation for ondewo.nlu.ListSessionLabelsRequest
 */
class ListSessionLabelsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListSessionLabelsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        ListSessionLabelsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListSessionLabelsRequest();
        ListSessionLabelsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListSessionLabelsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListSessionLabelsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent
        };
    }
}
ListSessionLabelsRequest.id = 'ondewo.nlu.ListSessionLabelsRequest';
/**
 * Message implementation for ondewo.nlu.ListSessionLabelsResponse
 */
class ListSessionLabelsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListSessionLabelsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.labels = (_value.labels || []).slice();
        ListSessionLabelsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListSessionLabelsResponse();
        ListSessionLabelsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.labels = _instance.labels || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.labels = _instance.labels || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListSessionLabelsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.labels && _instance.labels.length) {
            _writer.writeRepeatedString(1, _instance.labels);
        }
    }
    get labels() {
        return this._labels;
    }
    set labels(value) {
        this._labels = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListSessionLabelsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            labels: (this.labels || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            labels: (this.labels || []).slice()
        };
    }
}
ListSessionLabelsResponse.id = 'ondewo.nlu.ListSessionLabelsResponse';
/**
 * Message implementation for ondewo.nlu.AddSessionLabelsRequest
 */
class AddSessionLabelsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddSessionLabelsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.labels = (_value.labels || []).slice();
        this.sessionView = _value.sessionView;
        AddSessionLabelsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddSessionLabelsRequest();
        AddSessionLabelsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.labels = _instance.labels || [];
        _instance.sessionView = _instance.sessionView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    (_instance.labels = _instance.labels || []).push(_reader.readString());
                    break;
                case 3:
                    _instance.sessionView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddSessionLabelsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.labels && _instance.labels.length) {
            _writer.writeRepeatedString(2, _instance.labels);
        }
        if (_instance.sessionView) {
            _writer.writeEnum(3, _instance.sessionView);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get labels() {
        return this._labels;
    }
    set labels(value) {
        this._labels = value;
    }
    get sessionView() {
        return this._sessionView;
    }
    set sessionView(value) {
        this._sessionView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddSessionLabelsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            labels: (this.labels || []).slice(),
            sessionView: this.sessionView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            labels: (this.labels || []).slice(),
            sessionView: Session.View[this.sessionView === null || this.sessionView === undefined
                ? 0
                : this.sessionView]
        };
    }
}
AddSessionLabelsRequest.id = 'ondewo.nlu.AddSessionLabelsRequest';
/**
 * Message implementation for ondewo.nlu.RemoveSessionLabelsRequest
 */
class RemoveSessionLabelsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveSessionLabelsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.labels = (_value.labels || []).slice();
        this.sessionView = _value.sessionView;
        RemoveSessionLabelsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveSessionLabelsRequest();
        RemoveSessionLabelsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.labels = _instance.labels || [];
        _instance.sessionView = _instance.sessionView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    (_instance.labels = _instance.labels || []).push(_reader.readString());
                    break;
                case 3:
                    _instance.sessionView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemoveSessionLabelsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.labels && _instance.labels.length) {
            _writer.writeRepeatedString(2, _instance.labels);
        }
        if (_instance.sessionView) {
            _writer.writeEnum(3, _instance.sessionView);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get labels() {
        return this._labels;
    }
    set labels(value) {
        this._labels = value;
    }
    get sessionView() {
        return this._sessionView;
    }
    set sessionView(value) {
        this._sessionView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveSessionLabelsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            labels: (this.labels || []).slice(),
            sessionView: this.sessionView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            labels: (this.labels || []).slice(),
            sessionView: Session.View[this.sessionView === null || this.sessionView === undefined
                ? 0
                : this.sessionView]
        };
    }
}
RemoveSessionLabelsRequest.id = 'ondewo.nlu.RemoveSessionLabelsRequest';
/**
 * Message implementation for ondewo.nlu.ListSessionReviewsRequest
 */
class ListSessionReviewsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListSessionReviewsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.sessionReviewView = _value.sessionReviewView;
        this.pageToken = _value.pageToken;
        ListSessionReviewsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListSessionReviewsRequest();
        ListSessionReviewsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.sessionReviewView = _instance.sessionReviewView || 0;
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    _instance.sessionReviewView = _reader.readEnum();
                    break;
                case 4:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListSessionReviewsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.sessionReviewView) {
            _writer.writeEnum(2, _instance.sessionReviewView);
        }
        if (_instance.pageToken) {
            _writer.writeString(4, _instance.pageToken);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get sessionReviewView() {
        return this._sessionReviewView;
    }
    set sessionReviewView(value) {
        this._sessionReviewView = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListSessionReviewsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            sessionReviewView: this.sessionReviewView,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            sessionReviewView: SessionReview.View[this.sessionReviewView === null ||
                this.sessionReviewView === undefined
                ? 0
                : this.sessionReviewView],
            pageToken: this.pageToken
        };
    }
}
ListSessionReviewsRequest.id = 'ondewo.nlu.ListSessionReviewsRequest';
/**
 * Message implementation for ondewo.nlu.ListSessionReviewsResponse
 */
class ListSessionReviewsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListSessionReviewsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionReviews = (_value.sessionReviews || []).map(m => new SessionReview(m));
        this.nextPageToken = _value.nextPageToken;
        ListSessionReviewsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListSessionReviewsResponse();
        ListSessionReviewsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionReviews = _instance.sessionReviews || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new SessionReview();
                    _reader.readMessage(messageInitializer1, SessionReview.deserializeBinaryFromReader);
                    (_instance.sessionReviews = _instance.sessionReviews || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListSessionReviewsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionReviews && _instance.sessionReviews.length) {
            _writer.writeRepeatedMessage(1, _instance.sessionReviews, SessionReview.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get sessionReviews() {
        return this._sessionReviews;
    }
    set sessionReviews(value) {
        this._sessionReviews = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListSessionReviewsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionReviews: (this.sessionReviews || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionReviews: (this.sessionReviews || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListSessionReviewsResponse.id = 'ondewo.nlu.ListSessionReviewsResponse';
/**
 * Message implementation for ondewo.nlu.GetSessionReviewRequest
 */
class GetSessionReviewRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetSessionReviewRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionReviewId = _value.sessionReviewId;
        this.sessionReviewView = _value.sessionReviewView;
        GetSessionReviewRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetSessionReviewRequest();
        GetSessionReviewRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionReviewId = _instance.sessionReviewId || '';
        _instance.sessionReviewView = _instance.sessionReviewView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionReviewId = _reader.readString();
                    break;
                case 2:
                    _instance.sessionReviewView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetSessionReviewRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionReviewId) {
            _writer.writeString(1, _instance.sessionReviewId);
        }
        if (_instance.sessionReviewView) {
            _writer.writeEnum(2, _instance.sessionReviewView);
        }
    }
    get sessionReviewId() {
        return this._sessionReviewId;
    }
    set sessionReviewId(value) {
        this._sessionReviewId = value;
    }
    get sessionReviewView() {
        return this._sessionReviewView;
    }
    set sessionReviewView(value) {
        this._sessionReviewView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetSessionReviewRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionReviewId: this.sessionReviewId,
            sessionReviewView: this.sessionReviewView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionReviewId: this.sessionReviewId,
            sessionReviewView: SessionReview.View[this.sessionReviewView === null ||
                this.sessionReviewView === undefined
                ? 0
                : this.sessionReviewView]
        };
    }
}
GetSessionReviewRequest.id = 'ondewo.nlu.GetSessionReviewRequest';
/**
 * Message implementation for ondewo.nlu.GetLatestSessionReviewRequest
 */
class GetLatestSessionReviewRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetLatestSessionReviewRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.sessionReviewView = _value.sessionReviewView;
        GetLatestSessionReviewRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetLatestSessionReviewRequest();
        GetLatestSessionReviewRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.sessionReviewView = _instance.sessionReviewView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    _instance.sessionReviewView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetLatestSessionReviewRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.sessionReviewView) {
            _writer.writeEnum(2, _instance.sessionReviewView);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get sessionReviewView() {
        return this._sessionReviewView;
    }
    set sessionReviewView(value) {
        this._sessionReviewView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetLatestSessionReviewRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            sessionReviewView: this.sessionReviewView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            sessionReviewView: SessionReview.View[this.sessionReviewView === null ||
                this.sessionReviewView === undefined
                ? 0
                : this.sessionReviewView]
        };
    }
}
GetLatestSessionReviewRequest.id = 'ondewo.nlu.GetLatestSessionReviewRequest';

/**
 * Message implementation for ondewo.nlu.PingRequest
 */
class PingRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PingRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.session = _value.session;
        PingRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PingRequest();
        PingRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.session = _instance.session || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.session = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PingRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.session) {
            _writer.writeString(1, _instance.session);
        }
    }
    get session() {
        return this._session;
    }
    set session(value) {
        this._session = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PingRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            session: this.session
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            session: this.session
        };
    }
}
PingRequest.id = 'ondewo.nlu.PingRequest';
/**
 * Message implementation for ondewo.nlu.WebhookRequest
 */
class WebhookRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of WebhookRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.session = _value.session;
        this.responseId = _value.responseId;
        this.queryResult = _value.queryResult
            ? new QueryResult(_value.queryResult)
            : undefined;
        this.originalDetectIntentRequest = _value.originalDetectIntentRequest
            ? new OriginalDetectIntentRequest(_value.originalDetectIntentRequest)
            : undefined;
        this.headers = _value.headers
            ? new googleProtobuf003.Struct(_value.headers)
            : undefined;
        WebhookRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new WebhookRequest();
        WebhookRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.session = _instance.session || '';
        _instance.responseId = _instance.responseId || '';
        _instance.queryResult = _instance.queryResult || undefined;
        _instance.originalDetectIntentRequest =
            _instance.originalDetectIntentRequest || undefined;
        _instance.headers = _instance.headers || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 4:
                    _instance.session = _reader.readString();
                    break;
                case 1:
                    _instance.responseId = _reader.readString();
                    break;
                case 2:
                    _instance.queryResult = new QueryResult();
                    _reader.readMessage(_instance.queryResult, QueryResult.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.originalDetectIntentRequest = new OriginalDetectIntentRequest();
                    _reader.readMessage(_instance.originalDetectIntentRequest, OriginalDetectIntentRequest.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.headers = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.headers, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        WebhookRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.session) {
            _writer.writeString(4, _instance.session);
        }
        if (_instance.responseId) {
            _writer.writeString(1, _instance.responseId);
        }
        if (_instance.queryResult) {
            _writer.writeMessage(2, _instance.queryResult, QueryResult.serializeBinaryToWriter);
        }
        if (_instance.originalDetectIntentRequest) {
            _writer.writeMessage(3, _instance.originalDetectIntentRequest, OriginalDetectIntentRequest.serializeBinaryToWriter);
        }
        if (_instance.headers) {
            _writer.writeMessage(5, _instance.headers, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
    }
    get session() {
        return this._session;
    }
    set session(value) {
        this._session = value;
    }
    get responseId() {
        return this._responseId;
    }
    set responseId(value) {
        this._responseId = value;
    }
    get queryResult() {
        return this._queryResult;
    }
    set queryResult(value) {
        this._queryResult = value;
    }
    get originalDetectIntentRequest() {
        return this._originalDetectIntentRequest;
    }
    set originalDetectIntentRequest(value) {
        this._originalDetectIntentRequest = value;
    }
    get headers() {
        return this._headers;
    }
    set headers(value) {
        this._headers = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        WebhookRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            session: this.session,
            responseId: this.responseId,
            queryResult: this.queryResult ? this.queryResult.toObject() : undefined,
            originalDetectIntentRequest: this.originalDetectIntentRequest
                ? this.originalDetectIntentRequest.toObject()
                : undefined,
            headers: this.headers ? this.headers.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            session: this.session,
            responseId: this.responseId,
            queryResult: this.queryResult
                ? this.queryResult.toProtobufJSON(options)
                : null,
            originalDetectIntentRequest: this.originalDetectIntentRequest
                ? this.originalDetectIntentRequest.toProtobufJSON(options)
                : null,
            headers: this.headers ? this.headers.toProtobufJSON(options) : null
        };
    }
}
WebhookRequest.id = 'ondewo.nlu.WebhookRequest';
/**
 * Message implementation for ondewo.nlu.WebhookResponse
 */
class WebhookResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of WebhookResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.fulfillmentText = _value.fulfillmentText;
        this.fulfillmentMessages = (_value.fulfillmentMessages || []).map(m => new Intent.Message(m));
        this.source = _value.source;
        this.payload = _value.payload
            ? new googleProtobuf003.Struct(_value.payload)
            : undefined;
        this.outputContexts = (_value.outputContexts || []).map(m => new Context(m));
        this.followupEventInput = _value.followupEventInput
            ? new EventInput(_value.followupEventInput)
            : undefined;
        WebhookResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new WebhookResponse();
        WebhookResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.fulfillmentText = _instance.fulfillmentText || '';
        _instance.fulfillmentMessages = _instance.fulfillmentMessages || [];
        _instance.source = _instance.source || '';
        _instance.payload = _instance.payload || undefined;
        _instance.outputContexts = _instance.outputContexts || [];
        _instance.followupEventInput = _instance.followupEventInput || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.fulfillmentText = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new Intent.Message();
                    _reader.readMessage(messageInitializer2, Intent.Message.deserializeBinaryFromReader);
                    (_instance.fulfillmentMessages =
                        _instance.fulfillmentMessages || []).push(messageInitializer2);
                    break;
                case 3:
                    _instance.source = _reader.readString();
                    break;
                case 4:
                    _instance.payload = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.payload, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                case 5:
                    const messageInitializer5 = new Context();
                    _reader.readMessage(messageInitializer5, Context.deserializeBinaryFromReader);
                    (_instance.outputContexts = _instance.outputContexts || []).push(messageInitializer5);
                    break;
                case 6:
                    _instance.followupEventInput = new EventInput();
                    _reader.readMessage(_instance.followupEventInput, EventInput.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        WebhookResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.fulfillmentText) {
            _writer.writeString(1, _instance.fulfillmentText);
        }
        if (_instance.fulfillmentMessages && _instance.fulfillmentMessages.length) {
            _writer.writeRepeatedMessage(2, _instance.fulfillmentMessages, Intent.Message.serializeBinaryToWriter);
        }
        if (_instance.source) {
            _writer.writeString(3, _instance.source);
        }
        if (_instance.payload) {
            _writer.writeMessage(4, _instance.payload, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
        if (_instance.outputContexts && _instance.outputContexts.length) {
            _writer.writeRepeatedMessage(5, _instance.outputContexts, Context.serializeBinaryToWriter);
        }
        if (_instance.followupEventInput) {
            _writer.writeMessage(6, _instance.followupEventInput, EventInput.serializeBinaryToWriter);
        }
    }
    get fulfillmentText() {
        return this._fulfillmentText;
    }
    set fulfillmentText(value) {
        this._fulfillmentText = value;
    }
    get fulfillmentMessages() {
        return this._fulfillmentMessages;
    }
    set fulfillmentMessages(value) {
        this._fulfillmentMessages = value;
    }
    get source() {
        return this._source;
    }
    set source(value) {
        this._source = value;
    }
    get payload() {
        return this._payload;
    }
    set payload(value) {
        this._payload = value;
    }
    get outputContexts() {
        return this._outputContexts;
    }
    set outputContexts(value) {
        this._outputContexts = value;
    }
    get followupEventInput() {
        return this._followupEventInput;
    }
    set followupEventInput(value) {
        this._followupEventInput = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        WebhookResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            fulfillmentText: this.fulfillmentText,
            fulfillmentMessages: (this.fulfillmentMessages || []).map(m => m.toObject()),
            source: this.source,
            payload: this.payload ? this.payload.toObject() : undefined,
            outputContexts: (this.outputContexts || []).map(m => m.toObject()),
            followupEventInput: this.followupEventInput
                ? this.followupEventInput.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            fulfillmentText: this.fulfillmentText,
            fulfillmentMessages: (this.fulfillmentMessages || []).map(m => m.toProtobufJSON(options)),
            source: this.source,
            payload: this.payload ? this.payload.toProtobufJSON(options) : null,
            outputContexts: (this.outputContexts || []).map(m => m.toProtobufJSON(options)),
            followupEventInput: this.followupEventInput
                ? this.followupEventInput.toProtobufJSON(options)
                : null
        };
    }
}
WebhookResponse.id = 'ondewo.nlu.WebhookResponse';
/**
 * Message implementation for ondewo.nlu.OriginalDetectIntentRequest
 */
class OriginalDetectIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of OriginalDetectIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.source = _value.source;
        this.payload = _value.payload
            ? new googleProtobuf003.Struct(_value.payload)
            : undefined;
        OriginalDetectIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new OriginalDetectIntentRequest();
        OriginalDetectIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.source = _instance.source || '';
        _instance.payload = _instance.payload || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.source = _reader.readString();
                    break;
                case 3:
                    _instance.payload = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.payload, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        OriginalDetectIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.source) {
            _writer.writeString(1, _instance.source);
        }
        if (_instance.payload) {
            _writer.writeMessage(3, _instance.payload, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
    }
    get source() {
        return this._source;
    }
    set source(value) {
        this._source = value;
    }
    get payload() {
        return this._payload;
    }
    set payload(value) {
        this._payload = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        OriginalDetectIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            source: this.source,
            payload: this.payload ? this.payload.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            source: this.source,
            payload: this.payload ? this.payload.toProtobufJSON(options) : null
        };
    }
}
OriginalDetectIntentRequest.id = 'ondewo.nlu.OriginalDetectIntentRequest';
/**
 * Message implementation for ondewo.nlu.PingResponse
 */
class PingResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PingResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isReachable = _value.isReachable;
        PingResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PingResponse();
        PingResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isReachable = _instance.isReachable || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isReachable = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PingResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isReachable) {
            _writer.writeBool(1, _instance.isReachable);
        }
    }
    get isReachable() {
        return this._isReachable;
    }
    set isReachable(value) {
        this._isReachable = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PingResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isReachable: this.isReachable
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isReachable: this.isReachable
        };
    }
}
PingResponse.id = 'ondewo.nlu.PingResponse';

/**
 * Message implementation for ondewo.nlu.GetIntentCountRequest
 */
class GetIntentCountRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetIntentCountRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.filterByCategory = _value.filterByCategory;
        GetIntentCountRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetIntentCountRequest();
        GetIntentCountRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.filterByCategory = _instance.filterByCategory || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.filterByCategory = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetIntentCountRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.filterByCategory) {
            _writer.writeEnum(2, _instance.filterByCategory);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetIntentCountRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            filterByCategory: this.filterByCategory
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            filterByCategory: IntentCategory[this.filterByCategory === null || this.filterByCategory === undefined
                ? 0
                : this.filterByCategory]
        };
    }
}
GetIntentCountRequest.id = 'ondewo.nlu.GetIntentCountRequest';
/**
 * Message implementation for ondewo.nlu.GetEntityTypeCountRequest
 */
class GetEntityTypeCountRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetEntityTypeCountRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.filterByCategory = _value.filterByCategory;
        GetEntityTypeCountRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetEntityTypeCountRequest();
        GetEntityTypeCountRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.filterByCategory = _instance.filterByCategory || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.filterByCategory = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetEntityTypeCountRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.filterByCategory) {
            _writer.writeEnum(2, _instance.filterByCategory);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetEntityTypeCountRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            filterByCategory: this.filterByCategory
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            filterByCategory: EntityTypeCategory[this.filterByCategory === null || this.filterByCategory === undefined
                ? 0
                : this.filterByCategory]
        };
    }
}
GetEntityTypeCountRequest.id = 'ondewo.nlu.GetEntityTypeCountRequest';
/**
 * Message implementation for ondewo.nlu.GetProjectStatRequest
 */
class GetProjectStatRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetProjectStatRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        GetProjectStatRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetProjectStatRequest();
        GetProjectStatRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetProjectStatRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetProjectStatRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent
        };
    }
}
GetProjectStatRequest.id = 'ondewo.nlu.GetProjectStatRequest';
/**
 * Message implementation for ondewo.nlu.GetProjectElementStatRequest
 */
class GetProjectElementStatRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetProjectElementStatRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.languageCode = _value.languageCode;
        GetProjectElementStatRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetProjectElementStatRequest();
        GetProjectElementStatRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.languageCode = _instance.languageCode || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetProjectElementStatRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetProjectElementStatRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            languageCode: this.languageCode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            languageCode: this.languageCode
        };
    }
}
GetProjectElementStatRequest.id = 'ondewo.nlu.GetProjectElementStatRequest';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Sessions.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_SESSIONS_CLIENT_SETTINGS = new InjectionToken('GRPC_SESSIONS_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.Sessions
 */
class SessionsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.Sessions/DetectIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.DetectIntentResponse>>
             */
            detectIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/DetectIntent',
                    requestData,
                    requestMetadata,
                    requestClass: DetectIntentRequest,
                    responseClass: DetectIntentResponse
                });
            },
            /**
             * Server streaming RPC for /ondewo.nlu.Sessions/StreamingDetectIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.StreamingDetectIntentResponse>>
             */
            streamingDetectIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.serverStream,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/StreamingDetectIntent',
                    requestData,
                    requestMetadata,
                    requestClass: StreamingDetectIntentRequest,
                    responseClass: StreamingDetectIntentResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/ListSessions
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListSessionsResponse>>
             */
            listSessions: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/ListSessions',
                    requestData,
                    requestMetadata,
                    requestClass: ListSessionsRequest,
                    responseClass: ListSessionsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/GetSession
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Session>>
             */
            getSession: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/GetSession',
                    requestData,
                    requestMetadata,
                    requestClass: GetSessionRequest,
                    responseClass: Session
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/CreateSession
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Session>>
             */
            createSession: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/CreateSession',
                    requestData,
                    requestMetadata,
                    requestClass: CreateSessionRequest,
                    responseClass: Session
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/TrackSessionStep
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Session>>
             */
            trackSessionStep: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/TrackSessionStep',
                    requestData,
                    requestMetadata,
                    requestClass: TrackSessionStepRequest,
                    responseClass: Session
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/DeleteSession
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteSession: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/DeleteSession',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteSessionRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/ListSessionLabels
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListSessionLabelsResponse>>
             */
            listSessionLabels: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/ListSessionLabels',
                    requestData,
                    requestMetadata,
                    requestClass: ListSessionLabelsRequest,
                    responseClass: ListSessionLabelsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/AddSessionLabels
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Session>>
             */
            addSessionLabels: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/AddSessionLabels',
                    requestData,
                    requestMetadata,
                    requestClass: AddSessionLabelsRequest,
                    responseClass: Session
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/RemoveSessionLabels
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Session>>
             */
            removeSessionLabels: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/RemoveSessionLabels',
                    requestData,
                    requestMetadata,
                    requestClass: RemoveSessionLabelsRequest,
                    responseClass: Session
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/ListSessionReviews
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListSessionReviewsResponse>>
             */
            listSessionReviews: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/ListSessionReviews',
                    requestData,
                    requestMetadata,
                    requestClass: ListSessionReviewsRequest,
                    responseClass: ListSessionReviewsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/GetSessionReview
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SessionReview>>
             */
            getSessionReview: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/GetSessionReview',
                    requestData,
                    requestMetadata,
                    requestClass: GetSessionReviewRequest,
                    responseClass: SessionReview
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/GetLatestSessionReview
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SessionReview>>
             */
            getLatestSessionReview: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/GetLatestSessionReview',
                    requestData,
                    requestMetadata,
                    requestClass: GetLatestSessionReviewRequest,
                    responseClass: SessionReview
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Sessions/CreateSessionReview
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SessionReview>>
             */
            createSessionReview: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Sessions/CreateSessionReview',
                    requestData,
                    requestMetadata,
                    requestClass: CreateSessionReviewRequest,
                    responseClass: SessionReview
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.Sessions', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/DetectIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.DetectIntentResponse>
     */
    detectIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .detectIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Server streaming RPC for /ondewo.nlu.Sessions/StreamingDetectIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.StreamingDetectIntentResponse>
     */
    streamingDetectIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .streamingDetectIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/ListSessions
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListSessionsResponse>
     */
    listSessions(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listSessions(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/GetSession
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Session>
     */
    getSession(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getSession(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/CreateSession
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Session>
     */
    createSession(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createSession(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/TrackSessionStep
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Session>
     */
    trackSessionStep(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .trackSessionStep(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/DeleteSession
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteSession(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteSession(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/ListSessionLabels
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListSessionLabelsResponse>
     */
    listSessionLabels(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listSessionLabels(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/AddSessionLabels
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Session>
     */
    addSessionLabels(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addSessionLabels(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/RemoveSessionLabels
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Session>
     */
    removeSessionLabels(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .removeSessionLabels(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/ListSessionReviews
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListSessionReviewsResponse>
     */
    listSessionReviews(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listSessionReviews(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/GetSessionReview
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SessionReview>
     */
    getSessionReview(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getSessionReview(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/GetLatestSessionReview
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SessionReview>
     */
    getLatestSessionReview(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getLatestSessionReview(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Sessions/CreateSessionReview
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SessionReview>
     */
    createSessionReview(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createSessionReview(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
SessionsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: SessionsClient, deps: [{ token: GRPC_SESSIONS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
SessionsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: SessionsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: SessionsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_SESSIONS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Specific GrpcClientSettings for ServerStatistics.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_SERVER_STATISTICS_CLIENT_SETTINGS = new InjectionToken('GRPC_SERVER_STATISTICS_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Webhook.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_WEBHOOK_CLIENT_SETTINGS = new InjectionToken('GRPC_WEBHOOK_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.Webhook
 */
class WebhookClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.Webhook/ResponseRefinement
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.WebhookResponse>>
             */
            responseRefinement: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Webhook/ResponseRefinement',
                    requestData,
                    requestMetadata,
                    requestClass: WebhookRequest,
                    responseClass: WebhookResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Webhook/SlotFilling
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.WebhookResponse>>
             */
            slotFilling: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Webhook/SlotFilling',
                    requestData,
                    requestMetadata,
                    requestClass: WebhookRequest,
                    responseClass: WebhookResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Webhook/Ping
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.PingResponse>>
             */
            ping: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Webhook/Ping',
                    requestData,
                    requestMetadata,
                    requestClass: PingRequest,
                    responseClass: PingResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.Webhook', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.Webhook/ResponseRefinement
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.WebhookResponse>
     */
    responseRefinement(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .responseRefinement(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Webhook/SlotFilling
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.WebhookResponse>
     */
    slotFilling(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .slotFilling(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Webhook/Ping
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.PingResponse>
     */
    ping(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .ping(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
WebhookClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: WebhookClient, deps: [{ token: GRPC_WEBHOOK_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
WebhookClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: WebhookClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: WebhookClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_WEBHOOK_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Specific GrpcClientSettings for ProjectStatistics.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS = new InjectionToken('GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.ProjectStatistics
 */
class ProjectStatisticsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetIntentCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getIntentCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetIntentCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetIntentCountRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetEntityTypeCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getEntityTypeCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetEntityTypeCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetEntityTypeCountRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetUserCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getUserCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetUserCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectStatRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetSessionCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getSessionCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetSessionCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectStatRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetTrainingPhraseCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getTrainingPhraseCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetTrainingPhraseCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectElementStatRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetResponseCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getResponseCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetResponseCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectElementStatRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetEntityValueCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getEntityValueCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetEntityValueCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectElementStatRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectStatistics/GetEntitySynonymCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getEntitySynonymCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectStatistics/GetEntitySynonymCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectElementStatRequest,
                    responseClass: StatResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.ProjectStatistics', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetIntentCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getIntentCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getIntentCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetEntityTypeCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getEntityTypeCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getEntityTypeCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetUserCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getUserCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetSessionCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getSessionCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getSessionCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetTrainingPhraseCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getTrainingPhraseCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getTrainingPhraseCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetResponseCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getResponseCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getResponseCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetEntityValueCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getEntityValueCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getEntityValueCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectStatistics/GetEntitySynonymCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getEntitySynonymCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getEntitySynonymCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
ProjectStatisticsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ProjectStatisticsClient, deps: [{ token: GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
ProjectStatisticsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ProjectStatisticsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ProjectStatisticsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Contexts.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_CONTEXTS_CLIENT_SETTINGS = new InjectionToken('GRPC_CONTEXTS_CLIENT_SETTINGS');

/**
 * Message implementation for ondewo.nlu.OperationMetadata
 */
class OperationMetadata {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of OperationMetadata to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.status = _value.status;
        this.parentOperationName = _value.parentOperationName;
        this.subOperationNames = (_value.subOperationNames || []).slice();
        this.createTime = _value.createTime
            ? new googleProtobuf003.Timestamp(_value.createTime)
            : undefined;
        this.startTime = _value.startTime
            ? new googleProtobuf003.Timestamp(_value.startTime)
            : undefined;
        this.endTime = _value.endTime
            ? new googleProtobuf003.Timestamp(_value.endTime)
            : undefined;
        this.isCancellationRequested = _value.isCancellationRequested;
        this.cancelCommand = _value.cancelCommand;
        this.userIdCreated = _value.userIdCreated;
        this.userIdCancelled = _value.userIdCancelled;
        this.projectParent = _value.projectParent;
        this.operationType = _value.operationType;
        this.hostName = _value.hostName;
        this.numReruns = _value.numReruns;
        this.maxNumReruns = _value.maxNumReruns;
        this.description = _value.description;
        OperationMetadata.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new OperationMetadata();
        OperationMetadata.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.status = _instance.status || 0;
        _instance.parentOperationName = _instance.parentOperationName || '';
        _instance.subOperationNames = _instance.subOperationNames || [];
        _instance.createTime = _instance.createTime || undefined;
        _instance.startTime = _instance.startTime || undefined;
        _instance.endTime = _instance.endTime || undefined;
        _instance.isCancellationRequested =
            _instance.isCancellationRequested || false;
        _instance.cancelCommand = _instance.cancelCommand || '';
        _instance.userIdCreated = _instance.userIdCreated || '';
        _instance.userIdCancelled = _instance.userIdCancelled || '';
        _instance.projectParent = _instance.projectParent || '';
        _instance.operationType = _instance.operationType || 0;
        _instance.hostName = _instance.hostName || '';
        _instance.numReruns = _instance.numReruns || 0;
        _instance.maxNumReruns = _instance.maxNumReruns || 0;
        _instance.description = _instance.description || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.status = _reader.readEnum();
                    break;
                case 2:
                    _instance.parentOperationName = _reader.readString();
                    break;
                case 3:
                    (_instance.subOperationNames =
                        _instance.subOperationNames || []).push(_reader.readString());
                    break;
                case 4:
                    _instance.createTime = new googleProtobuf003.Timestamp();
                    _reader.readMessage(_instance.createTime, googleProtobuf003.Timestamp.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.startTime = new googleProtobuf003.Timestamp();
                    _reader.readMessage(_instance.startTime, googleProtobuf003.Timestamp.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.endTime = new googleProtobuf003.Timestamp();
                    _reader.readMessage(_instance.endTime, googleProtobuf003.Timestamp.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.isCancellationRequested = _reader.readBool();
                    break;
                case 8:
                    _instance.cancelCommand = _reader.readString();
                    break;
                case 9:
                    _instance.userIdCreated = _reader.readString();
                    break;
                case 10:
                    _instance.userIdCancelled = _reader.readString();
                    break;
                case 11:
                    _instance.projectParent = _reader.readString();
                    break;
                case 12:
                    _instance.operationType = _reader.readEnum();
                    break;
                case 13:
                    _instance.hostName = _reader.readString();
                    break;
                case 14:
                    _instance.numReruns = _reader.readInt32();
                    break;
                case 15:
                    _instance.maxNumReruns = _reader.readInt32();
                    break;
                case 16:
                    _instance.description = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        OperationMetadata.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.status) {
            _writer.writeEnum(1, _instance.status);
        }
        if (_instance.parentOperationName) {
            _writer.writeString(2, _instance.parentOperationName);
        }
        if (_instance.subOperationNames && _instance.subOperationNames.length) {
            _writer.writeRepeatedString(3, _instance.subOperationNames);
        }
        if (_instance.createTime) {
            _writer.writeMessage(4, _instance.createTime, googleProtobuf003.Timestamp.serializeBinaryToWriter);
        }
        if (_instance.startTime) {
            _writer.writeMessage(5, _instance.startTime, googleProtobuf003.Timestamp.serializeBinaryToWriter);
        }
        if (_instance.endTime) {
            _writer.writeMessage(6, _instance.endTime, googleProtobuf003.Timestamp.serializeBinaryToWriter);
        }
        if (_instance.isCancellationRequested) {
            _writer.writeBool(7, _instance.isCancellationRequested);
        }
        if (_instance.cancelCommand) {
            _writer.writeString(8, _instance.cancelCommand);
        }
        if (_instance.userIdCreated) {
            _writer.writeString(9, _instance.userIdCreated);
        }
        if (_instance.userIdCancelled) {
            _writer.writeString(10, _instance.userIdCancelled);
        }
        if (_instance.projectParent) {
            _writer.writeString(11, _instance.projectParent);
        }
        if (_instance.operationType) {
            _writer.writeEnum(12, _instance.operationType);
        }
        if (_instance.hostName) {
            _writer.writeString(13, _instance.hostName);
        }
        if (_instance.numReruns) {
            _writer.writeInt32(14, _instance.numReruns);
        }
        if (_instance.maxNumReruns) {
            _writer.writeInt32(15, _instance.maxNumReruns);
        }
        if (_instance.description) {
            _writer.writeString(16, _instance.description);
        }
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get parentOperationName() {
        return this._parentOperationName;
    }
    set parentOperationName(value) {
        this._parentOperationName = value;
    }
    get subOperationNames() {
        return this._subOperationNames;
    }
    set subOperationNames(value) {
        this._subOperationNames = value;
    }
    get createTime() {
        return this._createTime;
    }
    set createTime(value) {
        this._createTime = value;
    }
    get startTime() {
        return this._startTime;
    }
    set startTime(value) {
        this._startTime = value;
    }
    get endTime() {
        return this._endTime;
    }
    set endTime(value) {
        this._endTime = value;
    }
    get isCancellationRequested() {
        return this._isCancellationRequested;
    }
    set isCancellationRequested(value) {
        this._isCancellationRequested = value;
    }
    get cancelCommand() {
        return this._cancelCommand;
    }
    set cancelCommand(value) {
        this._cancelCommand = value;
    }
    get userIdCreated() {
        return this._userIdCreated;
    }
    set userIdCreated(value) {
        this._userIdCreated = value;
    }
    get userIdCancelled() {
        return this._userIdCancelled;
    }
    set userIdCancelled(value) {
        this._userIdCancelled = value;
    }
    get projectParent() {
        return this._projectParent;
    }
    set projectParent(value) {
        this._projectParent = value;
    }
    get operationType() {
        return this._operationType;
    }
    set operationType(value) {
        this._operationType = value;
    }
    get hostName() {
        return this._hostName;
    }
    set hostName(value) {
        this._hostName = value;
    }
    get numReruns() {
        return this._numReruns;
    }
    set numReruns(value) {
        this._numReruns = value;
    }
    get maxNumReruns() {
        return this._maxNumReruns;
    }
    set maxNumReruns(value) {
        this._maxNumReruns = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        OperationMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            status: this.status,
            parentOperationName: this.parentOperationName,
            subOperationNames: (this.subOperationNames || []).slice(),
            createTime: this.createTime ? this.createTime.toObject() : undefined,
            startTime: this.startTime ? this.startTime.toObject() : undefined,
            endTime: this.endTime ? this.endTime.toObject() : undefined,
            isCancellationRequested: this.isCancellationRequested,
            cancelCommand: this.cancelCommand,
            userIdCreated: this.userIdCreated,
            userIdCancelled: this.userIdCancelled,
            projectParent: this.projectParent,
            operationType: this.operationType,
            hostName: this.hostName,
            numReruns: this.numReruns,
            maxNumReruns: this.maxNumReruns,
            description: this.description
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            status: OperationMetadata.Status[this.status === null || this.status === undefined ? 0 : this.status],
            parentOperationName: this.parentOperationName,
            subOperationNames: (this.subOperationNames || []).slice(),
            createTime: this.createTime
                ? this.createTime.toProtobufJSON(options)
                : null,
            startTime: this.startTime ? this.startTime.toProtobufJSON(options) : null,
            endTime: this.endTime ? this.endTime.toProtobufJSON(options) : null,
            isCancellationRequested: this.isCancellationRequested,
            cancelCommand: this.cancelCommand,
            userIdCreated: this.userIdCreated,
            userIdCancelled: this.userIdCancelled,
            projectParent: this.projectParent,
            operationType: OperationMetadata.OperationType[this.operationType === null || this.operationType === undefined
                ? 0
                : this.operationType],
            hostName: this.hostName,
            numReruns: this.numReruns,
            maxNumReruns: this.maxNumReruns,
            description: this.description
        };
    }
}
OperationMetadata.id = 'ondewo.nlu.OperationMetadata';
(function (OperationMetadata) {
    let Status;
    (function (Status) {
        Status[Status["STATUS_UNSPECIFIED"] = 0] = "STATUS_UNSPECIFIED";
        Status[Status["NOT_STARTED"] = 1] = "NOT_STARTED";
        Status[Status["IN_PROGRESS"] = 2] = "IN_PROGRESS";
        Status[Status["DONE"] = 3] = "DONE";
        Status[Status["CANCELLED"] = 4] = "CANCELLED";
        Status[Status["FAILED"] = 5] = "FAILED";
    })(Status = OperationMetadata.Status || (OperationMetadata.Status = {}));
    let OperationType;
    (function (OperationType) {
        OperationType[OperationType["OPERATION_TYPE_UNSPECIFIED"] = 0] = "OPERATION_TYPE_UNSPECIFIED";
        OperationType[OperationType["CREATE_AGENT"] = 1] = "CREATE_AGENT";
        OperationType[OperationType["IMPORT_AGENT"] = 2] = "IMPORT_AGENT";
        OperationType[OperationType["EXPORT_AGENT"] = 3] = "EXPORT_AGENT";
        OperationType[OperationType["DELETE_AGENT"] = 4] = "DELETE_AGENT";
        OperationType[OperationType["RESTORE_AGENT"] = 5] = "RESTORE_AGENT";
        OperationType[OperationType["BUILD_AGENT_CACHE"] = 6] = "BUILD_AGENT_CACHE";
        OperationType[OperationType["TRAIN_AGENT"] = 7] = "TRAIN_AGENT";
        OperationType[OperationType["EXPORT_BENCHMARK_AGENT"] = 8] = "EXPORT_BENCHMARK_AGENT";
    })(OperationType = OperationMetadata.OperationType || (OperationMetadata.OperationType = {}));
})(OperationMetadata || (OperationMetadata = {}));

var DefaultProjectRole;
(function (DefaultProjectRole) {
    DefaultProjectRole[DefaultProjectRole["PROJECT_UNSPECIFIED"] = 0] = "PROJECT_UNSPECIFIED";
    DefaultProjectRole[DefaultProjectRole["PROJECT_USER"] = 1] = "PROJECT_USER";
    DefaultProjectRole[DefaultProjectRole["PROJECT_EXECUTOR"] = 2] = "PROJECT_EXECUTOR";
    DefaultProjectRole[DefaultProjectRole["PROJECT_DEVELOPER"] = 3] = "PROJECT_DEVELOPER";
    DefaultProjectRole[DefaultProjectRole["PROJECT_ADMIN"] = 4] = "PROJECT_ADMIN";
    DefaultProjectRole[DefaultProjectRole["PROJECT_INACTIVE"] = 5] = "PROJECT_INACTIVE";
})(DefaultProjectRole || (DefaultProjectRole = {}));
var ProjectRoleView;
(function (ProjectRoleView) {
    ProjectRoleView[ProjectRoleView["PROJECT_ROLE_VIEW_UNSPECIFIED"] = 0] = "PROJECT_ROLE_VIEW_UNSPECIFIED";
    ProjectRoleView[ProjectRoleView["PROJECT_ROLE_VIEW_SHALLOW"] = 1] = "PROJECT_ROLE_VIEW_SHALLOW";
    ProjectRoleView[ProjectRoleView["PROJECT_ROLE_VIEW_FULL"] = 2] = "PROJECT_ROLE_VIEW_FULL";
})(ProjectRoleView || (ProjectRoleView = {}));
/**
 * Message implementation for ondewo.nlu.ProjectRole
 */
class ProjectRole {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ProjectRole to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roleId = _value.roleId;
        this.name = _value.name;
        this.permissions = (_value.permissions || []).slice();
        ProjectRole.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ProjectRole();
        ProjectRole.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roleId = _instance.roleId || 0;
        _instance.name = _instance.name || '';
        _instance.permissions = _instance.permissions || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roleId = _reader.readUint32();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    (_instance.permissions = _instance.permissions || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ProjectRole.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roleId) {
            _writer.writeUint32(1, _instance.roleId);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.permissions && _instance.permissions.length) {
            _writer.writeRepeatedString(3, _instance.permissions);
        }
    }
    get roleId() {
        return this._roleId;
    }
    set roleId(value) {
        this._roleId = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get permissions() {
        return this._permissions;
    }
    set permissions(value) {
        this._permissions = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ProjectRole.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roleId: this.roleId,
            name: this.name,
            permissions: (this.permissions || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roleId: this.roleId,
            name: this.name,
            permissions: (this.permissions || []).slice()
        };
    }
}
ProjectRole.id = 'ondewo.nlu.ProjectRole';
/**
 * Message implementation for ondewo.nlu.CreateProjectRoleRequest
 */
class CreateProjectRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateProjectRoleRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.role = _value.role ? new ProjectRole(_value.role) : undefined;
        this.projectRoleView = _value.projectRoleView;
        CreateProjectRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateProjectRoleRequest();
        CreateProjectRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.role = _instance.role || undefined;
        _instance.projectRoleView = _instance.projectRoleView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.role = new ProjectRole();
                    _reader.readMessage(_instance.role, ProjectRole.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.projectRoleView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateProjectRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.role) {
            _writer.writeMessage(2, _instance.role, ProjectRole.serializeBinaryToWriter);
        }
        if (_instance.projectRoleView) {
            _writer.writeEnum(3, _instance.projectRoleView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get role() {
        return this._role;
    }
    set role(value) {
        this._role = value;
    }
    get projectRoleView() {
        return this._projectRoleView;
    }
    set projectRoleView(value) {
        this._projectRoleView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateProjectRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            role: this.role ? this.role.toObject() : undefined,
            projectRoleView: this.projectRoleView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            role: this.role ? this.role.toProtobufJSON(options) : null,
            projectRoleView: ProjectRoleView[this.projectRoleView === null || this.projectRoleView === undefined
                ? 0
                : this.projectRoleView]
        };
    }
}
CreateProjectRoleRequest.id = 'ondewo.nlu.CreateProjectRoleRequest';
/**
 * Message implementation for ondewo.nlu.UpdateProjectRoleRequest
 */
class UpdateProjectRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateProjectRoleRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.role = _value.role ? new ProjectRole(_value.role) : undefined;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        this.projectRoleView = _value.projectRoleView;
        UpdateProjectRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateProjectRoleRequest();
        UpdateProjectRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.role = _instance.role || undefined;
        _instance.updateMask = _instance.updateMask || undefined;
        _instance.projectRoleView = _instance.projectRoleView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.role = new ProjectRole();
                    _reader.readMessage(_instance.role, ProjectRole.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.projectRoleView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateProjectRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.role) {
            _writer.writeMessage(2, _instance.role, ProjectRole.serializeBinaryToWriter);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(3, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
        if (_instance.projectRoleView) {
            _writer.writeEnum(4, _instance.projectRoleView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get role() {
        return this._role;
    }
    set role(value) {
        this._role = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    get projectRoleView() {
        return this._projectRoleView;
    }
    set projectRoleView(value) {
        this._projectRoleView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateProjectRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            role: this.role ? this.role.toObject() : undefined,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined,
            projectRoleView: this.projectRoleView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            role: this.role ? this.role.toProtobufJSON(options) : null,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null,
            projectRoleView: ProjectRoleView[this.projectRoleView === null || this.projectRoleView === undefined
                ? 0
                : this.projectRoleView]
        };
    }
}
UpdateProjectRoleRequest.id = 'ondewo.nlu.UpdateProjectRoleRequest';
/**
 * Message implementation for ondewo.nlu.GetProjectRoleRequest
 */
class GetProjectRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetProjectRoleRequest to deeply clone from
     */
    constructor(_value) {
        this._projectRoleIdentifier = GetProjectRoleRequest.ProjectRoleIdentifierCase.none;
        _value = _value || {};
        this.parent = _value.parent;
        this.roleId = _value.roleId;
        this.roleName = _value.roleName;
        this.projectRoleView = _value.projectRoleView;
        GetProjectRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetProjectRoleRequest();
        GetProjectRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.projectRoleView = _instance.projectRoleView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.roleId = _reader.readUint32();
                    break;
                case 3:
                    _instance.roleName = _reader.readString();
                    break;
                case 4:
                    _instance.projectRoleView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetProjectRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.roleId || _instance.roleId === 0) {
            _writer.writeUint32(2, _instance.roleId);
        }
        if (_instance.roleName || _instance.roleName === '') {
            _writer.writeString(3, _instance.roleName);
        }
        if (_instance.projectRoleView) {
            _writer.writeEnum(4, _instance.projectRoleView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get roleId() {
        return this._roleId;
    }
    set roleId(value) {
        if (value !== undefined && value !== null) {
            this._roleName = undefined;
            this._projectRoleIdentifier =
                GetProjectRoleRequest.ProjectRoleIdentifierCase.roleId;
        }
        this._roleId = value;
    }
    get roleName() {
        return this._roleName;
    }
    set roleName(value) {
        if (value !== undefined && value !== null) {
            this._roleId = undefined;
            this._projectRoleIdentifier =
                GetProjectRoleRequest.ProjectRoleIdentifierCase.roleName;
        }
        this._roleName = value;
    }
    get projectRoleView() {
        return this._projectRoleView;
    }
    set projectRoleView(value) {
        this._projectRoleView = value;
    }
    get projectRoleIdentifier() {
        return this._projectRoleIdentifier;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetProjectRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            roleId: this.roleId,
            roleName: this.roleName,
            projectRoleView: this.projectRoleView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            roleId: this.roleId === null || this.roleId === undefined ? null : this.roleId,
            roleName: this.roleName === null || this.roleName === undefined
                ? null
                : this.roleName,
            projectRoleView: ProjectRoleView[this.projectRoleView === null || this.projectRoleView === undefined
                ? 0
                : this.projectRoleView]
        };
    }
}
GetProjectRoleRequest.id = 'ondewo.nlu.GetProjectRoleRequest';
(function (GetProjectRoleRequest) {
    let ProjectRoleIdentifierCase;
    (function (ProjectRoleIdentifierCase) {
        ProjectRoleIdentifierCase[ProjectRoleIdentifierCase["none"] = 0] = "none";
        ProjectRoleIdentifierCase[ProjectRoleIdentifierCase["roleId"] = 1] = "roleId";
        ProjectRoleIdentifierCase[ProjectRoleIdentifierCase["roleName"] = 2] = "roleName";
    })(ProjectRoleIdentifierCase = GetProjectRoleRequest.ProjectRoleIdentifierCase || (GetProjectRoleRequest.ProjectRoleIdentifierCase = {}));
})(GetProjectRoleRequest || (GetProjectRoleRequest = {}));
/**
 * Message implementation for ondewo.nlu.DeleteProjectRoleRequest
 */
class DeleteProjectRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteProjectRoleRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.roleId = _value.roleId;
        DeleteProjectRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteProjectRoleRequest();
        DeleteProjectRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.roleId = _instance.roleId || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.roleId = _reader.readUint32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteProjectRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.roleId) {
            _writer.writeUint32(2, _instance.roleId);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get roleId() {
        return this._roleId;
    }
    set roleId(value) {
        this._roleId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteProjectRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            roleId: this.roleId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            roleId: this.roleId
        };
    }
}
DeleteProjectRoleRequest.id = 'ondewo.nlu.DeleteProjectRoleRequest';
/**
 * Message implementation for ondewo.nlu.ListProjectRolesRequest
 */
class ListProjectRolesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListProjectRolesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.pageToken = _value.pageToken;
        this.projectRoleView = _value.projectRoleView;
        ListProjectRolesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListProjectRolesRequest();
        ListProjectRolesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.pageToken = _instance.pageToken || '';
        _instance.projectRoleView = _instance.projectRoleView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.pageToken = _reader.readString();
                    break;
                case 3:
                    _instance.projectRoleView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListProjectRolesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.pageToken) {
            _writer.writeString(2, _instance.pageToken);
        }
        if (_instance.projectRoleView) {
            _writer.writeEnum(3, _instance.projectRoleView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get projectRoleView() {
        return this._projectRoleView;
    }
    set projectRoleView(value) {
        this._projectRoleView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListProjectRolesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            pageToken: this.pageToken,
            projectRoleView: this.projectRoleView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            pageToken: this.pageToken,
            projectRoleView: ProjectRoleView[this.projectRoleView === null || this.projectRoleView === undefined
                ? 0
                : this.projectRoleView]
        };
    }
}
ListProjectRolesRequest.id = 'ondewo.nlu.ListProjectRolesRequest';
/**
 * Message implementation for ondewo.nlu.ListProjectRolesResponse
 */
class ListProjectRolesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListProjectRolesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.projectRoles = (_value.projectRoles || []).map(m => new ProjectRole(m));
        this.nextPageToken = _value.nextPageToken;
        ListProjectRolesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListProjectRolesResponse();
        ListProjectRolesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.projectRoles = _instance.projectRoles || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new ProjectRole();
                    _reader.readMessage(messageInitializer1, ProjectRole.deserializeBinaryFromReader);
                    (_instance.projectRoles = _instance.projectRoles || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListProjectRolesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.projectRoles && _instance.projectRoles.length) {
            _writer.writeRepeatedMessage(1, _instance.projectRoles, ProjectRole.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get projectRoles() {
        return this._projectRoles;
    }
    set projectRoles(value) {
        this._projectRoles = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListProjectRolesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            projectRoles: (this.projectRoles || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            projectRoles: (this.projectRoles || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListProjectRolesResponse.id = 'ondewo.nlu.ListProjectRolesResponse';

var DefaultServerRole;
(function (DefaultServerRole) {
    DefaultServerRole[DefaultServerRole["SERVER_UNSPECIFIED"] = 0] = "SERVER_UNSPECIFIED";
    DefaultServerRole[DefaultServerRole["SERVER_USER"] = 1] = "SERVER_USER";
    DefaultServerRole[DefaultServerRole["SERVER_MANAGER"] = 2] = "SERVER_MANAGER";
    DefaultServerRole[DefaultServerRole["SERVER_ADMIN"] = 3] = "SERVER_ADMIN";
    DefaultServerRole[DefaultServerRole["SERVER_INACTIVE"] = 4] = "SERVER_INACTIVE";
})(DefaultServerRole || (DefaultServerRole = {}));
/**
 * Message implementation for ondewo.nlu.User
 */
class User {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of User to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userId = _value.userId;
        this.displayName = _value.displayName;
        this.serverRoleId = _value.serverRoleId;
        this.userEmail = _value.userEmail;
        User.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new User();
        User.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userId = _instance.userId || '';
        _instance.displayName = _instance.displayName || '';
        _instance.serverRoleId = _instance.serverRoleId || 0;
        _instance.userEmail = _instance.userEmail || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.userId = _reader.readString();
                    break;
                case 3:
                    _instance.displayName = _reader.readString();
                    break;
                case 6:
                    _instance.serverRoleId = _reader.readUint32();
                    break;
                case 7:
                    _instance.userEmail = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        User.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userId) {
            _writer.writeString(2, _instance.userId);
        }
        if (_instance.displayName) {
            _writer.writeString(3, _instance.displayName);
        }
        if (_instance.serverRoleId) {
            _writer.writeUint32(6, _instance.serverRoleId);
        }
        if (_instance.userEmail) {
            _writer.writeString(7, _instance.userEmail);
        }
    }
    get userId() {
        return this._userId;
    }
    set userId(value) {
        this._userId = value;
    }
    get displayName() {
        return this._displayName;
    }
    set displayName(value) {
        this._displayName = value;
    }
    get serverRoleId() {
        return this._serverRoleId;
    }
    set serverRoleId(value) {
        this._serverRoleId = value;
    }
    get userEmail() {
        return this._userEmail;
    }
    set userEmail(value) {
        this._userEmail = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        User.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userId: this.userId,
            displayName: this.displayName,
            serverRoleId: this.serverRoleId,
            userEmail: this.userEmail
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userId: this.userId,
            displayName: this.displayName,
            serverRoleId: this.serverRoleId,
            userEmail: this.userEmail
        };
    }
}
User.id = 'ondewo.nlu.User';
/**
 * Message implementation for ondewo.nlu.UserInfo
 */
class UserInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UserInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.user = _value.user ? new User(_value.user) : undefined;
        (this.projectRoles = _value.projectRoles
            ? Object.keys(_value.projectRoles).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.projectRoles[k]
                    ? new ProjectRole(_value.projectRoles[k])
                    : undefined })), {})
            : {}),
            UserInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UserInfo();
        UserInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.user = _instance.user || undefined;
        _instance.projectRoles = _instance.projectRoles || {};
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.user = new User();
                    _reader.readMessage(_instance.user, User.deserializeBinaryFromReader);
                    break;
                case 2:
                    const msg_2 = {};
                    _reader.readMessage(msg_2, UserInfo.ProjectRolesEntry.deserializeBinaryFromReader);
                    _instance.projectRoles = _instance.projectRoles || {};
                    _instance.projectRoles[msg_2.key] = msg_2.value;
                    break;
                default:
                    _reader.skipField();
            }
        }
        UserInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.user) {
            _writer.writeMessage(1, _instance.user, User.serializeBinaryToWriter);
        }
        if (!!_instance.projectRoles) {
            const keys_2 = Object.keys(_instance.projectRoles);
            if (keys_2.length) {
                const repeated_2 = keys_2
                    .map(key => ({
                    key: key,
                    value: _instance.projectRoles[key]
                }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(2, repeated_2, UserInfo.ProjectRolesEntry.serializeBinaryToWriter);
            }
        }
    }
    get user() {
        return this._user;
    }
    set user(value) {
        this._user = value;
    }
    get projectRoles() {
        return this._projectRoles;
    }
    set projectRoles(value) {
        this._projectRoles = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UserInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            user: this.user ? this.user.toObject() : undefined,
            projectRoles: this.projectRoles
                ? Object.keys(this.projectRoles).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.projectRoles[k]
                        ? this.projectRoles[k].toObject()
                        : undefined })), {})
                : {}
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            user: this.user ? this.user.toProtobufJSON(options) : null,
            projectRoles: this.projectRoles
                ? Object.keys(this.projectRoles).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.projectRoles[k] ? this.projectRoles[k].toJSON() : null })), {})
                : {}
        };
    }
}
UserInfo.id = 'ondewo.nlu.UserInfo';
(function (UserInfo) {
    /**
     * Message implementation for ondewo.nlu.ProjectRolesEntry
     */
    class ProjectRolesEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ProjectRolesEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value
                ? new ProjectRole(_value.value)
                : undefined;
            ProjectRolesEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ProjectRolesEntry();
            ProjectRolesEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = new ProjectRole();
                        _reader.readMessage(_instance.value, ProjectRole.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ProjectRolesEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeMessage(2, _instance.value, ProjectRole.serializeBinaryToWriter);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ProjectRolesEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value ? this.value.toObject() : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value ? this.value.toProtobufJSON(options) : null
            };
        }
    }
    ProjectRolesEntry.id = 'ondewo.nlu.ProjectRolesEntry';
    UserInfo.ProjectRolesEntry = ProjectRolesEntry;
})(UserInfo || (UserInfo = {}));
/**
 * Message implementation for ondewo.nlu.CreateUserRequest
 */
class CreateUserRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateUserRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.user = _value.user ? new User(_value.user) : undefined;
        this.password = _value.password;
        CreateUserRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateUserRequest();
        CreateUserRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.user = _instance.user || undefined;
        _instance.password = _instance.password || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.user = new User();
                    _reader.readMessage(_instance.user, User.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.password = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateUserRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.user) {
            _writer.writeMessage(1, _instance.user, User.serializeBinaryToWriter);
        }
        if (_instance.password) {
            _writer.writeString(3, _instance.password);
        }
    }
    get user() {
        return this._user;
    }
    set user(value) {
        this._user = value;
    }
    get password() {
        return this._password;
    }
    set password(value) {
        this._password = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateUserRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            user: this.user ? this.user.toObject() : undefined,
            password: this.password
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            user: this.user ? this.user.toProtobufJSON(options) : null,
            password: this.password
        };
    }
}
CreateUserRequest.id = 'ondewo.nlu.CreateUserRequest';
/**
 * Message implementation for ondewo.nlu.UpdateUserRequest
 */
class UpdateUserRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateUserRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.user = _value.user ? new User(_value.user) : undefined;
        this.password = _value.password;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        UpdateUserRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateUserRequest();
        UpdateUserRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.user = _instance.user || undefined;
        _instance.password = _instance.password || '';
        _instance.updateMask = _instance.updateMask || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.user = new User();
                    _reader.readMessage(_instance.user, User.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.password = _reader.readString();
                    break;
                case 5:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateUserRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.user) {
            _writer.writeMessage(1, _instance.user, User.serializeBinaryToWriter);
        }
        if (_instance.password) {
            _writer.writeString(4, _instance.password);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(5, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
    }
    get user() {
        return this._user;
    }
    set user(value) {
        this._user = value;
    }
    get password() {
        return this._password;
    }
    set password(value) {
        this._password = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateUserRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            user: this.user ? this.user.toObject() : undefined,
            password: this.password,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            user: this.user ? this.user.toProtobufJSON(options) : null,
            password: this.password,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null
        };
    }
}
UpdateUserRequest.id = 'ondewo.nlu.UpdateUserRequest';
/**
 * Message implementation for ondewo.nlu.GetUserRequest
 */
class GetUserRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserRequest to deeply clone from
     */
    constructor(_value) {
        this._userIdentifier = GetUserRequest.UserIdentifierCase.none;
        _value = _value || {};
        this.userId = _value.userId;
        this.userEmail = _value.userEmail;
        GetUserRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserRequest();
        GetUserRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.userId = _reader.readString();
                    break;
                case 3:
                    _instance.userEmail = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userId || _instance.userId === '') {
            _writer.writeString(1, _instance.userId);
        }
        if (_instance.userEmail || _instance.userEmail === '') {
            _writer.writeString(3, _instance.userEmail);
        }
    }
    get userId() {
        return this._userId;
    }
    set userId(value) {
        if (value !== undefined && value !== null) {
            this._userEmail = undefined;
            this._userIdentifier = GetUserRequest.UserIdentifierCase.userId;
        }
        this._userId = value;
    }
    get userEmail() {
        return this._userEmail;
    }
    set userEmail(value) {
        if (value !== undefined && value !== null) {
            this._userId = undefined;
            this._userIdentifier = GetUserRequest.UserIdentifierCase.userEmail;
        }
        this._userEmail = value;
    }
    get userIdentifier() {
        return this._userIdentifier;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userId: this.userId,
            userEmail: this.userEmail
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userId: this.userId === null || this.userId === undefined ? null : this.userId,
            userEmail: this.userEmail === null || this.userEmail === undefined
                ? null
                : this.userEmail
        };
    }
}
GetUserRequest.id = 'ondewo.nlu.GetUserRequest';
(function (GetUserRequest) {
    let UserIdentifierCase;
    (function (UserIdentifierCase) {
        UserIdentifierCase[UserIdentifierCase["none"] = 0] = "none";
        UserIdentifierCase[UserIdentifierCase["userId"] = 1] = "userId";
        UserIdentifierCase[UserIdentifierCase["userEmail"] = 2] = "userEmail";
    })(UserIdentifierCase = GetUserRequest.UserIdentifierCase || (GetUserRequest.UserIdentifierCase = {}));
})(GetUserRequest || (GetUserRequest = {}));
/**
 * Message implementation for ondewo.nlu.DeleteUserRequest
 */
class DeleteUserRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteUserRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userId = _value.userId;
        DeleteUserRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteUserRequest();
        DeleteUserRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userId = _instance.userId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.userId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteUserRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userId) {
            _writer.writeString(1, _instance.userId);
        }
    }
    get userId() {
        return this._userId;
    }
    set userId(value) {
        this._userId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteUserRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userId: this.userId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userId: this.userId
        };
    }
}
DeleteUserRequest.id = 'ondewo.nlu.DeleteUserRequest';
/**
 * Message implementation for ondewo.nlu.ListUsersRequest
 */
class ListUsersRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListUsersRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pageToken = _value.pageToken;
        ListUsersRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListUsersRequest();
        ListUsersRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListUsersRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pageToken) {
            _writer.writeString(1, _instance.pageToken);
        }
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListUsersRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pageToken: this.pageToken
        };
    }
}
ListUsersRequest.id = 'ondewo.nlu.ListUsersRequest';
/**
 * Message implementation for ondewo.nlu.ListUsersResponse
 */
class ListUsersResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListUsersResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.users = (_value.users || []).map(m => new User(m));
        this.nextPageToken = _value.nextPageToken;
        ListUsersResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListUsersResponse();
        ListUsersResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.users = _instance.users || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new User();
                    _reader.readMessage(messageInitializer1, User.deserializeBinaryFromReader);
                    (_instance.users = _instance.users || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListUsersResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.users && _instance.users.length) {
            _writer.writeRepeatedMessage(1, _instance.users, User.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get users() {
        return this._users;
    }
    set users(value) {
        this._users = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListUsersResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            users: (this.users || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            users: (this.users || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListUsersResponse.id = 'ondewo.nlu.ListUsersResponse';
/**
 * Message implementation for ondewo.nlu.ListUserInfosResponse
 */
class ListUserInfosResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListUserInfosResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.users = (_value.users || []).map(m => new UserInfo(m));
        this.nextPageToken = _value.nextPageToken;
        ListUserInfosResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListUserInfosResponse();
        ListUserInfosResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.users = _instance.users || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new UserInfo();
                    _reader.readMessage(messageInitializer1, UserInfo.deserializeBinaryFromReader);
                    (_instance.users = _instance.users || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListUserInfosResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.users && _instance.users.length) {
            _writer.writeRepeatedMessage(1, _instance.users, UserInfo.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get users() {
        return this._users;
    }
    set users(value) {
        this._users = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListUserInfosResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            users: (this.users || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            users: (this.users || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListUserInfosResponse.id = 'ondewo.nlu.ListUserInfosResponse';
/**
 * Message implementation for ondewo.nlu.ServerRole
 */
class ServerRole {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ServerRole to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roleId = _value.roleId;
        this.name = _value.name;
        this.permissions = (_value.permissions || []).slice();
        ServerRole.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ServerRole();
        ServerRole.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roleId = _instance.roleId || 0;
        _instance.name = _instance.name || '';
        _instance.permissions = _instance.permissions || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roleId = _reader.readUint32();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    (_instance.permissions = _instance.permissions || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ServerRole.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roleId) {
            _writer.writeUint32(1, _instance.roleId);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.permissions && _instance.permissions.length) {
            _writer.writeRepeatedString(3, _instance.permissions);
        }
    }
    get roleId() {
        return this._roleId;
    }
    set roleId(value) {
        this._roleId = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get permissions() {
        return this._permissions;
    }
    set permissions(value) {
        this._permissions = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ServerRole.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roleId: this.roleId,
            name: this.name,
            permissions: (this.permissions || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roleId: this.roleId,
            name: this.name,
            permissions: (this.permissions || []).slice()
        };
    }
}
ServerRole.id = 'ondewo.nlu.ServerRole';
/**
 * Message implementation for ondewo.nlu.CreateServerRoleRequest
 */
class CreateServerRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateServerRoleRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.role = _value.role ? new ServerRole(_value.role) : undefined;
        CreateServerRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateServerRoleRequest();
        CreateServerRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.role = _instance.role || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.role = new ServerRole();
                    _reader.readMessage(_instance.role, ServerRole.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateServerRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.role) {
            _writer.writeMessage(1, _instance.role, ServerRole.serializeBinaryToWriter);
        }
    }
    get role() {
        return this._role;
    }
    set role(value) {
        this._role = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateServerRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            role: this.role ? this.role.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            role: this.role ? this.role.toProtobufJSON(options) : null
        };
    }
}
CreateServerRoleRequest.id = 'ondewo.nlu.CreateServerRoleRequest';
/**
 * Message implementation for ondewo.nlu.UpdateServerRoleRequest
 */
class UpdateServerRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateServerRoleRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.role = _value.role ? new ServerRole(_value.role) : undefined;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        UpdateServerRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateServerRoleRequest();
        UpdateServerRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.role = _instance.role || undefined;
        _instance.updateMask = _instance.updateMask || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.role = new ServerRole();
                    _reader.readMessage(_instance.role, ServerRole.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateServerRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.role) {
            _writer.writeMessage(1, _instance.role, ServerRole.serializeBinaryToWriter);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(2, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
    }
    get role() {
        return this._role;
    }
    set role(value) {
        this._role = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateServerRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            role: this.role ? this.role.toObject() : undefined,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            role: this.role ? this.role.toProtobufJSON(options) : null,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null
        };
    }
}
UpdateServerRoleRequest.id = 'ondewo.nlu.UpdateServerRoleRequest';
/**
 * Message implementation for ondewo.nlu.DeleteServerRoleRequest
 */
class DeleteServerRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteServerRoleRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roleId = _value.roleId;
        DeleteServerRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteServerRoleRequest();
        DeleteServerRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roleId = _instance.roleId || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roleId = _reader.readUint32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteServerRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roleId) {
            _writer.writeUint32(1, _instance.roleId);
        }
    }
    get roleId() {
        return this._roleId;
    }
    set roleId(value) {
        this._roleId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteServerRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roleId: this.roleId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roleId: this.roleId
        };
    }
}
DeleteServerRoleRequest.id = 'ondewo.nlu.DeleteServerRoleRequest';
/**
 * Message implementation for ondewo.nlu.GetServerRoleRequest
 */
class GetServerRoleRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetServerRoleRequest to deeply clone from
     */
    constructor(_value) {
        this._serverRoleIdentifier = GetServerRoleRequest.ServerRoleIdentifierCase.none;
        _value = _value || {};
        this.roleId = _value.roleId;
        this.roleName = _value.roleName;
        GetServerRoleRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetServerRoleRequest();
        GetServerRoleRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roleId = _reader.readUint32();
                    break;
                case 2:
                    _instance.roleName = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetServerRoleRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roleId || _instance.roleId === 0) {
            _writer.writeUint32(1, _instance.roleId);
        }
        if (_instance.roleName || _instance.roleName === '') {
            _writer.writeString(2, _instance.roleName);
        }
    }
    get roleId() {
        return this._roleId;
    }
    set roleId(value) {
        if (value !== undefined && value !== null) {
            this._roleName = undefined;
            this._serverRoleIdentifier =
                GetServerRoleRequest.ServerRoleIdentifierCase.roleId;
        }
        this._roleId = value;
    }
    get roleName() {
        return this._roleName;
    }
    set roleName(value) {
        if (value !== undefined && value !== null) {
            this._roleId = undefined;
            this._serverRoleIdentifier =
                GetServerRoleRequest.ServerRoleIdentifierCase.roleName;
        }
        this._roleName = value;
    }
    get serverRoleIdentifier() {
        return this._serverRoleIdentifier;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetServerRoleRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roleId: this.roleId,
            roleName: this.roleName
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roleId: this.roleId === null || this.roleId === undefined ? null : this.roleId,
            roleName: this.roleName === null || this.roleName === undefined
                ? null
                : this.roleName
        };
    }
}
GetServerRoleRequest.id = 'ondewo.nlu.GetServerRoleRequest';
(function (GetServerRoleRequest) {
    let ServerRoleIdentifierCase;
    (function (ServerRoleIdentifierCase) {
        ServerRoleIdentifierCase[ServerRoleIdentifierCase["none"] = 0] = "none";
        ServerRoleIdentifierCase[ServerRoleIdentifierCase["roleId"] = 1] = "roleId";
        ServerRoleIdentifierCase[ServerRoleIdentifierCase["roleName"] = 2] = "roleName";
    })(ServerRoleIdentifierCase = GetServerRoleRequest.ServerRoleIdentifierCase || (GetServerRoleRequest.ServerRoleIdentifierCase = {}));
})(GetServerRoleRequest || (GetServerRoleRequest = {}));
/**
 * Message implementation for ondewo.nlu.ListServerRolesRequest
 */
class ListServerRolesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListServerRolesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pageToken = _value.pageToken;
        ListServerRolesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListServerRolesRequest();
        ListServerRolesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListServerRolesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pageToken) {
            _writer.writeString(1, _instance.pageToken);
        }
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListServerRolesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pageToken: this.pageToken
        };
    }
}
ListServerRolesRequest.id = 'ondewo.nlu.ListServerRolesRequest';
/**
 * Message implementation for ondewo.nlu.ListServerRolesResponse
 */
class ListServerRolesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListServerRolesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.serverRoles = (_value.serverRoles || []).map(m => new ServerRole(m));
        this.nextPageToken = _value.nextPageToken;
        ListServerRolesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListServerRolesResponse();
        ListServerRolesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.serverRoles = _instance.serverRoles || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new ServerRole();
                    _reader.readMessage(messageInitializer1, ServerRole.deserializeBinaryFromReader);
                    (_instance.serverRoles = _instance.serverRoles || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListServerRolesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.serverRoles && _instance.serverRoles.length) {
            _writer.writeRepeatedMessage(1, _instance.serverRoles, ServerRole.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get serverRoles() {
        return this._serverRoles;
    }
    set serverRoles(value) {
        this._serverRoles = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListServerRolesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            serverRoles: (this.serverRoles || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            serverRoles: (this.serverRoles || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListServerRolesResponse.id = 'ondewo.nlu.ListServerRolesResponse';
/**
 * Message implementation for ondewo.nlu.ListServerPermissionsRequest
 */
class ListServerPermissionsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListServerPermissionsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pageToken = _value.pageToken;
        ListServerPermissionsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListServerPermissionsRequest();
        ListServerPermissionsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListServerPermissionsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pageToken) {
            _writer.writeString(1, _instance.pageToken);
        }
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListServerPermissionsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pageToken: this.pageToken
        };
    }
}
ListServerPermissionsRequest.id = 'ondewo.nlu.ListServerPermissionsRequest';
/**
 * Message implementation for ondewo.nlu.ListServerPermissionsResponse
 */
class ListServerPermissionsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListServerPermissionsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.permissions = (_value.permissions || []).slice();
        this.nextPageToken = _value.nextPageToken;
        ListServerPermissionsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListServerPermissionsResponse();
        ListServerPermissionsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.permissions = _instance.permissions || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.permissions = _instance.permissions || []).push(_reader.readString());
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListServerPermissionsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.permissions && _instance.permissions.length) {
            _writer.writeRepeatedString(1, _instance.permissions);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get permissions() {
        return this._permissions;
    }
    set permissions(value) {
        this._permissions = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListServerPermissionsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            permissions: (this.permissions || []).slice(),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            permissions: (this.permissions || []).slice(),
            nextPageToken: this.nextPageToken
        };
    }
}
ListServerPermissionsResponse.id = 'ondewo.nlu.ListServerPermissionsResponse';
/**
 * Message implementation for ondewo.nlu.LoginRequest
 */
class LoginRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LoginRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userEmail = _value.userEmail;
        this.password = _value.password;
        LoginRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LoginRequest();
        LoginRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userEmail = _instance.userEmail || '';
        _instance.password = _instance.password || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.userEmail = _reader.readString();
                    break;
                case 2:
                    _instance.password = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        LoginRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userEmail) {
            _writer.writeString(1, _instance.userEmail);
        }
        if (_instance.password) {
            _writer.writeString(2, _instance.password);
        }
    }
    get userEmail() {
        return this._userEmail;
    }
    set userEmail(value) {
        this._userEmail = value;
    }
    get password() {
        return this._password;
    }
    set password(value) {
        this._password = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LoginRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userEmail: this.userEmail,
            password: this.password
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userEmail: this.userEmail,
            password: this.password
        };
    }
}
LoginRequest.id = 'ondewo.nlu.LoginRequest';
/**
 * Message implementation for ondewo.nlu.LoginResponse
 */
class LoginResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LoginResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.user = _value.user ? new User(_value.user) : undefined;
        this.authToken = _value.authToken;
        LoginResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LoginResponse();
        LoginResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.user = _instance.user || undefined;
        _instance.authToken = _instance.authToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.user = new User();
                    _reader.readMessage(_instance.user, User.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.authToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        LoginResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.user) {
            _writer.writeMessage(1, _instance.user, User.serializeBinaryToWriter);
        }
        if (_instance.authToken) {
            _writer.writeString(2, _instance.authToken);
        }
    }
    get user() {
        return this._user;
    }
    set user(value) {
        this._user = value;
    }
    get authToken() {
        return this._authToken;
    }
    set authToken(value) {
        this._authToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LoginResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            user: this.user ? this.user.toObject() : undefined,
            authToken: this.authToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            user: this.user ? this.user.toProtobufJSON(options) : null,
            authToken: this.authToken
        };
    }
}
LoginResponse.id = 'ondewo.nlu.LoginResponse';

/* tslint:disable */
var AgentView;
(function (AgentView) {
    AgentView[AgentView["AGENT_VIEW_UNSPECIFIED"] = 0] = "AGENT_VIEW_UNSPECIFIED";
    AgentView[AgentView["AGENT_VIEW_FULL"] = 1] = "AGENT_VIEW_FULL";
    AgentView[AgentView["AGENT_VIEW_SHALLOW"] = 2] = "AGENT_VIEW_SHALLOW";
})(AgentView || (AgentView = {}));
var InitiationProtocol;
(function (InitiationProtocol) {
    InitiationProtocol[InitiationProtocol["AS_SOON_AS_POSSIBLE"] = 0] = "AS_SOON_AS_POSSIBLE";
    InitiationProtocol[InitiationProtocol["WHEN_TRAINED"] = 1] = "WHEN_TRAINED";
    InitiationProtocol[InitiationProtocol["NEVER"] = 2] = "NEVER";
})(InitiationProtocol || (InitiationProtocol = {}));
var ReportType;
(function (ReportType) {
    ReportType[ReportType["ALL"] = 0] = "ALL";
    ReportType[ReportType["INTENT_PER_LANGUAGE"] = 1] = "INTENT_PER_LANGUAGE";
    ReportType[ReportType["ENTITY_PER_LANGUAGE"] = 2] = "ENTITY_PER_LANGUAGE";
    ReportType[ReportType["ENTITY_COLLISION"] = 3] = "ENTITY_COLLISION";
    ReportType[ReportType["INTENT_GENERAL"] = 4] = "INTENT_GENERAL";
})(ReportType || (ReportType = {}));
var ReportFormat;
(function (ReportFormat) {
    ReportFormat[ReportFormat["CSV"] = 0] = "CSV";
    ReportFormat[ReportFormat["HTML"] = 1] = "HTML";
    ReportFormat[ReportFormat["JSON"] = 2] = "JSON";
})(ReportFormat || (ReportFormat = {}));
var AgentStatus;
(function (AgentStatus) {
    AgentStatus[AgentStatus["ACTIVE"] = 0] = "ACTIVE";
    AgentStatus[AgentStatus["INACTIVE"] = 1] = "INACTIVE";
})(AgentStatus || (AgentStatus = {}));
/**
 * Message implementation for ondewo.nlu.Agent
 */
class Agent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Agent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.displayName = _value.displayName;
        this.defaultLanguageCode = _value.defaultLanguageCode;
        this.supportedLanguageCodes = (_value.supportedLanguageCodes || []).slice();
        this.timeZone = _value.timeZone;
        this.nluPlatform = _value.nluPlatform;
        this.configs = _value.configs
            ? new googleProtobuf003.Struct(_value.configs)
            : undefined;
        this.ownerId = _value.ownerId;
        this.status = _value.status;
        this.description = _value.description;
        Agent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Agent();
        Agent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.displayName = _instance.displayName || '';
        _instance.defaultLanguageCode = _instance.defaultLanguageCode || '';
        _instance.supportedLanguageCodes = _instance.supportedLanguageCodes || [];
        _instance.timeZone = _instance.timeZone || '';
        _instance.nluPlatform = _instance.nluPlatform || '';
        _instance.configs = _instance.configs || undefined;
        _instance.ownerId = _instance.ownerId || '';
        _instance.status = _instance.status || 0;
        _instance.description = _instance.description || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.displayName = _reader.readString();
                    break;
                case 3:
                    _instance.defaultLanguageCode = _reader.readString();
                    break;
                case 4:
                    (_instance.supportedLanguageCodes =
                        _instance.supportedLanguageCodes || []).push(_reader.readString());
                    break;
                case 5:
                    _instance.timeZone = _reader.readString();
                    break;
                case 6:
                    _instance.nluPlatform = _reader.readString();
                    break;
                case 7:
                    _instance.configs = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.configs, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                case 8:
                    _instance.ownerId = _reader.readString();
                    break;
                case 9:
                    _instance.status = _reader.readEnum();
                    break;
                case 10:
                    _instance.description = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Agent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.displayName) {
            _writer.writeString(2, _instance.displayName);
        }
        if (_instance.defaultLanguageCode) {
            _writer.writeString(3, _instance.defaultLanguageCode);
        }
        if (_instance.supportedLanguageCodes &&
            _instance.supportedLanguageCodes.length) {
            _writer.writeRepeatedString(4, _instance.supportedLanguageCodes);
        }
        if (_instance.timeZone) {
            _writer.writeString(5, _instance.timeZone);
        }
        if (_instance.nluPlatform) {
            _writer.writeString(6, _instance.nluPlatform);
        }
        if (_instance.configs) {
            _writer.writeMessage(7, _instance.configs, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
        if (_instance.ownerId) {
            _writer.writeString(8, _instance.ownerId);
        }
        if (_instance.status) {
            _writer.writeEnum(9, _instance.status);
        }
        if (_instance.description) {
            _writer.writeString(10, _instance.description);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get displayName() {
        return this._displayName;
    }
    set displayName(value) {
        this._displayName = value;
    }
    get defaultLanguageCode() {
        return this._defaultLanguageCode;
    }
    set defaultLanguageCode(value) {
        this._defaultLanguageCode = value;
    }
    get supportedLanguageCodes() {
        return this._supportedLanguageCodes;
    }
    set supportedLanguageCodes(value) {
        this._supportedLanguageCodes = value;
    }
    get timeZone() {
        return this._timeZone;
    }
    set timeZone(value) {
        this._timeZone = value;
    }
    get nluPlatform() {
        return this._nluPlatform;
    }
    set nluPlatform(value) {
        this._nluPlatform = value;
    }
    get configs() {
        return this._configs;
    }
    set configs(value) {
        this._configs = value;
    }
    get ownerId() {
        return this._ownerId;
    }
    set ownerId(value) {
        this._ownerId = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Agent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            displayName: this.displayName,
            defaultLanguageCode: this.defaultLanguageCode,
            supportedLanguageCodes: (this.supportedLanguageCodes || []).slice(),
            timeZone: this.timeZone,
            nluPlatform: this.nluPlatform,
            configs: this.configs ? this.configs.toObject() : undefined,
            ownerId: this.ownerId,
            status: this.status,
            description: this.description
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            displayName: this.displayName,
            defaultLanguageCode: this.defaultLanguageCode,
            supportedLanguageCodes: (this.supportedLanguageCodes || []).slice(),
            timeZone: this.timeZone,
            nluPlatform: this.nluPlatform,
            configs: this.configs ? this.configs.toProtobufJSON(options) : null,
            ownerId: this.ownerId,
            status: AgentStatus[this.status === null || this.status === undefined ? 0 : this.status],
            description: this.description
        };
    }
}
Agent.id = 'ondewo.nlu.Agent';
/**
 * Message implementation for ondewo.nlu.AgentWithOwner
 */
class AgentWithOwner {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AgentWithOwner to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agent = _value.agent ? new Agent(_value.agent) : undefined;
        this.owner = _value.owner ? new User(_value.owner) : undefined;
        AgentWithOwner.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AgentWithOwner();
        AgentWithOwner.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agent = _instance.agent || undefined;
        _instance.owner = _instance.owner || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.agent = new Agent();
                    _reader.readMessage(_instance.agent, Agent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.owner = new User();
                    _reader.readMessage(_instance.owner, User.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AgentWithOwner.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agent) {
            _writer.writeMessage(1, _instance.agent, Agent.serializeBinaryToWriter);
        }
        if (_instance.owner) {
            _writer.writeMessage(2, _instance.owner, User.serializeBinaryToWriter);
        }
    }
    get agent() {
        return this._agent;
    }
    set agent(value) {
        this._agent = value;
    }
    get owner() {
        return this._owner;
    }
    set owner(value) {
        this._owner = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AgentWithOwner.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agent: this.agent ? this.agent.toObject() : undefined,
            owner: this.owner ? this.owner.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agent: this.agent ? this.agent.toProtobufJSON(options) : null,
            owner: this.owner ? this.owner.toProtobufJSON(options) : null
        };
    }
}
AgentWithOwner.id = 'ondewo.nlu.AgentWithOwner';
/**
 * Message implementation for ondewo.nlu.AgentOfUserWithOwner
 */
class AgentOfUserWithOwner {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AgentOfUserWithOwner to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agentWithOwner = _value.agentWithOwner
            ? new AgentWithOwner(_value.agentWithOwner)
            : undefined;
        this.projectRole = _value.projectRole
            ? new ProjectRole(_value.projectRole)
            : undefined;
        AgentOfUserWithOwner.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AgentOfUserWithOwner();
        AgentOfUserWithOwner.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agentWithOwner = _instance.agentWithOwner || undefined;
        _instance.projectRole = _instance.projectRole || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.agentWithOwner = new AgentWithOwner();
                    _reader.readMessage(_instance.agentWithOwner, AgentWithOwner.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.projectRole = new ProjectRole();
                    _reader.readMessage(_instance.projectRole, ProjectRole.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AgentOfUserWithOwner.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agentWithOwner) {
            _writer.writeMessage(1, _instance.agentWithOwner, AgentWithOwner.serializeBinaryToWriter);
        }
        if (_instance.projectRole) {
            _writer.writeMessage(2, _instance.projectRole, ProjectRole.serializeBinaryToWriter);
        }
    }
    get agentWithOwner() {
        return this._agentWithOwner;
    }
    set agentWithOwner(value) {
        this._agentWithOwner = value;
    }
    get projectRole() {
        return this._projectRole;
    }
    set projectRole(value) {
        this._projectRole = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AgentOfUserWithOwner.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agentWithOwner: this.agentWithOwner
                ? this.agentWithOwner.toObject()
                : undefined,
            projectRole: this.projectRole ? this.projectRole.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agentWithOwner: this.agentWithOwner
                ? this.agentWithOwner.toProtobufJSON(options)
                : null,
            projectRole: this.projectRole
                ? this.projectRole.toProtobufJSON(options)
                : null
        };
    }
}
AgentOfUserWithOwner.id = 'ondewo.nlu.AgentOfUserWithOwner';
/**
 * Message implementation for ondewo.nlu.CreateAgentRequest
 */
class CreateAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateAgentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agent = _value.agent ? new Agent(_value.agent) : undefined;
        this.agentView = _value.agentView;
        CreateAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateAgentRequest();
        CreateAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agent = _instance.agent || undefined;
        _instance.agentView = _instance.agentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.agent = new Agent();
                    _reader.readMessage(_instance.agent, Agent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.agentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agent) {
            _writer.writeMessage(1, _instance.agent, Agent.serializeBinaryToWriter);
        }
        if (_instance.agentView) {
            _writer.writeEnum(2, _instance.agentView);
        }
    }
    get agent() {
        return this._agent;
    }
    set agent(value) {
        this._agent = value;
    }
    get agentView() {
        return this._agentView;
    }
    set agentView(value) {
        this._agentView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agent: this.agent ? this.agent.toObject() : undefined,
            agentView: this.agentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agent: this.agent ? this.agent.toProtobufJSON(options) : null,
            agentView: AgentView[this.agentView === null || this.agentView === undefined
                ? 0
                : this.agentView]
        };
    }
}
CreateAgentRequest.id = 'ondewo.nlu.CreateAgentRequest';
/**
 * Message implementation for ondewo.nlu.UpdateAgentRequest
 */
class UpdateAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateAgentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agent = _value.agent ? new Agent(_value.agent) : undefined;
        this.agentView = _value.agentView;
        this.updateMask = _value.updateMask
            ? new googleProtobuf003.FieldMask(_value.updateMask)
            : undefined;
        UpdateAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateAgentRequest();
        UpdateAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agent = _instance.agent || undefined;
        _instance.agentView = _instance.agentView || 0;
        _instance.updateMask = _instance.updateMask || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.agent = new Agent();
                    _reader.readMessage(_instance.agent, Agent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.agentView = _reader.readEnum();
                    break;
                case 3:
                    _instance.updateMask = new googleProtobuf003.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf003.FieldMask.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agent) {
            _writer.writeMessage(1, _instance.agent, Agent.serializeBinaryToWriter);
        }
        if (_instance.agentView) {
            _writer.writeEnum(2, _instance.agentView);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(3, _instance.updateMask, googleProtobuf003.FieldMask.serializeBinaryToWriter);
        }
    }
    get agent() {
        return this._agent;
    }
    set agent(value) {
        this._agent = value;
    }
    get agentView() {
        return this._agentView;
    }
    set agentView(value) {
        this._agentView = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agent: this.agent ? this.agent.toObject() : undefined,
            agentView: this.agentView,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agent: this.agent ? this.agent.toProtobufJSON(options) : null,
            agentView: AgentView[this.agentView === null || this.agentView === undefined
                ? 0
                : this.agentView],
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null
        };
    }
}
UpdateAgentRequest.id = 'ondewo.nlu.UpdateAgentRequest';
/**
 * Message implementation for ondewo.nlu.DeleteAgentRequest
 */
class DeleteAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteAgentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        DeleteAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteAgentRequest();
        DeleteAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent
        };
    }
}
DeleteAgentRequest.id = 'ondewo.nlu.DeleteAgentRequest';
/**
 * Message implementation for ondewo.nlu.GetAgentRequest
 */
class GetAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAgentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.agentView = _value.agentView;
        GetAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAgentRequest();
        GetAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.agentView = _instance.agentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.agentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.agentView) {
            _writer.writeEnum(2, _instance.agentView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get agentView() {
        return this._agentView;
    }
    set agentView(value) {
        this._agentView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            agentView: this.agentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            agentView: AgentView[this.agentView === null || this.agentView === undefined
                ? 0
                : this.agentView]
        };
    }
}
GetAgentRequest.id = 'ondewo.nlu.GetAgentRequest';
/**
 * Message implementation for ondewo.nlu.ListAgentsRequest
 */
class ListAgentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListAgentsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agentView = _value.agentView;
        this.pageToken = _value.pageToken;
        this.sortByField = _value.sortByField
            ? new AgentSorting(_value.sortByField)
            : undefined;
        ListAgentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListAgentsRequest();
        ListAgentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agentView = _instance.agentView || 0;
        _instance.pageToken = _instance.pageToken || '';
        _instance.sortByField = _instance.sortByField || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.agentView = _reader.readEnum();
                    break;
                case 2:
                    _instance.pageToken = _reader.readString();
                    break;
                case 3:
                    _instance.sortByField = new AgentSorting();
                    _reader.readMessage(_instance.sortByField, AgentSorting.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListAgentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agentView) {
            _writer.writeEnum(1, _instance.agentView);
        }
        if (_instance.pageToken) {
            _writer.writeString(2, _instance.pageToken);
        }
        if (_instance.sortByField) {
            _writer.writeMessage(3, _instance.sortByField, AgentSorting.serializeBinaryToWriter);
        }
    }
    get agentView() {
        return this._agentView;
    }
    set agentView(value) {
        this._agentView = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get sortByField() {
        return this._sortByField;
    }
    set sortByField(value) {
        this._sortByField = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListAgentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agentView: this.agentView,
            pageToken: this.pageToken,
            sortByField: this.sortByField ? this.sortByField.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agentView: AgentView[this.agentView === null || this.agentView === undefined
                ? 0
                : this.agentView],
            pageToken: this.pageToken,
            sortByField: this.sortByField
                ? this.sortByField.toProtobufJSON(options)
                : null
        };
    }
}
ListAgentsRequest.id = 'ondewo.nlu.ListAgentsRequest';
/**
 * Message implementation for ondewo.nlu.ListAgentsResponse
 */
class ListAgentsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListAgentsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agentsWithOwners = (_value.agentsWithOwners || []).map(m => new AgentWithOwner(m));
        this.nextPageToken = _value.nextPageToken;
        ListAgentsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListAgentsResponse();
        ListAgentsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agentsWithOwners = _instance.agentsWithOwners || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new AgentWithOwner();
                    _reader.readMessage(messageInitializer1, AgentWithOwner.deserializeBinaryFromReader);
                    (_instance.agentsWithOwners = _instance.agentsWithOwners || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListAgentsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agentsWithOwners && _instance.agentsWithOwners.length) {
            _writer.writeRepeatedMessage(1, _instance.agentsWithOwners, AgentWithOwner.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get agentsWithOwners() {
        return this._agentsWithOwners;
    }
    set agentsWithOwners(value) {
        this._agentsWithOwners = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListAgentsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agentsWithOwners: (this.agentsWithOwners || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agentsWithOwners: (this.agentsWithOwners || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListAgentsResponse.id = 'ondewo.nlu.ListAgentsResponse';
/**
 * Message implementation for ondewo.nlu.ListAgentsOfUserResponse
 */
class ListAgentsOfUserResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListAgentsOfUserResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agentsOfUserWithOwners = (_value.agentsOfUserWithOwners || []).map(m => new AgentOfUserWithOwner(m));
        this.nextPageToken = _value.nextPageToken;
        ListAgentsOfUserResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListAgentsOfUserResponse();
        ListAgentsOfUserResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agentsOfUserWithOwners = _instance.agentsOfUserWithOwners || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new AgentOfUserWithOwner();
                    _reader.readMessage(messageInitializer1, AgentOfUserWithOwner.deserializeBinaryFromReader);
                    (_instance.agentsOfUserWithOwners =
                        _instance.agentsOfUserWithOwners || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListAgentsOfUserResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agentsOfUserWithOwners &&
            _instance.agentsOfUserWithOwners.length) {
            _writer.writeRepeatedMessage(1, _instance.agentsOfUserWithOwners, AgentOfUserWithOwner.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get agentsOfUserWithOwners() {
        return this._agentsOfUserWithOwners;
    }
    set agentsOfUserWithOwners(value) {
        this._agentsOfUserWithOwners = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListAgentsOfUserResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agentsOfUserWithOwners: (this.agentsOfUserWithOwners || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agentsOfUserWithOwners: (this.agentsOfUserWithOwners || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListAgentsOfUserResponse.id = 'ondewo.nlu.ListAgentsOfUserResponse';
/**
 * Message implementation for ondewo.nlu.TrainAgentRequest
 */
class TrainAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TrainAgentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.branch = _value.branch;
        this.initiationProtocol = _value.initiationProtocol;
        TrainAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TrainAgentRequest();
        TrainAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.branch = _instance.branch || '';
        _instance.initiationProtocol = _instance.initiationProtocol || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.branch = _reader.readString();
                    break;
                case 3:
                    _instance.initiationProtocol = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        TrainAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.branch) {
            _writer.writeString(2, _instance.branch);
        }
        if (_instance.initiationProtocol) {
            _writer.writeEnum(3, _instance.initiationProtocol);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get branch() {
        return this._branch;
    }
    set branch(value) {
        this._branch = value;
    }
    get initiationProtocol() {
        return this._initiationProtocol;
    }
    set initiationProtocol(value) {
        this._initiationProtocol = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TrainAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            branch: this.branch,
            initiationProtocol: this.initiationProtocol
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            branch: this.branch,
            initiationProtocol: InitiationProtocol[this.initiationProtocol === null ||
                this.initiationProtocol === undefined
                ? 0
                : this.initiationProtocol]
        };
    }
}
TrainAgentRequest.id = 'ondewo.nlu.TrainAgentRequest';
/**
 * Message implementation for ondewo.nlu.BuildCacheRequest
 */
class BuildCacheRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BuildCacheRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.branch = _value.branch;
        BuildCacheRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BuildCacheRequest();
        BuildCacheRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.branch = _instance.branch || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.branch = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BuildCacheRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.branch) {
            _writer.writeString(2, _instance.branch);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get branch() {
        return this._branch;
    }
    set branch(value) {
        this._branch = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BuildCacheRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            branch: this.branch
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            branch: this.branch
        };
    }
}
BuildCacheRequest.id = 'ondewo.nlu.BuildCacheRequest';
/**
 * Message implementation for ondewo.nlu.ExportAgentRequest
 */
class ExportAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExportAgentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.agentUri = _value.agentUri;
        this.compressionLevel = _value.compressionLevel;
        ExportAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExportAgentRequest();
        ExportAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.agentUri = _instance.agentUri || '';
        _instance.compressionLevel = _instance.compressionLevel || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.agentUri = _reader.readString();
                    break;
                case 3:
                    _instance.compressionLevel = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExportAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.agentUri) {
            _writer.writeString(2, _instance.agentUri);
        }
        if (_instance.compressionLevel) {
            _writer.writeInt32(3, _instance.compressionLevel);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get agentUri() {
        return this._agentUri;
    }
    set agentUri(value) {
        this._agentUri = value;
    }
    get compressionLevel() {
        return this._compressionLevel;
    }
    set compressionLevel(value) {
        this._compressionLevel = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExportAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            agentUri: this.agentUri,
            compressionLevel: this.compressionLevel
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            agentUri: this.agentUri,
            compressionLevel: this.compressionLevel
        };
    }
}
ExportAgentRequest.id = 'ondewo.nlu.ExportAgentRequest';
/**
 * Message implementation for ondewo.nlu.ExportAgentResponse
 */
class ExportAgentResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExportAgentResponse to deeply clone from
     */
    constructor(_value) {
        this._agent = ExportAgentResponse.AgentCase.none;
        _value = _value || {};
        this.agentUri = _value.agentUri;
        this.agentContent = _value.agentContent;
        ExportAgentResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExportAgentResponse();
        ExportAgentResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.agentUri = _reader.readString();
                    break;
                case 2:
                    _instance.agentContent = _reader.readBytes();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExportAgentResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agentUri || _instance.agentUri === '') {
            _writer.writeString(1, _instance.agentUri);
        }
        if (_instance.agentContent && _instance.agentContent.length) {
            _writer.writeBytes(2, _instance.agentContent);
        }
    }
    get agentUri() {
        return this._agentUri;
    }
    set agentUri(value) {
        if (value !== undefined && value !== null) {
            this._agentContent = undefined;
            this._agent = ExportAgentResponse.AgentCase.agentUri;
        }
        this._agentUri = value;
    }
    get agentContent() {
        return this._agentContent;
    }
    set agentContent(value) {
        if (value !== undefined && value !== null) {
            this._agentUri = undefined;
            this._agent = ExportAgentResponse.AgentCase.agentContent;
        }
        this._agentContent = value;
    }
    get agent() {
        return this._agent;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExportAgentResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agentUri: this.agentUri,
            agentContent: this.agentContent
                ? this.agentContent.subarray(0)
                : new Uint8Array()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agentUri: this.agentUri === null || this.agentUri === undefined
                ? null
                : this.agentUri,
            agentContent: this.agentContent
                ? uint8ArrayToBase64(this.agentContent)
                : ''
        };
    }
}
ExportAgentResponse.id = 'ondewo.nlu.ExportAgentResponse';
(function (ExportAgentResponse) {
    let AgentCase;
    (function (AgentCase) {
        AgentCase[AgentCase["none"] = 0] = "none";
        AgentCase[AgentCase["agentUri"] = 1] = "agentUri";
        AgentCase[AgentCase["agentContent"] = 2] = "agentContent";
    })(AgentCase = ExportAgentResponse.AgentCase || (ExportAgentResponse.AgentCase = {}));
})(ExportAgentResponse || (ExportAgentResponse = {}));
/**
 * Message implementation for ondewo.nlu.ExportBenchmarkAgentRequest
 */
class ExportBenchmarkAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExportBenchmarkAgentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.compressionLevel = _value.compressionLevel;
        this.testSize = _value.testSize;
        this.trainSize = _value.trainSize;
        this.randomState = _value.randomState;
        ExportBenchmarkAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExportBenchmarkAgentRequest();
        ExportBenchmarkAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.compressionLevel = _instance.compressionLevel || 0;
        _instance.testSize = _instance.testSize || 0;
        _instance.trainSize = _instance.trainSize || 0;
        _instance.randomState = _instance.randomState || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.compressionLevel = _reader.readInt32();
                    break;
                case 3:
                    _instance.testSize = _reader.readFloat();
                    break;
                case 4:
                    _instance.trainSize = _reader.readFloat();
                    break;
                case 5:
                    _instance.randomState = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExportBenchmarkAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.compressionLevel) {
            _writer.writeInt32(2, _instance.compressionLevel);
        }
        if (_instance.testSize) {
            _writer.writeFloat(3, _instance.testSize);
        }
        if (_instance.trainSize) {
            _writer.writeFloat(4, _instance.trainSize);
        }
        if (_instance.randomState) {
            _writer.writeInt32(5, _instance.randomState);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get compressionLevel() {
        return this._compressionLevel;
    }
    set compressionLevel(value) {
        this._compressionLevel = value;
    }
    get testSize() {
        return this._testSize;
    }
    set testSize(value) {
        this._testSize = value;
    }
    get trainSize() {
        return this._trainSize;
    }
    set trainSize(value) {
        this._trainSize = value;
    }
    get randomState() {
        return this._randomState;
    }
    set randomState(value) {
        this._randomState = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExportBenchmarkAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            compressionLevel: this.compressionLevel,
            testSize: this.testSize,
            trainSize: this.trainSize,
            randomState: this.randomState
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            compressionLevel: this.compressionLevel,
            testSize: this.testSize,
            trainSize: this.trainSize,
            randomState: this.randomState
        };
    }
}
ExportBenchmarkAgentRequest.id = 'ondewo.nlu.ExportBenchmarkAgentRequest';
/**
 * Message implementation for ondewo.nlu.ExportBenchmarkAgentResponse
 */
class ExportBenchmarkAgentResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExportBenchmarkAgentResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.agentContent = _value.agentContent;
        (this.trainingPhrases = _value.trainingPhrases
            ? Object.keys(_value.trainingPhrases).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.trainingPhrases[k]
                    ? new ListTrainingPhrasesResponse(_value.trainingPhrases[k])
                    : undefined })), {})
            : {}),
            ExportBenchmarkAgentResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExportBenchmarkAgentResponse();
        ExportBenchmarkAgentResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.agentContent = _instance.agentContent || new Uint8Array();
        _instance.trainingPhrases = _instance.trainingPhrases || {};
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.agentContent = _reader.readBytes();
                    break;
                case 2:
                    const msg_2 = {};
                    _reader.readMessage(msg_2, ExportBenchmarkAgentResponse.TrainingPhrasesEntry
                        .deserializeBinaryFromReader);
                    _instance.trainingPhrases = _instance.trainingPhrases || {};
                    _instance.trainingPhrases[msg_2.key] = msg_2.value;
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExportBenchmarkAgentResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.agentContent && _instance.agentContent.length) {
            _writer.writeBytes(1, _instance.agentContent);
        }
        if (!!_instance.trainingPhrases) {
            const keys_2 = Object.keys(_instance.trainingPhrases);
            if (keys_2.length) {
                const repeated_2 = keys_2
                    .map(key => ({
                    key: key,
                    value: _instance.trainingPhrases[key]
                }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(2, repeated_2, ExportBenchmarkAgentResponse.TrainingPhrasesEntry
                    .serializeBinaryToWriter);
            }
        }
    }
    get agentContent() {
        return this._agentContent;
    }
    set agentContent(value) {
        this._agentContent = value;
    }
    get trainingPhrases() {
        return this._trainingPhrases;
    }
    set trainingPhrases(value) {
        this._trainingPhrases = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExportBenchmarkAgentResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            agentContent: this.agentContent
                ? this.agentContent.subarray(0)
                : new Uint8Array(),
            trainingPhrases: this.trainingPhrases
                ? Object.keys(this.trainingPhrases).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.trainingPhrases[k]
                        ? this.trainingPhrases[k].toObject()
                        : undefined })), {})
                : {}
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            agentContent: this.agentContent
                ? uint8ArrayToBase64(this.agentContent)
                : '',
            trainingPhrases: this.trainingPhrases
                ? Object.keys(this.trainingPhrases).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.trainingPhrases[k]
                        ? this.trainingPhrases[k].toJSON()
                        : null })), {})
                : {}
        };
    }
}
ExportBenchmarkAgentResponse.id = 'ondewo.nlu.ExportBenchmarkAgentResponse';
(function (ExportBenchmarkAgentResponse) {
    /**
     * Message implementation for ondewo.nlu.TrainingPhrasesEntry
     */
    class TrainingPhrasesEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of TrainingPhrasesEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value
                ? new ListTrainingPhrasesResponse(_value.value)
                : undefined;
            TrainingPhrasesEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new TrainingPhrasesEntry();
            TrainingPhrasesEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = new ListTrainingPhrasesResponse();
                        _reader.readMessage(_instance.value, ListTrainingPhrasesResponse
                            .deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            TrainingPhrasesEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeMessage(2, _instance.value, ListTrainingPhrasesResponse.serializeBinaryToWriter);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            TrainingPhrasesEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value ? this.value.toObject() : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value ? this.value.toProtobufJSON(options) : null
            };
        }
    }
    TrainingPhrasesEntry.id = 'ondewo.nlu.TrainingPhrasesEntry';
    ExportBenchmarkAgentResponse.TrainingPhrasesEntry = TrainingPhrasesEntry;
})(ExportBenchmarkAgentResponse || (ExportBenchmarkAgentResponse = {}));
/**
 * Message implementation for ondewo.nlu.OptimizeRankingMatchRequest
 */
class OptimizeRankingMatchRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of OptimizeRankingMatchRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCodes = (_value.languageCodes || []).slice();
        this.optimizationConfigs = (_value.optimizationConfigs || []).map(m => new RankingMatchOptimizationConfig(m));
        this.inPlace = _value.inPlace;
        OptimizeRankingMatchRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new OptimizeRankingMatchRequest();
        OptimizeRankingMatchRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCodes = _instance.languageCodes || [];
        _instance.optimizationConfigs = _instance.optimizationConfigs || [];
        _instance.inPlace = _instance.inPlace || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    (_instance.languageCodes = _instance.languageCodes || []).push(_reader.readString());
                    break;
                case 3:
                    const messageInitializer3 = new RankingMatchOptimizationConfig();
                    _reader.readMessage(messageInitializer3, RankingMatchOptimizationConfig.deserializeBinaryFromReader);
                    (_instance.optimizationConfigs =
                        _instance.optimizationConfigs || []).push(messageInitializer3);
                    break;
                case 4:
                    _instance.inPlace = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        OptimizeRankingMatchRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCodes && _instance.languageCodes.length) {
            _writer.writeRepeatedString(2, _instance.languageCodes);
        }
        if (_instance.optimizationConfigs && _instance.optimizationConfigs.length) {
            _writer.writeRepeatedMessage(3, _instance.optimizationConfigs, RankingMatchOptimizationConfig.serializeBinaryToWriter);
        }
        if (_instance.inPlace) {
            _writer.writeBool(4, _instance.inPlace);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCodes() {
        return this._languageCodes;
    }
    set languageCodes(value) {
        this._languageCodes = value;
    }
    get optimizationConfigs() {
        return this._optimizationConfigs;
    }
    set optimizationConfigs(value) {
        this._optimizationConfigs = value;
    }
    get inPlace() {
        return this._inPlace;
    }
    set inPlace(value) {
        this._inPlace = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        OptimizeRankingMatchRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCodes: (this.languageCodes || []).slice(),
            optimizationConfigs: (this.optimizationConfigs || []).map(m => m.toObject()),
            inPlace: this.inPlace
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            languageCodes: (this.languageCodes || []).slice(),
            optimizationConfigs: (this.optimizationConfigs || []).map(m => m.toProtobufJSON(options)),
            inPlace: this.inPlace
        };
    }
}
OptimizeRankingMatchRequest.id = 'ondewo.nlu.OptimizeRankingMatchRequest';
/**
 * Message implementation for ondewo.nlu.RankingMatchOptimizationConfig
 */
class RankingMatchOptimizationConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RankingMatchOptimizationConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.languageCode = _value.languageCode;
        this.nSplits = _value.nSplits;
        this.randomSeed = _value.randomSeed;
        this.initialThresholds = _value.initialThresholds
            ? new googleProtobuf003.Struct(_value.initialThresholds)
            : undefined;
        RankingMatchOptimizationConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RankingMatchOptimizationConfig();
        RankingMatchOptimizationConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.languageCode = _instance.languageCode || '';
        _instance.nSplits = _instance.nSplits || 0;
        _instance.randomSeed = _instance.randomSeed || 0;
        _instance.initialThresholds = _instance.initialThresholds || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.languageCode = _reader.readString();
                    break;
                case 2:
                    _instance.nSplits = _reader.readInt32();
                    break;
                case 3:
                    _instance.randomSeed = _reader.readInt32();
                    break;
                case 4:
                    _instance.initialThresholds = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.initialThresholds, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RankingMatchOptimizationConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.languageCode) {
            _writer.writeString(1, _instance.languageCode);
        }
        if (_instance.nSplits) {
            _writer.writeInt32(2, _instance.nSplits);
        }
        if (_instance.randomSeed) {
            _writer.writeInt32(3, _instance.randomSeed);
        }
        if (_instance.initialThresholds) {
            _writer.writeMessage(4, _instance.initialThresholds, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get nSplits() {
        return this._nSplits;
    }
    set nSplits(value) {
        this._nSplits = value;
    }
    get randomSeed() {
        return this._randomSeed;
    }
    set randomSeed(value) {
        this._randomSeed = value;
    }
    get initialThresholds() {
        return this._initialThresholds;
    }
    set initialThresholds(value) {
        this._initialThresholds = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RankingMatchOptimizationConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            languageCode: this.languageCode,
            nSplits: this.nSplits,
            randomSeed: this.randomSeed,
            initialThresholds: this.initialThresholds
                ? this.initialThresholds.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            languageCode: this.languageCode,
            nSplits: this.nSplits,
            randomSeed: this.randomSeed,
            initialThresholds: this.initialThresholds
                ? this.initialThresholds.toProtobufJSON(options)
                : null
        };
    }
}
RankingMatchOptimizationConfig.id = 'ondewo.nlu.RankingMatchOptimizationConfig';
/**
 * Message implementation for ondewo.nlu.OptimizeRankingMatchResponse
 */
class OptimizeRankingMatchResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of OptimizeRankingMatchResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.optimizationInfo = _value.optimizationInfo
            ? new googleProtobuf003.Struct(_value.optimizationInfo)
            : undefined;
        this.optimizedOndewoConfig = _value.optimizedOndewoConfig
            ? new googleProtobuf003.Struct(_value.optimizedOndewoConfig)
            : undefined;
        OptimizeRankingMatchResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new OptimizeRankingMatchResponse();
        OptimizeRankingMatchResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.optimizationInfo = _instance.optimizationInfo || undefined;
        _instance.optimizedOndewoConfig =
            _instance.optimizedOndewoConfig || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.optimizationInfo = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.optimizationInfo, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.optimizedOndewoConfig = new googleProtobuf003.Struct();
                    _reader.readMessage(_instance.optimizedOndewoConfig, googleProtobuf003.Struct.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        OptimizeRankingMatchResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.optimizationInfo) {
            _writer.writeMessage(1, _instance.optimizationInfo, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
        if (_instance.optimizedOndewoConfig) {
            _writer.writeMessage(3, _instance.optimizedOndewoConfig, googleProtobuf003.Struct.serializeBinaryToWriter);
        }
    }
    get optimizationInfo() {
        return this._optimizationInfo;
    }
    set optimizationInfo(value) {
        this._optimizationInfo = value;
    }
    get optimizedOndewoConfig() {
        return this._optimizedOndewoConfig;
    }
    set optimizedOndewoConfig(value) {
        this._optimizedOndewoConfig = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        OptimizeRankingMatchResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            optimizationInfo: this.optimizationInfo
                ? this.optimizationInfo.toObject()
                : undefined,
            optimizedOndewoConfig: this.optimizedOndewoConfig
                ? this.optimizedOndewoConfig.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            optimizationInfo: this.optimizationInfo
                ? this.optimizationInfo.toProtobufJSON(options)
                : null,
            optimizedOndewoConfig: this.optimizedOndewoConfig
                ? this.optimizedOndewoConfig.toProtobufJSON(options)
                : null
        };
    }
}
OptimizeRankingMatchResponse.id = 'ondewo.nlu.OptimizeRankingMatchResponse';
/**
 * Message implementation for ondewo.nlu.ImportAgentRequest
 */
class ImportAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ImportAgentRequest to deeply clone from
     */
    constructor(_value) {
        this._agent = ImportAgentRequest.AgentCase.none;
        _value = _value || {};
        this.parent = _value.parent;
        this.agentUri = _value.agentUri;
        this.agentContent = _value.agentContent;
        ImportAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ImportAgentRequest();
        ImportAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.agentUri = _reader.readString();
                    break;
                case 3:
                    _instance.agentContent = _reader.readBytes();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ImportAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.agentUri || _instance.agentUri === '') {
            _writer.writeString(2, _instance.agentUri);
        }
        if (_instance.agentContent && _instance.agentContent.length) {
            _writer.writeBytes(3, _instance.agentContent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get agentUri() {
        return this._agentUri;
    }
    set agentUri(value) {
        if (value !== undefined && value !== null) {
            this._agentContent = undefined;
            this._agent = ImportAgentRequest.AgentCase.agentUri;
        }
        this._agentUri = value;
    }
    get agentContent() {
        return this._agentContent;
    }
    set agentContent(value) {
        if (value !== undefined && value !== null) {
            this._agentUri = undefined;
            this._agent = ImportAgentRequest.AgentCase.agentContent;
        }
        this._agentContent = value;
    }
    get agent() {
        return this._agent;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ImportAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            agentUri: this.agentUri,
            agentContent: this.agentContent
                ? this.agentContent.subarray(0)
                : new Uint8Array()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            agentUri: this.agentUri === null || this.agentUri === undefined
                ? null
                : this.agentUri,
            agentContent: this.agentContent
                ? uint8ArrayToBase64(this.agentContent)
                : ''
        };
    }
}
ImportAgentRequest.id = 'ondewo.nlu.ImportAgentRequest';
(function (ImportAgentRequest) {
    let AgentCase;
    (function (AgentCase) {
        AgentCase[AgentCase["none"] = 0] = "none";
        AgentCase[AgentCase["agentUri"] = 1] = "agentUri";
        AgentCase[AgentCase["agentContent"] = 2] = "agentContent";
    })(AgentCase = ImportAgentRequest.AgentCase || (ImportAgentRequest.AgentCase = {}));
})(ImportAgentRequest || (ImportAgentRequest = {}));
/**
 * Message implementation for ondewo.nlu.RestoreAgentRequest
 */
class RestoreAgentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RestoreAgentRequest to deeply clone from
     */
    constructor(_value) {
        this._agent = RestoreAgentRequest.AgentCase.none;
        _value = _value || {};
        this.parent = _value.parent;
        this.agentUri = _value.agentUri;
        this.agentContent = _value.agentContent;
        RestoreAgentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RestoreAgentRequest();
        RestoreAgentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.agentUri = _reader.readString();
                    break;
                case 3:
                    _instance.agentContent = _reader.readBytes();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RestoreAgentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.agentUri || _instance.agentUri === '') {
            _writer.writeString(2, _instance.agentUri);
        }
        if (_instance.agentContent && _instance.agentContent.length) {
            _writer.writeBytes(3, _instance.agentContent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get agentUri() {
        return this._agentUri;
    }
    set agentUri(value) {
        if (value !== undefined && value !== null) {
            this._agentContent = undefined;
            this._agent = RestoreAgentRequest.AgentCase.agentUri;
        }
        this._agentUri = value;
    }
    get agentContent() {
        return this._agentContent;
    }
    set agentContent(value) {
        if (value !== undefined && value !== null) {
            this._agentUri = undefined;
            this._agent = RestoreAgentRequest.AgentCase.agentContent;
        }
        this._agentContent = value;
    }
    get agent() {
        return this._agent;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RestoreAgentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            agentUri: this.agentUri,
            agentContent: this.agentContent
                ? this.agentContent.subarray(0)
                : new Uint8Array()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            agentUri: this.agentUri === null || this.agentUri === undefined
                ? null
                : this.agentUri,
            agentContent: this.agentContent
                ? uint8ArrayToBase64(this.agentContent)
                : ''
        };
    }
}
RestoreAgentRequest.id = 'ondewo.nlu.RestoreAgentRequest';
(function (RestoreAgentRequest) {
    let AgentCase;
    (function (AgentCase) {
        AgentCase[AgentCase["none"] = 0] = "none";
        AgentCase[AgentCase["agentUri"] = 1] = "agentUri";
        AgentCase[AgentCase["agentContent"] = 2] = "agentContent";
    })(AgentCase = RestoreAgentRequest.AgentCase || (RestoreAgentRequest.AgentCase = {}));
})(RestoreAgentRequest || (RestoreAgentRequest = {}));
/**
 * Message implementation for ondewo.nlu.GetAgentStatisticsRequest
 */
class GetAgentStatisticsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAgentStatisticsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.format = _value.format;
        this.languageCode = _value.languageCode;
        this.type = _value.type;
        GetAgentStatisticsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAgentStatisticsRequest();
        GetAgentStatisticsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.format = _instance.format || 0;
        _instance.languageCode = _instance.languageCode || '';
        _instance.type = _instance.type || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.format = _reader.readEnum();
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.type = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAgentStatisticsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.format) {
            _writer.writeEnum(2, _instance.format);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.type) {
            _writer.writeEnum(4, _instance.type);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get format() {
        return this._format;
    }
    set format(value) {
        this._format = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAgentStatisticsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            format: this.format,
            languageCode: this.languageCode,
            type: this.type
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            format: ReportFormat[this.format === null || this.format === undefined ? 0 : this.format],
            languageCode: this.languageCode,
            type: ReportType[this.type === null || this.type === undefined ? 0 : this.type]
        };
    }
}
GetAgentStatisticsRequest.id = 'ondewo.nlu.GetAgentStatisticsRequest';
/**
 * Message implementation for ondewo.nlu.GetAgentStatisticsResponse
 */
class GetAgentStatisticsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAgentStatisticsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.reports = _value.reports;
        this.format = _value.format;
        this.type = _value.type;
        GetAgentStatisticsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAgentStatisticsResponse();
        GetAgentStatisticsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.reports = _instance.reports || new Uint8Array();
        _instance.format = _instance.format || 0;
        _instance.type = _instance.type || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.reports = _reader.readBytes();
                    break;
                case 2:
                    _instance.format = _reader.readEnum();
                    break;
                case 3:
                    _instance.type = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAgentStatisticsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.reports && _instance.reports.length) {
            _writer.writeBytes(1, _instance.reports);
        }
        if (_instance.format) {
            _writer.writeEnum(2, _instance.format);
        }
        if (_instance.type) {
            _writer.writeEnum(3, _instance.type);
        }
    }
    get reports() {
        return this._reports;
    }
    set reports(value) {
        this._reports = value;
    }
    get format() {
        return this._format;
    }
    set format(value) {
        this._format = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAgentStatisticsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            reports: this.reports ? this.reports.subarray(0) : new Uint8Array(),
            format: this.format,
            type: this.type
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            reports: this.reports ? uint8ArrayToBase64(this.reports) : '',
            format: ReportFormat[this.format === null || this.format === undefined ? 0 : this.format],
            type: ReportType[this.type === null || this.type === undefined ? 0 : this.type]
        };
    }
}
GetAgentStatisticsResponse.id = 'ondewo.nlu.GetAgentStatisticsResponse';
/**
 * Message implementation for ondewo.nlu.AddUserToProjectRequest
 */
class AddUserToProjectRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddUserToProjectRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.userId = _value.userId;
        this.projectRoleId = _value.projectRoleId;
        AddUserToProjectRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddUserToProjectRequest();
        AddUserToProjectRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.userId = _instance.userId || '';
        _instance.projectRoleId = _instance.projectRoleId || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.userId = _reader.readString();
                    break;
                case 4:
                    _instance.projectRoleId = _reader.readUint32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddUserToProjectRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.userId) {
            _writer.writeString(2, _instance.userId);
        }
        if (_instance.projectRoleId) {
            _writer.writeUint32(4, _instance.projectRoleId);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get userId() {
        return this._userId;
    }
    set userId(value) {
        this._userId = value;
    }
    get projectRoleId() {
        return this._projectRoleId;
    }
    set projectRoleId(value) {
        this._projectRoleId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddUserToProjectRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            userId: this.userId,
            projectRoleId: this.projectRoleId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            userId: this.userId,
            projectRoleId: this.projectRoleId
        };
    }
}
AddUserToProjectRequest.id = 'ondewo.nlu.AddUserToProjectRequest';
/**
 * Message implementation for ondewo.nlu.RemoveUserFromProjectRequest
 */
class RemoveUserFromProjectRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveUserFromProjectRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.userId = _value.userId;
        RemoveUserFromProjectRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveUserFromProjectRequest();
        RemoveUserFromProjectRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.userId = _instance.userId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.userId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemoveUserFromProjectRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.userId) {
            _writer.writeString(2, _instance.userId);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get userId() {
        return this._userId;
    }
    set userId(value) {
        this._userId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveUserFromProjectRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            userId: this.userId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            userId: this.userId
        };
    }
}
RemoveUserFromProjectRequest.id = 'ondewo.nlu.RemoveUserFromProjectRequest';
/**
 * Message implementation for ondewo.nlu.ListUsersInProjectRequest
 */
class ListUsersInProjectRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListUsersInProjectRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.pageToken = _value.pageToken;
        ListUsersInProjectRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListUsersInProjectRequest();
        ListUsersInProjectRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListUsersInProjectRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.pageToken) {
            _writer.writeString(2, _instance.pageToken);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListUsersInProjectRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            pageToken: this.pageToken
        };
    }
}
ListUsersInProjectRequest.id = 'ondewo.nlu.ListUsersInProjectRequest';
/**
 * Message implementation for ondewo.nlu.UserInProject
 */
class UserInProject {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UserInProject to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.user = _value.user ? new User(_value.user) : undefined;
        this.roleId = _value.roleId;
        UserInProject.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UserInProject();
        UserInProject.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.user = _instance.user || undefined;
        _instance.roleId = _instance.roleId || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.user = new User();
                    _reader.readMessage(_instance.user, User.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.roleId = _reader.readUint32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UserInProject.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.user) {
            _writer.writeMessage(2, _instance.user, User.serializeBinaryToWriter);
        }
        if (_instance.roleId) {
            _writer.writeUint32(3, _instance.roleId);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get user() {
        return this._user;
    }
    set user(value) {
        this._user = value;
    }
    get roleId() {
        return this._roleId;
    }
    set roleId(value) {
        this._roleId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UserInProject.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            user: this.user ? this.user.toObject() : undefined,
            roleId: this.roleId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            user: this.user ? this.user.toProtobufJSON(options) : null,
            roleId: this.roleId
        };
    }
}
UserInProject.id = 'ondewo.nlu.UserInProject';
/**
 * Message implementation for ondewo.nlu.ListUsersInProjectResponse
 */
class ListUsersInProjectResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListUsersInProjectResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.users = (_value.users || []).map(m => new UserInProject(m));
        this.nextPageToken = _value.nextPageToken;
        ListUsersInProjectResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListUsersInProjectResponse();
        ListUsersInProjectResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.users = _instance.users || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new UserInProject();
                    _reader.readMessage(messageInitializer1, UserInProject.deserializeBinaryFromReader);
                    (_instance.users = _instance.users || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListUsersInProjectResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.users && _instance.users.length) {
            _writer.writeRepeatedMessage(1, _instance.users, UserInProject.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get users() {
        return this._users;
    }
    set users(value) {
        this._users = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListUsersInProjectResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            users: (this.users || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            users: (this.users || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListUsersInProjectResponse.id = 'ondewo.nlu.ListUsersInProjectResponse';
/**
 * Message implementation for ondewo.nlu.GetPlatformInfoResponse
 */
class GetPlatformInfoResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetPlatformInfoResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.version = _value.version;
        this.commitHash = _value.commitHash;
        GetPlatformInfoResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetPlatformInfoResponse();
        GetPlatformInfoResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.version = _instance.version || '';
        _instance.commitHash = _instance.commitHash || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.version = _reader.readString();
                    break;
                case 2:
                    _instance.commitHash = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetPlatformInfoResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.version) {
            _writer.writeString(1, _instance.version);
        }
        if (_instance.commitHash) {
            _writer.writeString(2, _instance.commitHash);
        }
    }
    get version() {
        return this._version;
    }
    set version(value) {
        this._version = value;
    }
    get commitHash() {
        return this._commitHash;
    }
    set commitHash(value) {
        this._commitHash = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetPlatformInfoResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            version: this.version,
            commitHash: this.commitHash
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            version: this.version,
            commitHash: this.commitHash
        };
    }
}
GetPlatformInfoResponse.id = 'ondewo.nlu.GetPlatformInfoResponse';
/**
 * Message implementation for ondewo.nlu.ListProjectPermissionsRequest
 */
class ListProjectPermissionsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListProjectPermissionsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pageToken = _value.pageToken;
        ListProjectPermissionsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListProjectPermissionsRequest();
        ListProjectPermissionsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListProjectPermissionsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pageToken) {
            _writer.writeString(1, _instance.pageToken);
        }
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListProjectPermissionsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pageToken: this.pageToken
        };
    }
}
ListProjectPermissionsRequest.id = 'ondewo.nlu.ListProjectPermissionsRequest';
/**
 * Message implementation for ondewo.nlu.ListProjectPermissionsResponse
 */
class ListProjectPermissionsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListProjectPermissionsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.permissions = (_value.permissions || []).slice();
        this.nextPageToken = _value.nextPageToken;
        ListProjectPermissionsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListProjectPermissionsResponse();
        ListProjectPermissionsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.permissions = _instance.permissions || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.permissions = _instance.permissions || []).push(_reader.readString());
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListProjectPermissionsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.permissions && _instance.permissions.length) {
            _writer.writeRepeatedString(1, _instance.permissions);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get permissions() {
        return this._permissions;
    }
    set permissions(value) {
        this._permissions = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListProjectPermissionsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            permissions: (this.permissions || []).slice(),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            permissions: (this.permissions || []).slice(),
            nextPageToken: this.nextPageToken
        };
    }
}
ListProjectPermissionsResponse.id = 'ondewo.nlu.ListProjectPermissionsResponse';
/**
 * Message implementation for ondewo.nlu.SetAgentStatusRequest
 */
class SetAgentStatusRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SetAgentStatusRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.status = _value.status;
        this.agentView = _value.agentView;
        SetAgentStatusRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SetAgentStatusRequest();
        SetAgentStatusRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.status = _instance.status || 0;
        _instance.agentView = _instance.agentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.status = _reader.readEnum();
                    break;
                case 3:
                    _instance.agentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SetAgentStatusRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.status) {
            _writer.writeEnum(2, _instance.status);
        }
        if (_instance.agentView) {
            _writer.writeEnum(3, _instance.agentView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get agentView() {
        return this._agentView;
    }
    set agentView(value) {
        this._agentView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SetAgentStatusRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            status: this.status,
            agentView: this.agentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            status: AgentStatus[this.status === null || this.status === undefined ? 0 : this.status],
            agentView: AgentView[this.agentView === null || this.agentView === undefined
                ? 0
                : this.agentView]
        };
    }
}
SetAgentStatusRequest.id = 'ondewo.nlu.SetAgentStatusRequest';
/**
 * Message implementation for ondewo.nlu.AgentSorting
 */
class AgentSorting {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AgentSorting to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sortingField = _value.sortingField;
        this.sortingMode = _value.sortingMode;
        AgentSorting.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AgentSorting();
        AgentSorting.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sortingField = _instance.sortingField || 0;
        _instance.sortingMode = _instance.sortingMode || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sortingField = _reader.readEnum();
                    break;
                case 2:
                    _instance.sortingMode = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AgentSorting.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sortingField) {
            _writer.writeEnum(1, _instance.sortingField);
        }
        if (_instance.sortingMode) {
            _writer.writeEnum(2, _instance.sortingMode);
        }
    }
    get sortingField() {
        return this._sortingField;
    }
    set sortingField(value) {
        this._sortingField = value;
    }
    get sortingMode() {
        return this._sortingMode;
    }
    set sortingMode(value) {
        this._sortingMode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AgentSorting.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sortingField: this.sortingField,
            sortingMode: this.sortingMode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sortingField: AgentSorting.AgentSortingField[this.sortingField === null || this.sortingField === undefined
                ? 0
                : this.sortingField],
            sortingMode: SortingMode[this.sortingMode === null || this.sortingMode === undefined
                ? 0
                : this.sortingMode]
        };
    }
}
AgentSorting.id = 'ondewo.nlu.AgentSorting';
(function (AgentSorting) {
    let AgentSortingField;
    (function (AgentSortingField) {
        AgentSortingField[AgentSortingField["NO_AGENT_SORTING"] = 0] = "NO_AGENT_SORTING";
        AgentSortingField[AgentSortingField["SORT_AGENT_BY_NAME"] = 1] = "SORT_AGENT_BY_NAME";
        AgentSortingField[AgentSortingField["SORT_AGENT_BY_CREATION_DATE"] = 2] = "SORT_AGENT_BY_CREATION_DATE";
        AgentSortingField[AgentSortingField["SORT_AGENT_BY_LAST_UPDATED"] = 3] = "SORT_AGENT_BY_LAST_UPDATED";
        AgentSortingField[AgentSortingField["SORT_AGENT_BY_OWNER_NAME"] = 4] = "SORT_AGENT_BY_OWNER_NAME";
    })(AgentSortingField = AgentSorting.AgentSortingField || (AgentSorting.AgentSortingField = {}));
})(AgentSorting || (AgentSorting = {}));
/**
 * Message implementation for ondewo.nlu.SetResourcesRequest
 */
class SetResourcesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SetResourcesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.name = _value.name;
        this.type = _value.type;
        this.resourceFile = _value.resourceFile;
        this.languageCode = _value.languageCode;
        SetResourcesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SetResourcesRequest();
        SetResourcesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.name = _instance.name || '';
        _instance.type = _instance.type || '';
        _instance.resourceFile = _instance.resourceFile || new Uint8Array();
        _instance.languageCode = _instance.languageCode || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    _instance.type = _reader.readString();
                    break;
                case 4:
                    _instance.resourceFile = _reader.readBytes();
                    break;
                case 5:
                    _instance.languageCode = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SetResourcesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.type) {
            _writer.writeString(3, _instance.type);
        }
        if (_instance.resourceFile && _instance.resourceFile.length) {
            _writer.writeBytes(4, _instance.resourceFile);
        }
        if (_instance.languageCode) {
            _writer.writeString(5, _instance.languageCode);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get resourceFile() {
        return this._resourceFile;
    }
    set resourceFile(value) {
        this._resourceFile = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SetResourcesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            resourceFile: this.resourceFile
                ? this.resourceFile.subarray(0)
                : new Uint8Array(),
            languageCode: this.languageCode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            resourceFile: this.resourceFile
                ? uint8ArrayToBase64(this.resourceFile)
                : '',
            languageCode: this.languageCode
        };
    }
}
SetResourcesRequest.id = 'ondewo.nlu.SetResourcesRequest';
/**
 * Message implementation for ondewo.nlu.DeleteResourcesRequest
 */
class DeleteResourcesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteResourcesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.name = _value.name;
        this.type = _value.type;
        this.languageCode = _value.languageCode;
        DeleteResourcesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteResourcesRequest();
        DeleteResourcesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.name = _instance.name || '';
        _instance.type = _instance.type || '';
        _instance.languageCode = _instance.languageCode || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    _instance.type = _reader.readString();
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteResourcesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.type) {
            _writer.writeString(3, _instance.type);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteResourcesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            languageCode: this.languageCode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            languageCode: this.languageCode
        };
    }
}
DeleteResourcesRequest.id = 'ondewo.nlu.DeleteResourcesRequest';
/**
 * Message implementation for ondewo.nlu.ExportResourcesRequest
 */
class ExportResourcesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExportResourcesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.name = _value.name;
        this.type = _value.type;
        this.languageCode = _value.languageCode;
        ExportResourcesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExportResourcesRequest();
        ExportResourcesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.name = _instance.name || '';
        _instance.type = _instance.type || '';
        _instance.languageCode = _instance.languageCode || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    _instance.type = _reader.readString();
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExportResourcesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.type) {
            _writer.writeString(3, _instance.type);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExportResourcesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            languageCode: this.languageCode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            languageCode: this.languageCode
        };
    }
}
ExportResourcesRequest.id = 'ondewo.nlu.ExportResourcesRequest';
/**
 * Message implementation for ondewo.nlu.ExportResourcesResponse
 */
class ExportResourcesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExportResourcesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.name = _value.name;
        this.type = _value.type;
        this.languageCode = _value.languageCode;
        this.resourceFile = _value.resourceFile;
        ExportResourcesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExportResourcesResponse();
        ExportResourcesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.name = _instance.name || '';
        _instance.type = _instance.type || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.resourceFile = _instance.resourceFile || new Uint8Array();
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    _instance.type = _reader.readString();
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.resourceFile = _reader.readBytes();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExportResourcesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.type) {
            _writer.writeString(3, _instance.type);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.resourceFile && _instance.resourceFile.length) {
            _writer.writeBytes(5, _instance.resourceFile);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get resourceFile() {
        return this._resourceFile;
    }
    set resourceFile(value) {
        this._resourceFile = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExportResourcesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            languageCode: this.languageCode,
            resourceFile: this.resourceFile
                ? this.resourceFile.subarray(0)
                : new Uint8Array()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            name: this.name,
            type: this.type,
            languageCode: this.languageCode,
            resourceFile: this.resourceFile
                ? uint8ArrayToBase64(this.resourceFile)
                : ''
        };
    }
}
ExportResourcesResponse.id = 'ondewo.nlu.ExportResourcesResponse';
/**
 * Message implementation for ondewo.nlu.GetModelStatusesRequest
 */
class GetModelStatusesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetModelStatusesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.cacheVersion = _value.cacheVersion;
        this.languageCode = _value.languageCode;
        this.modelName = _value.modelName;
        GetModelStatusesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetModelStatusesRequest();
        GetModelStatusesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.cacheVersion = _instance.cacheVersion || 0;
        _instance.languageCode = _instance.languageCode || '';
        _instance.modelName = _instance.modelName || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.cacheVersion = _reader.readInt32();
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.modelName = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetModelStatusesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.cacheVersion) {
            _writer.writeInt32(2, _instance.cacheVersion);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.modelName) {
            _writer.writeString(4, _instance.modelName);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get cacheVersion() {
        return this._cacheVersion;
    }
    set cacheVersion(value) {
        this._cacheVersion = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get modelName() {
        return this._modelName;
    }
    set modelName(value) {
        this._modelName = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetModelStatusesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            cacheVersion: this.cacheVersion,
            languageCode: this.languageCode,
            modelName: this.modelName
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            cacheVersion: this.cacheVersion,
            languageCode: this.languageCode,
            modelName: this.modelName
        };
    }
}
GetModelStatusesRequest.id = 'ondewo.nlu.GetModelStatusesRequest';
/**
 * Message implementation for ondewo.nlu.ModelStatus
 */
class ModelStatus {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ModelStatus to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.cacheVersion = _value.cacheVersion;
        this.languageCode = _value.languageCode;
        this.modelName = _value.modelName;
        this.statusSetTime = _value.statusSetTime
            ? new googleProtobuf003.Timestamp(_value.statusSetTime)
            : undefined;
        this.config = _value.config;
        this.status = _value.status;
        ModelStatus.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ModelStatus();
        ModelStatus.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.cacheVersion = _instance.cacheVersion || 0;
        _instance.languageCode = _instance.languageCode || '';
        _instance.modelName = _instance.modelName || '';
        _instance.statusSetTime = _instance.statusSetTime || undefined;
        _instance.config = _instance.config || '';
        _instance.status = _instance.status || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.cacheVersion = _reader.readInt32();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.modelName = _reader.readString();
                    break;
                case 4:
                    _instance.statusSetTime = new googleProtobuf003.Timestamp();
                    _reader.readMessage(_instance.statusSetTime, googleProtobuf003.Timestamp.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.config = _reader.readString();
                    break;
                case 6:
                    _instance.status = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ModelStatus.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.cacheVersion) {
            _writer.writeInt32(1, _instance.cacheVersion);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.modelName) {
            _writer.writeString(3, _instance.modelName);
        }
        if (_instance.statusSetTime) {
            _writer.writeMessage(4, _instance.statusSetTime, googleProtobuf003.Timestamp.serializeBinaryToWriter);
        }
        if (_instance.config) {
            _writer.writeString(5, _instance.config);
        }
        if (_instance.status) {
            _writer.writeEnum(6, _instance.status);
        }
    }
    get cacheVersion() {
        return this._cacheVersion;
    }
    set cacheVersion(value) {
        this._cacheVersion = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get modelName() {
        return this._modelName;
    }
    set modelName(value) {
        this._modelName = value;
    }
    get statusSetTime() {
        return this._statusSetTime;
    }
    set statusSetTime(value) {
        this._statusSetTime = value;
    }
    get config() {
        return this._config;
    }
    set config(value) {
        this._config = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ModelStatus.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            cacheVersion: this.cacheVersion,
            languageCode: this.languageCode,
            modelName: this.modelName,
            statusSetTime: this.statusSetTime
                ? this.statusSetTime.toObject()
                : undefined,
            config: this.config,
            status: this.status
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            cacheVersion: this.cacheVersion,
            languageCode: this.languageCode,
            modelName: this.modelName,
            statusSetTime: this.statusSetTime
                ? this.statusSetTime.toProtobufJSON(options)
                : null,
            config: this.config,
            status: ModelStatus.StatusName[this.status === null || this.status === undefined ? 0 : this.status]
        };
    }
}
ModelStatus.id = 'ondewo.nlu.ModelStatus';
(function (ModelStatus) {
    let StatusName;
    (function (StatusName) {
        StatusName[StatusName["UNKNOWN"] = 0] = "UNKNOWN";
        StatusName[StatusName["INITIALIZING"] = 1] = "INITIALIZING";
        StatusName[StatusName["INITIALIZED"] = 2] = "INITIALIZED";
        StatusName[StatusName["LOADING_DATA"] = 3] = "LOADING_DATA";
        StatusName[StatusName["TRAINING"] = 4] = "TRAINING";
        StatusName[StatusName["TESTING"] = 5] = "TESTING";
        StatusName[StatusName["TRAINED"] = 6] = "TRAINED";
    })(StatusName = ModelStatus.StatusName || (ModelStatus.StatusName = {}));
})(ModelStatus || (ModelStatus = {}));
/**
 * Message implementation for ondewo.nlu.GetModelStatusesResponse
 */
class GetModelStatusesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetModelStatusesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.modelStatuses = (_value.modelStatuses || []).map(m => new ModelStatus(m));
        GetModelStatusesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetModelStatusesResponse();
        GetModelStatusesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.modelStatuses = _instance.modelStatuses || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new ModelStatus();
                    _reader.readMessage(messageInitializer1, ModelStatus.deserializeBinaryFromReader);
                    (_instance.modelStatuses = _instance.modelStatuses || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetModelStatusesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.modelStatuses && _instance.modelStatuses.length) {
            _writer.writeRepeatedMessage(1, _instance.modelStatuses, ModelStatus.serializeBinaryToWriter);
        }
    }
    get modelStatuses() {
        return this._modelStatuses;
    }
    set modelStatuses(value) {
        this._modelStatuses = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetModelStatusesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            modelStatuses: (this.modelStatuses || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            modelStatuses: (this.modelStatuses || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetModelStatusesResponse.id = 'ondewo.nlu.GetModelStatusesResponse';
/**
 * Message implementation for ondewo.nlu.CustomPlatformInfo
 */
class CustomPlatformInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CustomPlatformInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.platform = _value.platform;
        this.displayName = _value.displayName;
        this.position = _value.position;
        CustomPlatformInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CustomPlatformInfo();
        CustomPlatformInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.platform = _instance.platform || 0;
        _instance.displayName = _instance.displayName || '';
        _instance.position = _instance.position || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.platform = _reader.readEnum();
                    break;
                case 2:
                    _instance.displayName = _reader.readString();
                    break;
                case 3:
                    _instance.position = _reader.readUint32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CustomPlatformInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.platform) {
            _writer.writeEnum(1, _instance.platform);
        }
        if (_instance.displayName) {
            _writer.writeString(2, _instance.displayName);
        }
        if (_instance.position) {
            _writer.writeUint32(3, _instance.position);
        }
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    get displayName() {
        return this._displayName;
    }
    set displayName(value) {
        this._displayName = value;
    }
    get position() {
        return this._position;
    }
    set position(value) {
        this._position = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CustomPlatformInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            platform: this.platform,
            displayName: this.displayName,
            position: this.position
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            platform: Intent.Message.Platform[this.platform === null || this.platform === undefined
                ? 0
                : this.platform],
            displayName: this.displayName,
            position: this.position
        };
    }
}
CustomPlatformInfo.id = 'ondewo.nlu.CustomPlatformInfo';
/**
 * Message implementation for ondewo.nlu.GetPlatformMappingRequest
 */
class GetPlatformMappingRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetPlatformMappingRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        GetPlatformMappingRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetPlatformMappingRequest();
        GetPlatformMappingRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetPlatformMappingRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetPlatformMappingRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent
        };
    }
}
GetPlatformMappingRequest.id = 'ondewo.nlu.GetPlatformMappingRequest';
/**
 * Message implementation for ondewo.nlu.PlatformMapping
 */
class PlatformMapping {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PlatformMapping to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.platformInfo = (_value.platformInfo || []).map(m => new CustomPlatformInfo(m));
        PlatformMapping.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PlatformMapping();
        PlatformMapping.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.platformInfo = _instance.platformInfo || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new CustomPlatformInfo();
                    _reader.readMessage(messageInitializer2, CustomPlatformInfo.deserializeBinaryFromReader);
                    (_instance.platformInfo = _instance.platformInfo || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        PlatformMapping.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.platformInfo && _instance.platformInfo.length) {
            _writer.writeRepeatedMessage(2, _instance.platformInfo, CustomPlatformInfo.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get platformInfo() {
        return this._platformInfo;
    }
    set platformInfo(value) {
        this._platformInfo = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PlatformMapping.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            platformInfo: (this.platformInfo || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            platformInfo: (this.platformInfo || []).map(m => m.toProtobufJSON(options))
        };
    }
}
PlatformMapping.id = 'ondewo.nlu.PlatformMapping';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Agents.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_AGENTS_CLIENT_SETTINGS = new InjectionToken('GRPC_AGENTS_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.Agents
 */
class AgentsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.Agents/CreateAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Agent>>
             */
            createAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/CreateAgent',
                    requestData,
                    requestMetadata,
                    requestClass: CreateAgentRequest,
                    responseClass: Agent
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/UpdateAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Agent>>
             */
            updateAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/UpdateAgent',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateAgentRequest,
                    responseClass: Agent
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/GetAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Agent>>
             */
            getAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/GetAgent',
                    requestData,
                    requestMetadata,
                    requestClass: GetAgentRequest,
                    responseClass: Agent
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/DeleteAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/DeleteAgent',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteAgentRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/DeleteAllAgents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteAllAgents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/DeleteAllAgents',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ListAgents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListAgentsResponse>>
             */
            listAgents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ListAgents',
                    requestData,
                    requestMetadata,
                    requestClass: ListAgentsRequest,
                    responseClass: ListAgentsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ListAgentsOfUser
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListAgentsOfUserResponse>>
             */
            listAgentsOfUser: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ListAgentsOfUser',
                    requestData,
                    requestMetadata,
                    requestClass: ListAgentsRequest,
                    responseClass: ListAgentsOfUserResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ListAllAgents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListAgentsResponse>>
             */
            listAllAgents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ListAllAgents',
                    requestData,
                    requestMetadata,
                    requestClass: ListAgentsRequest,
                    responseClass: ListAgentsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/AddUserToProject
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            addUserToProject: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/AddUserToProject',
                    requestData,
                    requestMetadata,
                    requestClass: AddUserToProjectRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/RemoveUserFromProject
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            removeUserFromProject: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/RemoveUserFromProject',
                    requestData,
                    requestMetadata,
                    requestClass: RemoveUserFromProjectRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ListUsersInProject
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListUsersInProjectResponse>>
             */
            listUsersInProject: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ListUsersInProject',
                    requestData,
                    requestMetadata,
                    requestClass: ListUsersInProjectRequest,
                    responseClass: ListUsersInProjectResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/GetPlatformInfo
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetPlatformInfoResponse>>
             */
            getPlatformInfo: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/GetPlatformInfo',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: GetPlatformInfoResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ListProjectPermissions
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListProjectPermissionsResponse>>
             */
            listProjectPermissions: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ListProjectPermissions',
                    requestData,
                    requestMetadata,
                    requestClass: ListProjectPermissionsRequest,
                    responseClass: ListProjectPermissionsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/TrainAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning008.Operation>>
             */
            trainAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/TrainAgent',
                    requestData,
                    requestMetadata,
                    requestClass: TrainAgentRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/BuildCache
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning008.Operation>>
             */
            buildCache: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/BuildCache',
                    requestData,
                    requestMetadata,
                    requestClass: BuildCacheRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ExportAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning008.Operation>>
             */
            exportAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ExportAgent',
                    requestData,
                    requestMetadata,
                    requestClass: ExportAgentRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ExportBenchmarkAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning008.Operation>>
             */
            exportBenchmarkAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ExportBenchmarkAgent',
                    requestData,
                    requestMetadata,
                    requestClass: ExportBenchmarkAgentRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ImportAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning008.Operation>>
             */
            importAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ImportAgent',
                    requestData,
                    requestMetadata,
                    requestClass: ImportAgentRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/OptimizeRankingMatch
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning008.Operation>>
             */
            optimizeRankingMatch: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/OptimizeRankingMatch',
                    requestData,
                    requestMetadata,
                    requestClass: OptimizeRankingMatchRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/RestoreAgent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning008.Operation>>
             */
            restoreAgent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/RestoreAgent',
                    requestData,
                    requestMetadata,
                    requestClass: RestoreAgentRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/GetAgentStatistics
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetAgentStatisticsResponse>>
             */
            getAgentStatistics: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/GetAgentStatistics',
                    requestData,
                    requestMetadata,
                    requestClass: GetAgentStatisticsRequest,
                    responseClass: GetAgentStatisticsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/SetAgentStatus
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Agent>>
             */
            setAgentStatus: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/SetAgentStatus',
                    requestData,
                    requestMetadata,
                    requestClass: SetAgentStatusRequest,
                    responseClass: Agent
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/SetResources
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            setResources: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/SetResources',
                    requestData,
                    requestMetadata,
                    requestClass: SetResourcesRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/DeleteResources
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteResources: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/DeleteResources',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteResourcesRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/ExportResources
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ExportResourcesResponse>>
             */
            exportResources: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/ExportResources',
                    requestData,
                    requestMetadata,
                    requestClass: ExportResourcesRequest,
                    responseClass: ExportResourcesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/GetModelStatuses
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetModelStatusesResponse>>
             */
            getModelStatuses: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/GetModelStatuses',
                    requestData,
                    requestMetadata,
                    requestClass: GetModelStatusesRequest,
                    responseClass: GetModelStatusesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/GetPlatformMapping
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.PlatformMapping>>
             */
            getPlatformMapping: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/GetPlatformMapping',
                    requestData,
                    requestMetadata,
                    requestClass: GetPlatformMappingRequest,
                    responseClass: PlatformMapping
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Agents/SetPlatformMapping
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.PlatformMapping>>
             */
            setPlatformMapping: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Agents/SetPlatformMapping',
                    requestData,
                    requestMetadata,
                    requestClass: PlatformMapping,
                    responseClass: PlatformMapping
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.Agents', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/CreateAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Agent>
     */
    createAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/UpdateAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Agent>
     */
    updateAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/GetAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Agent>
     */
    getAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/DeleteAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/DeleteAllAgents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteAllAgents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteAllAgents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ListAgents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListAgentsResponse>
     */
    listAgents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listAgents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ListAgentsOfUser
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListAgentsOfUserResponse>
     */
    listAgentsOfUser(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listAgentsOfUser(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ListAllAgents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListAgentsResponse>
     */
    listAllAgents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listAllAgents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/AddUserToProject
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    addUserToProject(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addUserToProject(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/RemoveUserFromProject
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    removeUserFromProject(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .removeUserFromProject(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ListUsersInProject
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListUsersInProjectResponse>
     */
    listUsersInProject(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listUsersInProject(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/GetPlatformInfo
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetPlatformInfoResponse>
     */
    getPlatformInfo(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getPlatformInfo(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ListProjectPermissions
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListProjectPermissionsResponse>
     */
    listProjectPermissions(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listProjectPermissions(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/TrainAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning008.Operation>
     */
    trainAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .trainAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/BuildCache
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning008.Operation>
     */
    buildCache(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .buildCache(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ExportAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning008.Operation>
     */
    exportAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .exportAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ExportBenchmarkAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning008.Operation>
     */
    exportBenchmarkAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .exportBenchmarkAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ImportAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning008.Operation>
     */
    importAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .importAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/OptimizeRankingMatch
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning008.Operation>
     */
    optimizeRankingMatch(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .optimizeRankingMatch(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/RestoreAgent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning008.Operation>
     */
    restoreAgent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .restoreAgent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/GetAgentStatistics
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetAgentStatisticsResponse>
     */
    getAgentStatistics(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getAgentStatistics(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/SetAgentStatus
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Agent>
     */
    setAgentStatus(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .setAgentStatus(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/SetResources
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    setResources(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .setResources(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/DeleteResources
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteResources(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteResources(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/ExportResources
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ExportResourcesResponse>
     */
    exportResources(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .exportResources(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/GetModelStatuses
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetModelStatusesResponse>
     */
    getModelStatuses(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getModelStatuses(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/GetPlatformMapping
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.PlatformMapping>
     */
    getPlatformMapping(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getPlatformMapping(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Agents/SetPlatformMapping
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.PlatformMapping>
     */
    setPlatformMapping(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .setPlatformMapping(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
AgentsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: AgentsClient, deps: [{ token: GRPC_AGENTS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
AgentsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: AgentsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: AgentsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_AGENTS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Users.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_USERS_CLIENT_SETTINGS = new InjectionToken('GRPC_USERS_CLIENT_SETTINGS');

/* tslint:disable */
var ReannotateEntitiesOptions;
(function (ReannotateEntitiesOptions) {
    ReannotateEntitiesOptions[ReannotateEntitiesOptions["REANNOTATE_NEVER"] = 0] = "REANNOTATE_NEVER";
    ReannotateEntitiesOptions[ReannotateEntitiesOptions["REANNOTATE_ALWAYS"] = 1] = "REANNOTATE_ALWAYS";
    ReannotateEntitiesOptions[ReannotateEntitiesOptions["REANNOTATE_IF_EMPTY"] = 2] = "REANNOTATE_IF_EMPTY";
    ReannotateEntitiesOptions[ReannotateEntitiesOptions["REANNOTATE_AFTER_DELETION"] = 3] = "REANNOTATE_AFTER_DELETION";
    ReannotateEntitiesOptions[ReannotateEntitiesOptions["REANNOTATE_IF_EMPTY_OR_AFTER_DELETION"] = 4] = "REANNOTATE_IF_EMPTY_OR_AFTER_DELETION";
})(ReannotateEntitiesOptions || (ReannotateEntitiesOptions = {}));
/**
 * Message implementation for ondewo.nlu.ValidateRegexRequest
 */
class ValidateRegexRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ValidateRegexRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.regex = _value.regex;
        ValidateRegexRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ValidateRegexRequest();
        ValidateRegexRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.regex = _instance.regex || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.regex = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ValidateRegexRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.regex) {
            _writer.writeString(1, _instance.regex);
        }
    }
    get regex() {
        return this._regex;
    }
    set regex(value) {
        this._regex = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ValidateRegexRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            regex: this.regex
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            regex: this.regex
        };
    }
}
ValidateRegexRequest.id = 'ondewo.nlu.ValidateRegexRequest';
/**
 * Message implementation for ondewo.nlu.ValidateRegexResponse
 */
class ValidateRegexResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ValidateRegexResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.errorMessages = (_value.errorMessages || []).slice();
        ValidateRegexResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ValidateRegexResponse();
        ValidateRegexResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.errorMessages = _instance.errorMessages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.errorMessages = _instance.errorMessages || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ValidateRegexResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.errorMessages && _instance.errorMessages.length) {
            _writer.writeRepeatedString(1, _instance.errorMessages);
        }
    }
    get errorMessages() {
        return this._errorMessages;
    }
    set errorMessages(value) {
        this._errorMessages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ValidateRegexResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
}
ValidateRegexResponse.id = 'ondewo.nlu.ValidateRegexResponse';
/**
 * Message implementation for ondewo.nlu.ValidateEmbeddedRegexRequest
 */
class ValidateEmbeddedRegexRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ValidateEmbeddedRegexRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityType = _value.entityType
            ? new EntityType.Entity(_value.entityType)
            : undefined;
        ValidateEmbeddedRegexRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ValidateEmbeddedRegexRequest();
        ValidateEmbeddedRegexRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityType = _instance.entityType || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.entityType = new EntityType.Entity();
                    _reader.readMessage(_instance.entityType, EntityType.Entity.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ValidateEmbeddedRegexRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityType) {
            _writer.writeMessage(1, _instance.entityType, EntityType.Entity.serializeBinaryToWriter);
        }
    }
    get entityType() {
        return this._entityType;
    }
    set entityType(value) {
        this._entityType = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ValidateEmbeddedRegexRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityType: this.entityType ? this.entityType.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityType: this.entityType
                ? this.entityType.toProtobufJSON(options)
                : null
        };
    }
}
ValidateEmbeddedRegexRequest.id = 'ondewo.nlu.ValidateEmbeddedRegexRequest';
/**
 * Message implementation for ondewo.nlu.ValidateEmbeddedRegexResponse
 */
class ValidateEmbeddedRegexResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ValidateEmbeddedRegexResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.errorMessages = (_value.errorMessages || []).slice();
        ValidateEmbeddedRegexResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ValidateEmbeddedRegexResponse();
        ValidateEmbeddedRegexResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.errorMessages = _instance.errorMessages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.errorMessages = _instance.errorMessages || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ValidateEmbeddedRegexResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.errorMessages && _instance.errorMessages.length) {
            _writer.writeRepeatedString(1, _instance.errorMessages);
        }
    }
    get errorMessages() {
        return this._errorMessages;
    }
    set errorMessages(value) {
        this._errorMessages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ValidateEmbeddedRegexResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
}
ValidateEmbeddedRegexResponse.id = 'ondewo.nlu.ValidateEmbeddedRegexResponse';
/**
 * Message implementation for ondewo.nlu.CleanAllIntentsRequest
 */
class CleanAllIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanAllIntentsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCode = _value.languageCode;
        this.specialCharacters = _value.specialCharacters;
        this.substringWhiteList = (_value.substringWhiteList || []).slice();
        this.dryRun = _value.dryRun;
        this.trainingPhraseCleanerOptions = _value.trainingPhraseCleanerOptions
            ? new TrainingPhraseCleanerOptions(_value.trainingPhraseCleanerOptions)
            : undefined;
        this.reannotateEntitiesOptions = _value.reannotateEntitiesOptions;
        this.numberOfWorkers = _value.numberOfWorkers;
        CleanAllIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanAllIntentsRequest();
        CleanAllIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.specialCharacters = _instance.specialCharacters || '';
        _instance.substringWhiteList = _instance.substringWhiteList || [];
        _instance.dryRun = _instance.dryRun || false;
        _instance.trainingPhraseCleanerOptions =
            _instance.trainingPhraseCleanerOptions || undefined;
        _instance.reannotateEntitiesOptions =
            _instance.reannotateEntitiesOptions || 0;
        _instance.numberOfWorkers = _instance.numberOfWorkers || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.specialCharacters = _reader.readString();
                    break;
                case 4:
                    (_instance.substringWhiteList =
                        _instance.substringWhiteList || []).push(_reader.readString());
                    break;
                case 5:
                    _instance.dryRun = _reader.readBool();
                    break;
                case 6:
                    _instance.trainingPhraseCleanerOptions = new TrainingPhraseCleanerOptions();
                    _reader.readMessage(_instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.reannotateEntitiesOptions = _reader.readEnum();
                    break;
                case 8:
                    _instance.numberOfWorkers = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanAllIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.specialCharacters) {
            _writer.writeString(3, _instance.specialCharacters);
        }
        if (_instance.substringWhiteList && _instance.substringWhiteList.length) {
            _writer.writeRepeatedString(4, _instance.substringWhiteList);
        }
        if (_instance.dryRun) {
            _writer.writeBool(5, _instance.dryRun);
        }
        if (_instance.trainingPhraseCleanerOptions) {
            _writer.writeMessage(6, _instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.serializeBinaryToWriter);
        }
        if (_instance.reannotateEntitiesOptions) {
            _writer.writeEnum(7, _instance.reannotateEntitiesOptions);
        }
        if (_instance.numberOfWorkers) {
            _writer.writeInt32(8, _instance.numberOfWorkers);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get specialCharacters() {
        return this._specialCharacters;
    }
    set specialCharacters(value) {
        this._specialCharacters = value;
    }
    get substringWhiteList() {
        return this._substringWhiteList;
    }
    set substringWhiteList(value) {
        this._substringWhiteList = value;
    }
    get dryRun() {
        return this._dryRun;
    }
    set dryRun(value) {
        this._dryRun = value;
    }
    get trainingPhraseCleanerOptions() {
        return this._trainingPhraseCleanerOptions;
    }
    set trainingPhraseCleanerOptions(value) {
        this._trainingPhraseCleanerOptions = value;
    }
    get reannotateEntitiesOptions() {
        return this._reannotateEntitiesOptions;
    }
    set reannotateEntitiesOptions(value) {
        this._reannotateEntitiesOptions = value;
    }
    get numberOfWorkers() {
        return this._numberOfWorkers;
    }
    set numberOfWorkers(value) {
        this._numberOfWorkers = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanAllIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            dryRun: this.dryRun,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toObject()
                : undefined,
            reannotateEntitiesOptions: this.reannotateEntitiesOptions,
            numberOfWorkers: this.numberOfWorkers
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            dryRun: this.dryRun,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toProtobufJSON(options)
                : null,
            reannotateEntitiesOptions: ReannotateEntitiesOptions[this.reannotateEntitiesOptions === null ||
                this.reannotateEntitiesOptions === undefined
                ? 0
                : this.reannotateEntitiesOptions],
            numberOfWorkers: this.numberOfWorkers
        };
    }
}
CleanAllIntentsRequest.id = 'ondewo.nlu.CleanAllIntentsRequest';
/**
 * Message implementation for ondewo.nlu.CleanAllIntentsResponse
 */
class CleanAllIntentsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanAllIntentsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.cleanedIntents = (_value.cleanedIntents || []).map(m => new Intent(m));
        this.intentUpdateList = (_value.intentUpdateList || []).map(m => new IntentUpdate(m));
        CleanAllIntentsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanAllIntentsResponse();
        CleanAllIntentsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.cleanedIntents = _instance.cleanedIntents || [];
        _instance.intentUpdateList = _instance.intentUpdateList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent();
                    _reader.readMessage(messageInitializer1, Intent.deserializeBinaryFromReader);
                    (_instance.cleanedIntents = _instance.cleanedIntents || []).push(messageInitializer1);
                    break;
                case 2:
                    const messageInitializer2 = new IntentUpdate();
                    _reader.readMessage(messageInitializer2, IntentUpdate.deserializeBinaryFromReader);
                    (_instance.intentUpdateList = _instance.intentUpdateList || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanAllIntentsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.cleanedIntents && _instance.cleanedIntents.length) {
            _writer.writeRepeatedMessage(1, _instance.cleanedIntents, Intent.serializeBinaryToWriter);
        }
        if (_instance.intentUpdateList && _instance.intentUpdateList.length) {
            _writer.writeRepeatedMessage(2, _instance.intentUpdateList, IntentUpdate.serializeBinaryToWriter);
        }
    }
    get cleanedIntents() {
        return this._cleanedIntents;
    }
    set cleanedIntents(value) {
        this._cleanedIntents = value;
    }
    get intentUpdateList() {
        return this._intentUpdateList;
    }
    set intentUpdateList(value) {
        this._intentUpdateList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanAllIntentsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            cleanedIntents: (this.cleanedIntents || []).map(m => m.toObject()),
            intentUpdateList: (this.intentUpdateList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            cleanedIntents: (this.cleanedIntents || []).map(m => m.toProtobufJSON(options)),
            intentUpdateList: (this.intentUpdateList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
CleanAllIntentsResponse.id = 'ondewo.nlu.CleanAllIntentsResponse';
/**
 * Message implementation for ondewo.nlu.CleanIntentRequest
 */
class CleanIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.intentName = _value.intentName;
        this.languageCode = _value.languageCode;
        this.specialCharacters = _value.specialCharacters;
        this.substringWhiteList = (_value.substringWhiteList || []).slice();
        this.dryRun = _value.dryRun;
        this.trainingPhraseCleanerOptions = _value.trainingPhraseCleanerOptions
            ? new TrainingPhraseCleanerOptions(_value.trainingPhraseCleanerOptions)
            : undefined;
        this.reannotateEntitiesOptions = _value.reannotateEntitiesOptions;
        CleanIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanIntentRequest();
        CleanIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.intentName = _instance.intentName || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.specialCharacters = _instance.specialCharacters || '';
        _instance.substringWhiteList = _instance.substringWhiteList || [];
        _instance.dryRun = _instance.dryRun || false;
        _instance.trainingPhraseCleanerOptions =
            _instance.trainingPhraseCleanerOptions || undefined;
        _instance.reannotateEntitiesOptions =
            _instance.reannotateEntitiesOptions || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.intentName = _reader.readString();
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.specialCharacters = _reader.readString();
                    break;
                case 5:
                    (_instance.substringWhiteList =
                        _instance.substringWhiteList || []).push(_reader.readString());
                    break;
                case 6:
                    _instance.dryRun = _reader.readBool();
                    break;
                case 7:
                    _instance.trainingPhraseCleanerOptions = new TrainingPhraseCleanerOptions();
                    _reader.readMessage(_instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.deserializeBinaryFromReader);
                    break;
                case 8:
                    _instance.reannotateEntitiesOptions = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.intentName) {
            _writer.writeString(2, _instance.intentName);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.specialCharacters) {
            _writer.writeString(4, _instance.specialCharacters);
        }
        if (_instance.substringWhiteList && _instance.substringWhiteList.length) {
            _writer.writeRepeatedString(5, _instance.substringWhiteList);
        }
        if (_instance.dryRun) {
            _writer.writeBool(6, _instance.dryRun);
        }
        if (_instance.trainingPhraseCleanerOptions) {
            _writer.writeMessage(7, _instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.serializeBinaryToWriter);
        }
        if (_instance.reannotateEntitiesOptions) {
            _writer.writeEnum(8, _instance.reannotateEntitiesOptions);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get specialCharacters() {
        return this._specialCharacters;
    }
    set specialCharacters(value) {
        this._specialCharacters = value;
    }
    get substringWhiteList() {
        return this._substringWhiteList;
    }
    set substringWhiteList(value) {
        this._substringWhiteList = value;
    }
    get dryRun() {
        return this._dryRun;
    }
    set dryRun(value) {
        this._dryRun = value;
    }
    get trainingPhraseCleanerOptions() {
        return this._trainingPhraseCleanerOptions;
    }
    set trainingPhraseCleanerOptions(value) {
        this._trainingPhraseCleanerOptions = value;
    }
    get reannotateEntitiesOptions() {
        return this._reannotateEntitiesOptions;
    }
    set reannotateEntitiesOptions(value) {
        this._reannotateEntitiesOptions = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            intentName: this.intentName,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            dryRun: this.dryRun,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toObject()
                : undefined,
            reannotateEntitiesOptions: this.reannotateEntitiesOptions
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            intentName: this.intentName,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            dryRun: this.dryRun,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toProtobufJSON(options)
                : null,
            reannotateEntitiesOptions: ReannotateEntitiesOptions[this.reannotateEntitiesOptions === null ||
                this.reannotateEntitiesOptions === undefined
                ? 0
                : this.reannotateEntitiesOptions]
        };
    }
}
CleanIntentRequest.id = 'ondewo.nlu.CleanIntentRequest';
/**
 * Message implementation for ondewo.nlu.CleanIntentResponse
 */
class CleanIntentResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanIntentResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.cleanedIntent = _value.cleanedIntent
            ? new Intent(_value.cleanedIntent)
            : undefined;
        this.intentUpdate = _value.intentUpdate
            ? new IntentUpdate(_value.intentUpdate)
            : undefined;
        CleanIntentResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanIntentResponse();
        CleanIntentResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.cleanedIntent = _instance.cleanedIntent || undefined;
        _instance.intentUpdate = _instance.intentUpdate || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.cleanedIntent = new Intent();
                    _reader.readMessage(_instance.cleanedIntent, Intent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.intentUpdate = new IntentUpdate();
                    _reader.readMessage(_instance.intentUpdate, IntentUpdate.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanIntentResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.cleanedIntent) {
            _writer.writeMessage(1, _instance.cleanedIntent, Intent.serializeBinaryToWriter);
        }
        if (_instance.intentUpdate) {
            _writer.writeMessage(2, _instance.intentUpdate, IntentUpdate.serializeBinaryToWriter);
        }
    }
    get cleanedIntent() {
        return this._cleanedIntent;
    }
    set cleanedIntent(value) {
        this._cleanedIntent = value;
    }
    get intentUpdate() {
        return this._intentUpdate;
    }
    set intentUpdate(value) {
        this._intentUpdate = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanIntentResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            cleanedIntent: this.cleanedIntent
                ? this.cleanedIntent.toObject()
                : undefined,
            intentUpdate: this.intentUpdate ? this.intentUpdate.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            cleanedIntent: this.cleanedIntent
                ? this.cleanedIntent.toProtobufJSON(options)
                : null,
            intentUpdate: this.intentUpdate
                ? this.intentUpdate.toProtobufJSON(options)
                : null
        };
    }
}
CleanIntentResponse.id = 'ondewo.nlu.CleanIntentResponse';
/**
 * Message implementation for ondewo.nlu.TrainingPhraseCleanerOptions
 */
class TrainingPhraseCleanerOptions {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TrainingPhraseCleanerOptions to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.deleteRepeatedWhitespaces = _value.deleteRepeatedWhitespaces;
        this.deleteLeadingSpecialCharacters = _value.deleteLeadingSpecialCharacters;
        this.deleteTrailingSpecialCharacters =
            _value.deleteTrailingSpecialCharacters;
        TrainingPhraseCleanerOptions.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TrainingPhraseCleanerOptions();
        TrainingPhraseCleanerOptions.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.deleteRepeatedWhitespaces =
            _instance.deleteRepeatedWhitespaces || false;
        _instance.deleteLeadingSpecialCharacters =
            _instance.deleteLeadingSpecialCharacters || false;
        _instance.deleteTrailingSpecialCharacters =
            _instance.deleteTrailingSpecialCharacters || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.deleteRepeatedWhitespaces = _reader.readBool();
                    break;
                case 2:
                    _instance.deleteLeadingSpecialCharacters = _reader.readBool();
                    break;
                case 3:
                    _instance.deleteTrailingSpecialCharacters = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        TrainingPhraseCleanerOptions.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.deleteRepeatedWhitespaces) {
            _writer.writeBool(1, _instance.deleteRepeatedWhitespaces);
        }
        if (_instance.deleteLeadingSpecialCharacters) {
            _writer.writeBool(2, _instance.deleteLeadingSpecialCharacters);
        }
        if (_instance.deleteTrailingSpecialCharacters) {
            _writer.writeBool(3, _instance.deleteTrailingSpecialCharacters);
        }
    }
    get deleteRepeatedWhitespaces() {
        return this._deleteRepeatedWhitespaces;
    }
    set deleteRepeatedWhitespaces(value) {
        this._deleteRepeatedWhitespaces = value;
    }
    get deleteLeadingSpecialCharacters() {
        return this._deleteLeadingSpecialCharacters;
    }
    set deleteLeadingSpecialCharacters(value) {
        this._deleteLeadingSpecialCharacters = value;
    }
    get deleteTrailingSpecialCharacters() {
        return this._deleteTrailingSpecialCharacters;
    }
    set deleteTrailingSpecialCharacters(value) {
        this._deleteTrailingSpecialCharacters = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TrainingPhraseCleanerOptions.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            deleteRepeatedWhitespaces: this.deleteRepeatedWhitespaces,
            deleteLeadingSpecialCharacters: this.deleteLeadingSpecialCharacters,
            deleteTrailingSpecialCharacters: this.deleteTrailingSpecialCharacters
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            deleteRepeatedWhitespaces: this.deleteRepeatedWhitespaces,
            deleteLeadingSpecialCharacters: this.deleteLeadingSpecialCharacters,
            deleteTrailingSpecialCharacters: this.deleteTrailingSpecialCharacters
        };
    }
}
TrainingPhraseCleanerOptions.id = 'ondewo.nlu.TrainingPhraseCleanerOptions';
/**
 * Message implementation for ondewo.nlu.StringUpdate
 */
class StringUpdate {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of StringUpdate to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.new = _value.new;
        this.old = _value.old;
        StringUpdate.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new StringUpdate();
        StringUpdate.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.new = _instance.new || '';
        _instance.old = _instance.old || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.new = _reader.readString();
                    break;
                case 2:
                    _instance.old = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        StringUpdate.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.new) {
            _writer.writeString(1, _instance.new);
        }
        if (_instance.old) {
            _writer.writeString(2, _instance.old);
        }
    }
    get new() {
        return this._new;
    }
    set new(value) {
        this._new = value;
    }
    get old() {
        return this._old;
    }
    set old(value) {
        this._old = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        StringUpdate.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            new: this.new,
            old: this.old
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            new: this.new,
            old: this.old
        };
    }
}
StringUpdate.id = 'ondewo.nlu.StringUpdate';
/**
 * Message implementation for ondewo.nlu.IntentUpdate
 */
class IntentUpdate {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IntentUpdate to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intentDisplayName = _value.intentDisplayName;
        this.trainingPhraseUpdateList = (_value.trainingPhraseUpdateList || []).map(m => new IntentUpdate.TrainingPhraseUpdate(m));
        this.deletedParameters = (_value.deletedParameters || []).slice();
        IntentUpdate.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IntentUpdate();
        IntentUpdate.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intentDisplayName = _instance.intentDisplayName || '';
        _instance.trainingPhraseUpdateList =
            _instance.trainingPhraseUpdateList || [];
        _instance.deletedParameters = _instance.deletedParameters || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intentDisplayName = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new IntentUpdate.TrainingPhraseUpdate();
                    _reader.readMessage(messageInitializer2, IntentUpdate.TrainingPhraseUpdate.deserializeBinaryFromReader);
                    (_instance.trainingPhraseUpdateList =
                        _instance.trainingPhraseUpdateList || []).push(messageInitializer2);
                    break;
                case 3:
                    (_instance.deletedParameters =
                        _instance.deletedParameters || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        IntentUpdate.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intentDisplayName) {
            _writer.writeString(1, _instance.intentDisplayName);
        }
        if (_instance.trainingPhraseUpdateList &&
            _instance.trainingPhraseUpdateList.length) {
            _writer.writeRepeatedMessage(2, _instance.trainingPhraseUpdateList, IntentUpdate.TrainingPhraseUpdate.serializeBinaryToWriter);
        }
        if (_instance.deletedParameters && _instance.deletedParameters.length) {
            _writer.writeRepeatedString(3, _instance.deletedParameters);
        }
    }
    get intentDisplayName() {
        return this._intentDisplayName;
    }
    set intentDisplayName(value) {
        this._intentDisplayName = value;
    }
    get trainingPhraseUpdateList() {
        return this._trainingPhraseUpdateList;
    }
    set trainingPhraseUpdateList(value) {
        this._trainingPhraseUpdateList = value;
    }
    get deletedParameters() {
        return this._deletedParameters;
    }
    set deletedParameters(value) {
        this._deletedParameters = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IntentUpdate.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intentDisplayName: this.intentDisplayName,
            trainingPhraseUpdateList: (this.trainingPhraseUpdateList || []).map(m => m.toObject()),
            deletedParameters: (this.deletedParameters || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intentDisplayName: this.intentDisplayName,
            trainingPhraseUpdateList: (this.trainingPhraseUpdateList || []).map(m => m.toProtobufJSON(options)),
            deletedParameters: (this.deletedParameters || []).slice()
        };
    }
}
IntentUpdate.id = 'ondewo.nlu.IntentUpdate';
(function (IntentUpdate) {
    /**
     * Message implementation for ondewo.nlu.TrainingPhraseUpdate
     */
    class TrainingPhraseUpdate {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of TrainingPhraseUpdate to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.trainingPhraseUpdate = _value.trainingPhraseUpdate
                ? new StringUpdate(_value.trainingPhraseUpdate)
                : undefined;
            this.entityUpdates = (_value.entityUpdates || []).map(m => new StringUpdate(m));
            this.entitiesReannotated = (_value.entitiesReannotated || []).slice();
            this.containsUpdateVariable = _value.containsUpdateVariable;
            TrainingPhraseUpdate.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new TrainingPhraseUpdate();
            TrainingPhraseUpdate.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.trainingPhraseUpdate =
                _instance.trainingPhraseUpdate || undefined;
            _instance.entityUpdates = _instance.entityUpdates || [];
            _instance.entitiesReannotated = _instance.entitiesReannotated || [];
            _instance.containsUpdateVariable =
                _instance.containsUpdateVariable || false;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.trainingPhraseUpdate = new StringUpdate();
                        _reader.readMessage(_instance.trainingPhraseUpdate, StringUpdate.deserializeBinaryFromReader);
                        break;
                    case 2:
                        const messageInitializer2 = new StringUpdate();
                        _reader.readMessage(messageInitializer2, StringUpdate.deserializeBinaryFromReader);
                        (_instance.entityUpdates = _instance.entityUpdates || []).push(messageInitializer2);
                        break;
                    case 3:
                        (_instance.entitiesReannotated =
                            _instance.entitiesReannotated || []).push(_reader.readString());
                        break;
                    case 4:
                        _instance.containsUpdateVariable = _reader.readBool();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            TrainingPhraseUpdate.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.trainingPhraseUpdate) {
                _writer.writeMessage(1, _instance.trainingPhraseUpdate, StringUpdate.serializeBinaryToWriter);
            }
            if (_instance.entityUpdates && _instance.entityUpdates.length) {
                _writer.writeRepeatedMessage(2, _instance.entityUpdates, StringUpdate.serializeBinaryToWriter);
            }
            if (_instance.entitiesReannotated &&
                _instance.entitiesReannotated.length) {
                _writer.writeRepeatedString(3, _instance.entitiesReannotated);
            }
            if (_instance.containsUpdateVariable) {
                _writer.writeBool(4, _instance.containsUpdateVariable);
            }
        }
        get trainingPhraseUpdate() {
            return this._trainingPhraseUpdate;
        }
        set trainingPhraseUpdate(value) {
            this._trainingPhraseUpdate = value;
        }
        get entityUpdates() {
            return this._entityUpdates;
        }
        set entityUpdates(value) {
            this._entityUpdates = value;
        }
        get entitiesReannotated() {
            return this._entitiesReannotated;
        }
        set entitiesReannotated(value) {
            this._entitiesReannotated = value;
        }
        get containsUpdateVariable() {
            return this._containsUpdateVariable;
        }
        set containsUpdateVariable(value) {
            this._containsUpdateVariable = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            TrainingPhraseUpdate.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                trainingPhraseUpdate: this.trainingPhraseUpdate
                    ? this.trainingPhraseUpdate.toObject()
                    : undefined,
                entityUpdates: (this.entityUpdates || []).map(m => m.toObject()),
                entitiesReannotated: (this.entitiesReannotated || []).slice(),
                containsUpdateVariable: this.containsUpdateVariable
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                trainingPhraseUpdate: this.trainingPhraseUpdate
                    ? this.trainingPhraseUpdate.toProtobufJSON(options)
                    : null,
                entityUpdates: (this.entityUpdates || []).map(m => m.toProtobufJSON(options)),
                entitiesReannotated: (this.entitiesReannotated || []).slice(),
                containsUpdateVariable: this.containsUpdateVariable
            };
        }
    }
    TrainingPhraseUpdate.id = 'ondewo.nlu.TrainingPhraseUpdate';
    IntentUpdate.TrainingPhraseUpdate = TrainingPhraseUpdate;
})(IntentUpdate || (IntentUpdate = {}));
/**
 * Message implementation for ondewo.nlu.EntityTypeUpdate
 */
class EntityTypeUpdate {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityTypeUpdate to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityTypeName = _value.entityTypeName;
        this.valuesUpdateList = (_value.valuesUpdateList || []).map(m => new EntityTypeUpdate.EntityUpdate(m));
        EntityTypeUpdate.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityTypeUpdate();
        EntityTypeUpdate.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityTypeName = _instance.entityTypeName || '';
        _instance.valuesUpdateList = _instance.valuesUpdateList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.entityTypeName = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new EntityTypeUpdate.EntityUpdate();
                    _reader.readMessage(messageInitializer2, EntityTypeUpdate.EntityUpdate.deserializeBinaryFromReader);
                    (_instance.valuesUpdateList = _instance.valuesUpdateList || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityTypeUpdate.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityTypeName) {
            _writer.writeString(1, _instance.entityTypeName);
        }
        if (_instance.valuesUpdateList && _instance.valuesUpdateList.length) {
            _writer.writeRepeatedMessage(2, _instance.valuesUpdateList, EntityTypeUpdate.EntityUpdate.serializeBinaryToWriter);
        }
    }
    get entityTypeName() {
        return this._entityTypeName;
    }
    set entityTypeName(value) {
        this._entityTypeName = value;
    }
    get valuesUpdateList() {
        return this._valuesUpdateList;
    }
    set valuesUpdateList(value) {
        this._valuesUpdateList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityTypeUpdate.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityTypeName: this.entityTypeName,
            valuesUpdateList: (this.valuesUpdateList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityTypeName: this.entityTypeName,
            valuesUpdateList: (this.valuesUpdateList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
EntityTypeUpdate.id = 'ondewo.nlu.EntityTypeUpdate';
(function (EntityTypeUpdate) {
    /**
     * Message implementation for ondewo.nlu.EntityUpdate
     */
    class EntityUpdate {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of EntityUpdate to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.entityValueUpdate = _value.entityValueUpdate
                ? new StringUpdate(_value.entityValueUpdate)
                : undefined;
            this.entitySynonymUpdates = (_value.entitySynonymUpdates || []).map(m => new StringUpdate(m));
            EntityUpdate.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new EntityUpdate();
            EntityUpdate.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.entityValueUpdate = _instance.entityValueUpdate || undefined;
            _instance.entitySynonymUpdates = _instance.entitySynonymUpdates || [];
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.entityValueUpdate = new StringUpdate();
                        _reader.readMessage(_instance.entityValueUpdate, StringUpdate.deserializeBinaryFromReader);
                        break;
                    case 2:
                        const messageInitializer2 = new StringUpdate();
                        _reader.readMessage(messageInitializer2, StringUpdate.deserializeBinaryFromReader);
                        (_instance.entitySynonymUpdates =
                            _instance.entitySynonymUpdates || []).push(messageInitializer2);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            EntityUpdate.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.entityValueUpdate) {
                _writer.writeMessage(1, _instance.entityValueUpdate, StringUpdate.serializeBinaryToWriter);
            }
            if (_instance.entitySynonymUpdates &&
                _instance.entitySynonymUpdates.length) {
                _writer.writeRepeatedMessage(2, _instance.entitySynonymUpdates, StringUpdate.serializeBinaryToWriter);
            }
        }
        get entityValueUpdate() {
            return this._entityValueUpdate;
        }
        set entityValueUpdate(value) {
            this._entityValueUpdate = value;
        }
        get entitySynonymUpdates() {
            return this._entitySynonymUpdates;
        }
        set entitySynonymUpdates(value) {
            this._entitySynonymUpdates = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            EntityUpdate.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                entityValueUpdate: this.entityValueUpdate
                    ? this.entityValueUpdate.toObject()
                    : undefined,
                entitySynonymUpdates: (this.entitySynonymUpdates || []).map(m => m.toObject())
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                entityValueUpdate: this.entityValueUpdate
                    ? this.entityValueUpdate.toProtobufJSON(options)
                    : null,
                entitySynonymUpdates: (this.entitySynonymUpdates || []).map(m => m.toProtobufJSON(options))
            };
        }
    }
    EntityUpdate.id = 'ondewo.nlu.EntityUpdate';
    EntityTypeUpdate.EntityUpdate = EntityUpdate;
})(EntityTypeUpdate || (EntityTypeUpdate = {}));
/**
 * Message implementation for ondewo.nlu.CleanAllEntityTypesRequest
 */
class CleanAllEntityTypesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanAllEntityTypesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCode = _value.languageCode;
        this.specialCharacters = _value.specialCharacters;
        this.substringWhiteList = (_value.substringWhiteList || []).slice();
        this.maxEntityCountUpdate = _value.maxEntityCountUpdate;
        this.forbiddenEntityTypePatterns = (_value.forbiddenEntityTypePatterns || []).slice();
        this.dryRun = _value.dryRun;
        this.numberOfWorkers = _value.numberOfWorkers;
        CleanAllEntityTypesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanAllEntityTypesRequest();
        CleanAllEntityTypesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.specialCharacters = _instance.specialCharacters || '';
        _instance.substringWhiteList = _instance.substringWhiteList || [];
        _instance.maxEntityCountUpdate = _instance.maxEntityCountUpdate || 0;
        _instance.forbiddenEntityTypePatterns =
            _instance.forbiddenEntityTypePatterns || [];
        _instance.dryRun = _instance.dryRun || false;
        _instance.numberOfWorkers = _instance.numberOfWorkers || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.specialCharacters = _reader.readString();
                    break;
                case 4:
                    (_instance.substringWhiteList =
                        _instance.substringWhiteList || []).push(_reader.readString());
                    break;
                case 5:
                    _instance.maxEntityCountUpdate = _reader.readInt32();
                    break;
                case 6:
                    (_instance.forbiddenEntityTypePatterns =
                        _instance.forbiddenEntityTypePatterns || []).push(_reader.readString());
                    break;
                case 7:
                    _instance.dryRun = _reader.readBool();
                    break;
                case 8:
                    _instance.numberOfWorkers = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanAllEntityTypesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.specialCharacters) {
            _writer.writeString(3, _instance.specialCharacters);
        }
        if (_instance.substringWhiteList && _instance.substringWhiteList.length) {
            _writer.writeRepeatedString(4, _instance.substringWhiteList);
        }
        if (_instance.maxEntityCountUpdate) {
            _writer.writeInt32(5, _instance.maxEntityCountUpdate);
        }
        if (_instance.forbiddenEntityTypePatterns &&
            _instance.forbiddenEntityTypePatterns.length) {
            _writer.writeRepeatedString(6, _instance.forbiddenEntityTypePatterns);
        }
        if (_instance.dryRun) {
            _writer.writeBool(7, _instance.dryRun);
        }
        if (_instance.numberOfWorkers) {
            _writer.writeInt32(8, _instance.numberOfWorkers);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get specialCharacters() {
        return this._specialCharacters;
    }
    set specialCharacters(value) {
        this._specialCharacters = value;
    }
    get substringWhiteList() {
        return this._substringWhiteList;
    }
    set substringWhiteList(value) {
        this._substringWhiteList = value;
    }
    get maxEntityCountUpdate() {
        return this._maxEntityCountUpdate;
    }
    set maxEntityCountUpdate(value) {
        this._maxEntityCountUpdate = value;
    }
    get forbiddenEntityTypePatterns() {
        return this._forbiddenEntityTypePatterns;
    }
    set forbiddenEntityTypePatterns(value) {
        this._forbiddenEntityTypePatterns = value;
    }
    get dryRun() {
        return this._dryRun;
    }
    set dryRun(value) {
        this._dryRun = value;
    }
    get numberOfWorkers() {
        return this._numberOfWorkers;
    }
    set numberOfWorkers(value) {
        this._numberOfWorkers = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanAllEntityTypesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            maxEntityCountUpdate: this.maxEntityCountUpdate,
            forbiddenEntityTypePatterns: (this.forbiddenEntityTypePatterns || []).slice(),
            dryRun: this.dryRun,
            numberOfWorkers: this.numberOfWorkers
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            maxEntityCountUpdate: this.maxEntityCountUpdate,
            forbiddenEntityTypePatterns: (this.forbiddenEntityTypePatterns || []).slice(),
            dryRun: this.dryRun,
            numberOfWorkers: this.numberOfWorkers
        };
    }
}
CleanAllEntityTypesRequest.id = 'ondewo.nlu.CleanAllEntityTypesRequest';
/**
 * Message implementation for ondewo.nlu.CleanAllEntityTypesResponse
 */
class CleanAllEntityTypesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanAllEntityTypesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.cleanedEntityTypes = (_value.cleanedEntityTypes || []).map(m => new EntityType(m));
        this.deletedEntityTypes = (_value.deletedEntityTypes || []).map(m => new EntityType(m));
        this.entityTypeUpdates = (_value.entityTypeUpdates || []).map(m => new EntityTypeUpdate(m));
        this.entityTypeDeletions = (_value.entityTypeDeletions || []).map(m => new EntityTypeUpdate(m));
        CleanAllEntityTypesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanAllEntityTypesResponse();
        CleanAllEntityTypesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.cleanedEntityTypes = _instance.cleanedEntityTypes || [];
        _instance.deletedEntityTypes = _instance.deletedEntityTypes || [];
        _instance.entityTypeUpdates = _instance.entityTypeUpdates || [];
        _instance.entityTypeDeletions = _instance.entityTypeDeletions || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new EntityType();
                    _reader.readMessage(messageInitializer1, EntityType.deserializeBinaryFromReader);
                    (_instance.cleanedEntityTypes =
                        _instance.cleanedEntityTypes || []).push(messageInitializer1);
                    break;
                case 2:
                    const messageInitializer2 = new EntityType();
                    _reader.readMessage(messageInitializer2, EntityType.deserializeBinaryFromReader);
                    (_instance.deletedEntityTypes =
                        _instance.deletedEntityTypes || []).push(messageInitializer2);
                    break;
                case 3:
                    const messageInitializer3 = new EntityTypeUpdate();
                    _reader.readMessage(messageInitializer3, EntityTypeUpdate.deserializeBinaryFromReader);
                    (_instance.entityTypeUpdates =
                        _instance.entityTypeUpdates || []).push(messageInitializer3);
                    break;
                case 4:
                    const messageInitializer4 = new EntityTypeUpdate();
                    _reader.readMessage(messageInitializer4, EntityTypeUpdate.deserializeBinaryFromReader);
                    (_instance.entityTypeDeletions =
                        _instance.entityTypeDeletions || []).push(messageInitializer4);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanAllEntityTypesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.cleanedEntityTypes && _instance.cleanedEntityTypes.length) {
            _writer.writeRepeatedMessage(1, _instance.cleanedEntityTypes, EntityType.serializeBinaryToWriter);
        }
        if (_instance.deletedEntityTypes && _instance.deletedEntityTypes.length) {
            _writer.writeRepeatedMessage(2, _instance.deletedEntityTypes, EntityType.serializeBinaryToWriter);
        }
        if (_instance.entityTypeUpdates && _instance.entityTypeUpdates.length) {
            _writer.writeRepeatedMessage(3, _instance.entityTypeUpdates, EntityTypeUpdate.serializeBinaryToWriter);
        }
        if (_instance.entityTypeDeletions && _instance.entityTypeDeletions.length) {
            _writer.writeRepeatedMessage(4, _instance.entityTypeDeletions, EntityTypeUpdate.serializeBinaryToWriter);
        }
    }
    get cleanedEntityTypes() {
        return this._cleanedEntityTypes;
    }
    set cleanedEntityTypes(value) {
        this._cleanedEntityTypes = value;
    }
    get deletedEntityTypes() {
        return this._deletedEntityTypes;
    }
    set deletedEntityTypes(value) {
        this._deletedEntityTypes = value;
    }
    get entityTypeUpdates() {
        return this._entityTypeUpdates;
    }
    set entityTypeUpdates(value) {
        this._entityTypeUpdates = value;
    }
    get entityTypeDeletions() {
        return this._entityTypeDeletions;
    }
    set entityTypeDeletions(value) {
        this._entityTypeDeletions = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanAllEntityTypesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            cleanedEntityTypes: (this.cleanedEntityTypes || []).map(m => m.toObject()),
            deletedEntityTypes: (this.deletedEntityTypes || []).map(m => m.toObject()),
            entityTypeUpdates: (this.entityTypeUpdates || []).map(m => m.toObject()),
            entityTypeDeletions: (this.entityTypeDeletions || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            cleanedEntityTypes: (this.cleanedEntityTypes || []).map(m => m.toProtobufJSON(options)),
            deletedEntityTypes: (this.deletedEntityTypes || []).map(m => m.toProtobufJSON(options)),
            entityTypeUpdates: (this.entityTypeUpdates || []).map(m => m.toProtobufJSON(options)),
            entityTypeDeletions: (this.entityTypeDeletions || []).map(m => m.toProtobufJSON(options))
        };
    }
}
CleanAllEntityTypesResponse.id = 'ondewo.nlu.CleanAllEntityTypesResponse';
/**
 * Message implementation for ondewo.nlu.CleanEntityTypeRequest
 */
class CleanEntityTypeRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanEntityTypeRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.entityTypeName = _value.entityTypeName;
        this.languageCode = _value.languageCode;
        this.specialCharacters = _value.specialCharacters;
        this.substringWhiteList = (_value.substringWhiteList || []).slice();
        this.maxEntityCountUpdate = _value.maxEntityCountUpdate;
        this.dryRun = _value.dryRun;
        CleanEntityTypeRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanEntityTypeRequest();
        CleanEntityTypeRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.entityTypeName = _instance.entityTypeName || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.specialCharacters = _instance.specialCharacters || '';
        _instance.substringWhiteList = _instance.substringWhiteList || [];
        _instance.maxEntityCountUpdate = _instance.maxEntityCountUpdate || 0;
        _instance.dryRun = _instance.dryRun || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.entityTypeName = _reader.readString();
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.specialCharacters = _reader.readString();
                    break;
                case 5:
                    (_instance.substringWhiteList =
                        _instance.substringWhiteList || []).push(_reader.readString());
                    break;
                case 6:
                    _instance.maxEntityCountUpdate = _reader.readInt32();
                    break;
                case 7:
                    _instance.dryRun = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanEntityTypeRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.entityTypeName) {
            _writer.writeString(2, _instance.entityTypeName);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.specialCharacters) {
            _writer.writeString(4, _instance.specialCharacters);
        }
        if (_instance.substringWhiteList && _instance.substringWhiteList.length) {
            _writer.writeRepeatedString(5, _instance.substringWhiteList);
        }
        if (_instance.maxEntityCountUpdate) {
            _writer.writeInt32(6, _instance.maxEntityCountUpdate);
        }
        if (_instance.dryRun) {
            _writer.writeBool(7, _instance.dryRun);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get entityTypeName() {
        return this._entityTypeName;
    }
    set entityTypeName(value) {
        this._entityTypeName = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get specialCharacters() {
        return this._specialCharacters;
    }
    set specialCharacters(value) {
        this._specialCharacters = value;
    }
    get substringWhiteList() {
        return this._substringWhiteList;
    }
    set substringWhiteList(value) {
        this._substringWhiteList = value;
    }
    get maxEntityCountUpdate() {
        return this._maxEntityCountUpdate;
    }
    set maxEntityCountUpdate(value) {
        this._maxEntityCountUpdate = value;
    }
    get dryRun() {
        return this._dryRun;
    }
    set dryRun(value) {
        this._dryRun = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanEntityTypeRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            entityTypeName: this.entityTypeName,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            maxEntityCountUpdate: this.maxEntityCountUpdate,
            dryRun: this.dryRun
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            entityTypeName: this.entityTypeName,
            languageCode: this.languageCode,
            specialCharacters: this.specialCharacters,
            substringWhiteList: (this.substringWhiteList || []).slice(),
            maxEntityCountUpdate: this.maxEntityCountUpdate,
            dryRun: this.dryRun
        };
    }
}
CleanEntityTypeRequest.id = 'ondewo.nlu.CleanEntityTypeRequest';
/**
 * Message implementation for ondewo.nlu.CleanEntityTypeResponse
 */
class CleanEntityTypeResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CleanEntityTypeResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.cleanedEntityType = _value.cleanedEntityType
            ? new EntityType(_value.cleanedEntityType)
            : undefined;
        this.entityTypeUpdate = _value.entityTypeUpdate
            ? new EntityTypeUpdate(_value.entityTypeUpdate)
            : undefined;
        CleanEntityTypeResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CleanEntityTypeResponse();
        CleanEntityTypeResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.cleanedEntityType = _instance.cleanedEntityType || undefined;
        _instance.entityTypeUpdate = _instance.entityTypeUpdate || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.cleanedEntityType = new EntityType();
                    _reader.readMessage(_instance.cleanedEntityType, EntityType.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.entityTypeUpdate = new EntityTypeUpdate();
                    _reader.readMessage(_instance.entityTypeUpdate, EntityTypeUpdate.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CleanEntityTypeResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.cleanedEntityType) {
            _writer.writeMessage(1, _instance.cleanedEntityType, EntityType.serializeBinaryToWriter);
        }
        if (_instance.entityTypeUpdate) {
            _writer.writeMessage(2, _instance.entityTypeUpdate, EntityTypeUpdate.serializeBinaryToWriter);
        }
    }
    get cleanedEntityType() {
        return this._cleanedEntityType;
    }
    set cleanedEntityType(value) {
        this._cleanedEntityType = value;
    }
    get entityTypeUpdate() {
        return this._entityTypeUpdate;
    }
    set entityTypeUpdate(value) {
        this._entityTypeUpdate = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CleanEntityTypeResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            cleanedEntityType: this.cleanedEntityType
                ? this.cleanedEntityType.toObject()
                : undefined,
            entityTypeUpdate: this.entityTypeUpdate
                ? this.entityTypeUpdate.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            cleanedEntityType: this.cleanedEntityType
                ? this.cleanedEntityType.toProtobufJSON(options)
                : null,
            entityTypeUpdate: this.entityTypeUpdate
                ? this.entityTypeUpdate.toProtobufJSON(options)
                : null
        };
    }
}
CleanEntityTypeResponse.id = 'ondewo.nlu.CleanEntityTypeResponse';
/**
 * Message implementation for ondewo.nlu.AddTrainingPhrasesRequest
 */
class AddTrainingPhrasesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddTrainingPhrasesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCode = _value.languageCode;
        this.trainingPhraseList = (_value.trainingPhraseList || []).map(m => new AddTrainingPhrasesRequest.TrainingPhraseForIntent(m));
        this.extractEntities = _value.extractEntities;
        this.specialCharacters = _value.specialCharacters;
        this.trainingPhraseCleanerOptions = _value.trainingPhraseCleanerOptions
            ? new TrainingPhraseCleanerOptions(_value.trainingPhraseCleanerOptions)
            : undefined;
        this.numberOfWorkers = _value.numberOfWorkers;
        AddTrainingPhrasesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddTrainingPhrasesRequest();
        AddTrainingPhrasesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.trainingPhraseList = _instance.trainingPhraseList || [];
        _instance.extractEntities = _instance.extractEntities || false;
        _instance.specialCharacters = _instance.specialCharacters || '';
        _instance.trainingPhraseCleanerOptions =
            _instance.trainingPhraseCleanerOptions || undefined;
        _instance.numberOfWorkers = _instance.numberOfWorkers || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    const messageInitializer3 = new AddTrainingPhrasesRequest.TrainingPhraseForIntent();
                    _reader.readMessage(messageInitializer3, AddTrainingPhrasesRequest.TrainingPhraseForIntent
                        .deserializeBinaryFromReader);
                    (_instance.trainingPhraseList =
                        _instance.trainingPhraseList || []).push(messageInitializer3);
                    break;
                case 4:
                    _instance.extractEntities = _reader.readBool();
                    break;
                case 5:
                    _instance.specialCharacters = _reader.readString();
                    break;
                case 6:
                    _instance.trainingPhraseCleanerOptions = new TrainingPhraseCleanerOptions();
                    _reader.readMessage(_instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.numberOfWorkers = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddTrainingPhrasesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.trainingPhraseList && _instance.trainingPhraseList.length) {
            _writer.writeRepeatedMessage(3, _instance.trainingPhraseList, AddTrainingPhrasesRequest.TrainingPhraseForIntent
                .serializeBinaryToWriter);
        }
        if (_instance.extractEntities) {
            _writer.writeBool(4, _instance.extractEntities);
        }
        if (_instance.specialCharacters) {
            _writer.writeString(5, _instance.specialCharacters);
        }
        if (_instance.trainingPhraseCleanerOptions) {
            _writer.writeMessage(6, _instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.serializeBinaryToWriter);
        }
        if (_instance.numberOfWorkers) {
            _writer.writeInt32(7, _instance.numberOfWorkers);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get trainingPhraseList() {
        return this._trainingPhraseList;
    }
    set trainingPhraseList(value) {
        this._trainingPhraseList = value;
    }
    get extractEntities() {
        return this._extractEntities;
    }
    set extractEntities(value) {
        this._extractEntities = value;
    }
    get specialCharacters() {
        return this._specialCharacters;
    }
    set specialCharacters(value) {
        this._specialCharacters = value;
    }
    get trainingPhraseCleanerOptions() {
        return this._trainingPhraseCleanerOptions;
    }
    set trainingPhraseCleanerOptions(value) {
        this._trainingPhraseCleanerOptions = value;
    }
    get numberOfWorkers() {
        return this._numberOfWorkers;
    }
    set numberOfWorkers(value) {
        this._numberOfWorkers = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddTrainingPhrasesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            trainingPhraseList: (this.trainingPhraseList || []).map(m => m.toObject()),
            extractEntities: this.extractEntities,
            specialCharacters: this.specialCharacters,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toObject()
                : undefined,
            numberOfWorkers: this.numberOfWorkers
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            trainingPhraseList: (this.trainingPhraseList || []).map(m => m.toProtobufJSON(options)),
            extractEntities: this.extractEntities,
            specialCharacters: this.specialCharacters,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toProtobufJSON(options)
                : null,
            numberOfWorkers: this.numberOfWorkers
        };
    }
}
AddTrainingPhrasesRequest.id = 'ondewo.nlu.AddTrainingPhrasesRequest';
(function (AddTrainingPhrasesRequest) {
    /**
     * Message implementation for ondewo.nlu.TrainingPhraseForIntent
     */
    class TrainingPhraseForIntent {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of TrainingPhraseForIntent to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.trainingPhrase = _value.trainingPhrase;
            this.intentDisplayName = _value.intentDisplayName;
            this.entities = (_value.entities || []).map(m => new Intent.TrainingPhrase.Entity(m));
            TrainingPhraseForIntent.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new TrainingPhraseForIntent();
            TrainingPhraseForIntent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.trainingPhrase = _instance.trainingPhrase || '';
            _instance.intentDisplayName = _instance.intentDisplayName || '';
            _instance.entities = _instance.entities || [];
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.trainingPhrase = _reader.readString();
                        break;
                    case 2:
                        _instance.intentDisplayName = _reader.readString();
                        break;
                    case 3:
                        const messageInitializer3 = new Intent.TrainingPhrase.Entity();
                        _reader.readMessage(messageInitializer3, Intent.TrainingPhrase.Entity
                            .deserializeBinaryFromReader);
                        (_instance.entities = _instance.entities || []).push(messageInitializer3);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            TrainingPhraseForIntent.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.trainingPhrase) {
                _writer.writeString(1, _instance.trainingPhrase);
            }
            if (_instance.intentDisplayName) {
                _writer.writeString(2, _instance.intentDisplayName);
            }
            if (_instance.entities && _instance.entities.length) {
                _writer.writeRepeatedMessage(3, _instance.entities, Intent.TrainingPhrase.Entity.serializeBinaryToWriter);
            }
        }
        get trainingPhrase() {
            return this._trainingPhrase;
        }
        set trainingPhrase(value) {
            this._trainingPhrase = value;
        }
        get intentDisplayName() {
            return this._intentDisplayName;
        }
        set intentDisplayName(value) {
            this._intentDisplayName = value;
        }
        get entities() {
            return this._entities;
        }
        set entities(value) {
            this._entities = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            TrainingPhraseForIntent.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                trainingPhrase: this.trainingPhrase,
                intentDisplayName: this.intentDisplayName,
                entities: (this.entities || []).map(m => m.toObject())
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                trainingPhrase: this.trainingPhrase,
                intentDisplayName: this.intentDisplayName,
                entities: (this.entities || []).map(m => m.toProtobufJSON(options))
            };
        }
    }
    TrainingPhraseForIntent.id = 'ondewo.nlu.TrainingPhraseForIntent';
    AddTrainingPhrasesRequest.TrainingPhraseForIntent = TrainingPhraseForIntent;
})(AddTrainingPhrasesRequest || (AddTrainingPhrasesRequest = {}));
/**
 * Message implementation for ondewo.nlu.AddTrainingPhrasesResponse
 */
class AddTrainingPhrasesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddTrainingPhrasesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.errorMessages = (_value.errorMessages || []).slice();
        AddTrainingPhrasesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddTrainingPhrasesResponse();
        AddTrainingPhrasesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.errorMessages = _instance.errorMessages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.errorMessages = _instance.errorMessages || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddTrainingPhrasesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.errorMessages && _instance.errorMessages.length) {
            _writer.writeRepeatedString(1, _instance.errorMessages);
        }
    }
    get errorMessages() {
        return this._errorMessages;
    }
    set errorMessages(value) {
        this._errorMessages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddTrainingPhrasesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
}
AddTrainingPhrasesResponse.id = 'ondewo.nlu.AddTrainingPhrasesResponse';
/**
 * Message implementation for ondewo.nlu.AddTrainingPhrasesFromCSVRequest
 */
class AddTrainingPhrasesFromCSVRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddTrainingPhrasesFromCSVRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCode = _value.languageCode;
        this.csvContents = _value.csvContents;
        this.extractEntities = _value.extractEntities;
        this.specialCharacters = _value.specialCharacters;
        this.trainingPhraseCleanerOptions = _value.trainingPhraseCleanerOptions
            ? new TrainingPhraseCleanerOptions(_value.trainingPhraseCleanerOptions)
            : undefined;
        this.numberOfWorkers = _value.numberOfWorkers;
        AddTrainingPhrasesFromCSVRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddTrainingPhrasesFromCSVRequest();
        AddTrainingPhrasesFromCSVRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.csvContents = _instance.csvContents || new Uint8Array();
        _instance.extractEntities = _instance.extractEntities || false;
        _instance.specialCharacters = _instance.specialCharacters || '';
        _instance.trainingPhraseCleanerOptions =
            _instance.trainingPhraseCleanerOptions || undefined;
        _instance.numberOfWorkers = _instance.numberOfWorkers || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.csvContents = _reader.readBytes();
                    break;
                case 4:
                    _instance.extractEntities = _reader.readBool();
                    break;
                case 5:
                    _instance.specialCharacters = _reader.readString();
                    break;
                case 6:
                    _instance.trainingPhraseCleanerOptions = new TrainingPhraseCleanerOptions();
                    _reader.readMessage(_instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.numberOfWorkers = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddTrainingPhrasesFromCSVRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.csvContents && _instance.csvContents.length) {
            _writer.writeBytes(3, _instance.csvContents);
        }
        if (_instance.extractEntities) {
            _writer.writeBool(4, _instance.extractEntities);
        }
        if (_instance.specialCharacters) {
            _writer.writeString(5, _instance.specialCharacters);
        }
        if (_instance.trainingPhraseCleanerOptions) {
            _writer.writeMessage(6, _instance.trainingPhraseCleanerOptions, TrainingPhraseCleanerOptions.serializeBinaryToWriter);
        }
        if (_instance.numberOfWorkers) {
            _writer.writeInt32(7, _instance.numberOfWorkers);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get csvContents() {
        return this._csvContents;
    }
    set csvContents(value) {
        this._csvContents = value;
    }
    get extractEntities() {
        return this._extractEntities;
    }
    set extractEntities(value) {
        this._extractEntities = value;
    }
    get specialCharacters() {
        return this._specialCharacters;
    }
    set specialCharacters(value) {
        this._specialCharacters = value;
    }
    get trainingPhraseCleanerOptions() {
        return this._trainingPhraseCleanerOptions;
    }
    set trainingPhraseCleanerOptions(value) {
        this._trainingPhraseCleanerOptions = value;
    }
    get numberOfWorkers() {
        return this._numberOfWorkers;
    }
    set numberOfWorkers(value) {
        this._numberOfWorkers = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddTrainingPhrasesFromCSVRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            csvContents: this.csvContents
                ? this.csvContents.subarray(0)
                : new Uint8Array(),
            extractEntities: this.extractEntities,
            specialCharacters: this.specialCharacters,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toObject()
                : undefined,
            numberOfWorkers: this.numberOfWorkers
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            csvContents: this.csvContents ? uint8ArrayToBase64(this.csvContents) : '',
            extractEntities: this.extractEntities,
            specialCharacters: this.specialCharacters,
            trainingPhraseCleanerOptions: this.trainingPhraseCleanerOptions
                ? this.trainingPhraseCleanerOptions.toProtobufJSON(options)
                : null,
            numberOfWorkers: this.numberOfWorkers
        };
    }
}
AddTrainingPhrasesFromCSVRequest.id = 'ondewo.nlu.AddTrainingPhrasesFromCSVRequest';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for ProjectRoles.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_PROJECT_ROLES_CLIENT_SETTINGS = new InjectionToken('GRPC_PROJECT_ROLES_CLIENT_SETTINGS');

/**
 * Message implementation for ondewo.nlu.GetUserProjectCountRequest
 */
class GetUserProjectCountRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserProjectCountRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userId = _value.userId;
        GetUserProjectCountRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserProjectCountRequest();
        GetUserProjectCountRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userId = _instance.userId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.userId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserProjectCountRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userId) {
            _writer.writeString(1, _instance.userId);
        }
    }
    get userId() {
        return this._userId;
    }
    set userId(value) {
        this._userId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserProjectCountRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userId: this.userId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userId: this.userId
        };
    }
}
GetUserProjectCountRequest.id = 'ondewo.nlu.GetUserProjectCountRequest';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Intents.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_INTENTS_CLIENT_SETTINGS = new InjectionToken('GRPC_INTENTS_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.ServerStatistics
 */
class ServerStatisticsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.ServerStatistics/GetProjectCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getProjectCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ServerStatistics/GetProjectCount',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ServerStatistics/GetUserProjectCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getUserProjectCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ServerStatistics/GetUserProjectCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserProjectCountRequest,
                    responseClass: StatResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ServerStatistics/GetUserCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<ondewoNlu004.StatResponse>>
             */
            getUserCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ServerStatistics/GetUserCount',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: StatResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.ServerStatistics', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.ServerStatistics/GetProjectCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getProjectCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getProjectCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ServerStatistics/GetUserProjectCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getUserProjectCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserProjectCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ServerStatistics/GetUserCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<ondewoNlu004.StatResponse>
     */
    getUserCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
ServerStatisticsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ServerStatisticsClient, deps: [{ token: GRPC_SERVER_STATISTICS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
ServerStatisticsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ServerStatisticsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ServerStatisticsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_SERVER_STATISTICS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

var Mode;
(function (Mode) {
    Mode[Mode["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    Mode[Mode["EXCLUSIVE"] = 1] = "EXCLUSIVE";
    Mode[Mode["INCLUSIVE"] = 2] = "INCLUSIVE";
})(Mode || (Mode = {}));
var IntentAlgorithms;
(function (IntentAlgorithms) {
    IntentAlgorithms[IntentAlgorithms["OndewoIntentExactContextDetector"] = 0] = "OndewoIntentExactContextDetector";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentExactMatch"] = 1] = "OndewoIntentExactMatch";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentNamedExactMatch"] = 2] = "OndewoIntentNamedExactMatch";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentSimilarityMatch"] = 3] = "OndewoIntentSimilarityMatch";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentNamedSimilarityMatch"] = 4] = "OndewoIntentNamedSimilarityMatch";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentFastTextClassifier"] = 5] = "OndewoIntentFastTextClassifier";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentMachineLearningMatch"] = 6] = "OndewoIntentMachineLearningMatch";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentBertClassifier"] = 7] = "OndewoIntentBertClassifier";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentMetaClassifier"] = 8] = "OndewoIntentMetaClassifier";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentSnipsClassifier"] = 9] = "OndewoIntentSnipsClassifier";
    IntentAlgorithms[IntentAlgorithms["IntentExitDetector"] = 10] = "IntentExitDetector";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentRankingMatch"] = 11] = "OndewoIntentRankingMatch";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentRasaClassifier"] = 12] = "OndewoIntentRasaClassifier";
    IntentAlgorithms[IntentAlgorithms["OndewoWeightedEnsemble"] = 13] = "OndewoWeightedEnsemble";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentExitDetector"] = 14] = "OndewoIntentExitDetector";
    IntentAlgorithms[IntentAlgorithms["OndewoIntentParameterMatch"] = 15] = "OndewoIntentParameterMatch";
})(IntentAlgorithms || (IntentAlgorithms = {}));
/**
 * Message implementation for ondewo.nlu.ExtractEntitiesRequest
 */
class ExtractEntitiesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExtractEntitiesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.text = _value.text;
        this.languageCode = _value.languageCode;
        this.intentName = _value.intentName;
        ExtractEntitiesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExtractEntitiesRequest();
        ExtractEntitiesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.text = _instance.text || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.intentName = _instance.intentName || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.text = _reader.readString();
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.intentName = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExtractEntitiesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.text) {
            _writer.writeString(2, _instance.text);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.intentName) {
            _writer.writeString(4, _instance.intentName);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExtractEntitiesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            text: this.text,
            languageCode: this.languageCode,
            intentName: this.intentName
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            text: this.text,
            languageCode: this.languageCode,
            intentName: this.intentName
        };
    }
}
ExtractEntitiesRequest.id = 'ondewo.nlu.ExtractEntitiesRequest';
/**
 * Message implementation for ondewo.nlu.ExtractEntitiesFuzzyRequest
 */
class ExtractEntitiesFuzzyRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExtractEntitiesFuzzyRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.text = _value.text;
        this.potentialEntities = (_value.potentialEntities || []).map(m => new EntityTypeFuzzyNerConfig(m));
        this.minimalScore = _value.minimalScore;
        this.allowOverlaps = _value.allowOverlaps;
        ExtractEntitiesFuzzyRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExtractEntitiesFuzzyRequest();
        ExtractEntitiesFuzzyRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.text = _instance.text || '';
        _instance.potentialEntities = _instance.potentialEntities || [];
        _instance.minimalScore = _instance.minimalScore || 0;
        _instance.allowOverlaps = _instance.allowOverlaps || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.text = _reader.readString();
                    break;
                case 3:
                    const messageInitializer3 = new EntityTypeFuzzyNerConfig();
                    _reader.readMessage(messageInitializer3, EntityTypeFuzzyNerConfig.deserializeBinaryFromReader);
                    (_instance.potentialEntities =
                        _instance.potentialEntities || []).push(messageInitializer3);
                    break;
                case 4:
                    _instance.minimalScore = _reader.readFloat();
                    break;
                case 5:
                    _instance.allowOverlaps = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExtractEntitiesFuzzyRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.text) {
            _writer.writeString(2, _instance.text);
        }
        if (_instance.potentialEntities && _instance.potentialEntities.length) {
            _writer.writeRepeatedMessage(3, _instance.potentialEntities, EntityTypeFuzzyNerConfig.serializeBinaryToWriter);
        }
        if (_instance.minimalScore) {
            _writer.writeFloat(4, _instance.minimalScore);
        }
        if (_instance.allowOverlaps) {
            _writer.writeBool(5, _instance.allowOverlaps);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get potentialEntities() {
        return this._potentialEntities;
    }
    set potentialEntities(value) {
        this._potentialEntities = value;
    }
    get minimalScore() {
        return this._minimalScore;
    }
    set minimalScore(value) {
        this._minimalScore = value;
    }
    get allowOverlaps() {
        return this._allowOverlaps;
    }
    set allowOverlaps(value) {
        this._allowOverlaps = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExtractEntitiesFuzzyRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            text: this.text,
            potentialEntities: (this.potentialEntities || []).map(m => m.toObject()),
            minimalScore: this.minimalScore,
            allowOverlaps: this.allowOverlaps
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            text: this.text,
            potentialEntities: (this.potentialEntities || []).map(m => m.toProtobufJSON(options)),
            minimalScore: this.minimalScore,
            allowOverlaps: this.allowOverlaps
        };
    }
}
ExtractEntitiesFuzzyRequest.id = 'ondewo.nlu.ExtractEntitiesFuzzyRequest';
/**
 * Message implementation for ondewo.nlu.EntityTypeFuzzyNerConfig
 */
class EntityTypeFuzzyNerConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityTypeFuzzyNerConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityType = _value.entityType
            ? new EntityType(_value.entityType)
            : undefined;
        this.minimalScore = _value.minimalScore;
        this.entityValues = (_value.entityValues || []).slice();
        this.algorithm = _value.algorithm;
        EntityTypeFuzzyNerConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityTypeFuzzyNerConfig();
        EntityTypeFuzzyNerConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityType = _instance.entityType || undefined;
        _instance.minimalScore = _instance.minimalScore || 0;
        _instance.entityValues = _instance.entityValues || [];
        _instance.algorithm = _instance.algorithm || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.entityType = new EntityType();
                    _reader.readMessage(_instance.entityType, EntityType.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.minimalScore = _reader.readFloat();
                    break;
                case 3:
                    (_instance.entityValues = _instance.entityValues || []).push(_reader.readString());
                    break;
                case 4:
                    _instance.algorithm = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityTypeFuzzyNerConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityType) {
            _writer.writeMessage(1, _instance.entityType, EntityType.serializeBinaryToWriter);
        }
        if (_instance.minimalScore) {
            _writer.writeFloat(2, _instance.minimalScore);
        }
        if (_instance.entityValues && _instance.entityValues.length) {
            _writer.writeRepeatedString(3, _instance.entityValues);
        }
        if (_instance.algorithm) {
            _writer.writeEnum(4, _instance.algorithm);
        }
    }
    get entityType() {
        return this._entityType;
    }
    set entityType(value) {
        this._entityType = value;
    }
    get minimalScore() {
        return this._minimalScore;
    }
    set minimalScore(value) {
        this._minimalScore = value;
    }
    get entityValues() {
        return this._entityValues;
    }
    set entityValues(value) {
        this._entityValues = value;
    }
    get algorithm() {
        return this._algorithm;
    }
    set algorithm(value) {
        this._algorithm = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityTypeFuzzyNerConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityType: this.entityType ? this.entityType.toObject() : undefined,
            minimalScore: this.minimalScore,
            entityValues: (this.entityValues || []).slice(),
            algorithm: this.algorithm
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityType: this.entityType
                ? this.entityType.toProtobufJSON(options)
                : null,
            minimalScore: this.minimalScore,
            entityValues: (this.entityValues || []).slice(),
            algorithm: EntityTypeFuzzyNerConfig.FuzzyNerAlgorithm[this.algorithm === null || this.algorithm === undefined
                ? 0
                : this.algorithm]
        };
    }
}
EntityTypeFuzzyNerConfig.id = 'ondewo.nlu.EntityTypeFuzzyNerConfig';
(function (EntityTypeFuzzyNerConfig) {
    let FuzzyNerAlgorithm;
    (function (FuzzyNerAlgorithm) {
        FuzzyNerAlgorithm[FuzzyNerAlgorithm["PREFILTER_LEVENSHTEIN"] = 0] = "PREFILTER_LEVENSHTEIN";
        FuzzyNerAlgorithm[FuzzyNerAlgorithm["LOCAL_MAXIMUM"] = 1] = "LOCAL_MAXIMUM";
    })(FuzzyNerAlgorithm = EntityTypeFuzzyNerConfig.FuzzyNerAlgorithm || (EntityTypeFuzzyNerConfig.FuzzyNerAlgorithm = {}));
})(EntityTypeFuzzyNerConfig || (EntityTypeFuzzyNerConfig = {}));
/**
 * Message implementation for ondewo.nlu.EntityDetected
 */
class EntityDetected {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityDetected to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entity = _value.entity
            ? new Intent.TrainingPhrase.Entity(_value.entity)
            : undefined;
        this.extractionMethod = _value.extractionMethod;
        this.score = _value.score;
        EntityDetected.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityDetected();
        EntityDetected.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entity = _instance.entity || undefined;
        _instance.extractionMethod = _instance.extractionMethod || '';
        _instance.score = _instance.score || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.entity = new Intent.TrainingPhrase.Entity();
                    _reader.readMessage(_instance.entity, Intent.TrainingPhrase.Entity
                        .deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.extractionMethod = _reader.readString();
                    break;
                case 3:
                    _instance.score = _reader.readFloat();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityDetected.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entity) {
            _writer.writeMessage(1, _instance.entity, Intent.TrainingPhrase.Entity.serializeBinaryToWriter);
        }
        if (_instance.extractionMethod) {
            _writer.writeString(2, _instance.extractionMethod);
        }
        if (_instance.score) {
            _writer.writeFloat(3, _instance.score);
        }
    }
    get entity() {
        return this._entity;
    }
    set entity(value) {
        this._entity = value;
    }
    get extractionMethod() {
        return this._extractionMethod;
    }
    set extractionMethod(value) {
        this._extractionMethod = value;
    }
    get score() {
        return this._score;
    }
    set score(value) {
        this._score = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityDetected.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entity: this.entity ? this.entity.toObject() : undefined,
            extractionMethod: this.extractionMethod,
            score: this.score
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entity: this.entity ? this.entity.toProtobufJSON(options) : null,
            extractionMethod: this.extractionMethod,
            score: this.score
        };
    }
}
EntityDetected.id = 'ondewo.nlu.EntityDetected';
/**
 * Message implementation for ondewo.nlu.ExtractEntitiesResponse
 */
class ExtractEntitiesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExtractEntitiesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entitiesDetected = (_value.entitiesDetected || []).map(m => new EntityDetected(m));
        this.text = _value.text;
        ExtractEntitiesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExtractEntitiesResponse();
        ExtractEntitiesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entitiesDetected = _instance.entitiesDetected || [];
        _instance.text = _instance.text || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new EntityDetected();
                    _reader.readMessage(messageInitializer1, EntityDetected.deserializeBinaryFromReader);
                    (_instance.entitiesDetected = _instance.entitiesDetected || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.text = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExtractEntitiesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entitiesDetected && _instance.entitiesDetected.length) {
            _writer.writeRepeatedMessage(1, _instance.entitiesDetected, EntityDetected.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeString(2, _instance.text);
        }
    }
    get entitiesDetected() {
        return this._entitiesDetected;
    }
    set entitiesDetected(value) {
        this._entitiesDetected = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExtractEntitiesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entitiesDetected: (this.entitiesDetected || []).map(m => m.toObject()),
            text: this.text
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entitiesDetected: (this.entitiesDetected || []).map(m => m.toProtobufJSON(options)),
            text: this.text
        };
    }
}
ExtractEntitiesResponse.id = 'ondewo.nlu.ExtractEntitiesResponse';
/**
 * Message implementation for ondewo.nlu.GetAlternativeSentencesRequest
 */
class GetAlternativeSentencesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAlternativeSentencesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.config = _value.config
            ? new DataEnrichmentConfig(_value.config)
            : undefined;
        this.sentence = _value.sentence;
        this.languageCode = _value.languageCode;
        this.parent = _value.parent;
        this.protectedWords = (_value.protectedWords || []).slice();
        this.wordsToChange = (_value.wordsToChange || []).slice();
        GetAlternativeSentencesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAlternativeSentencesRequest();
        GetAlternativeSentencesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.config = _instance.config || undefined;
        _instance.sentence = _instance.sentence || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.parent = _instance.parent || '';
        _instance.protectedWords = _instance.protectedWords || [];
        _instance.wordsToChange = _instance.wordsToChange || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.config = new DataEnrichmentConfig();
                    _reader.readMessage(_instance.config, DataEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.sentence = _reader.readString();
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.parent = _reader.readString();
                    break;
                case 6:
                    (_instance.protectedWords = _instance.protectedWords || []).push(_reader.readString());
                    break;
                case 7:
                    (_instance.wordsToChange = _instance.wordsToChange || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAlternativeSentencesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.config) {
            _writer.writeMessage(1, _instance.config, DataEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.sentence) {
            _writer.writeString(2, _instance.sentence);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.parent) {
            _writer.writeString(5, _instance.parent);
        }
        if (_instance.protectedWords && _instance.protectedWords.length) {
            _writer.writeRepeatedString(6, _instance.protectedWords);
        }
        if (_instance.wordsToChange && _instance.wordsToChange.length) {
            _writer.writeRepeatedString(7, _instance.wordsToChange);
        }
    }
    get config() {
        return this._config;
    }
    set config(value) {
        this._config = value;
    }
    get sentence() {
        return this._sentence;
    }
    set sentence(value) {
        this._sentence = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get protectedWords() {
        return this._protectedWords;
    }
    set protectedWords(value) {
        this._protectedWords = value;
    }
    get wordsToChange() {
        return this._wordsToChange;
    }
    set wordsToChange(value) {
        this._wordsToChange = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAlternativeSentencesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            config: this.config ? this.config.toObject() : undefined,
            sentence: this.sentence,
            languageCode: this.languageCode,
            parent: this.parent,
            protectedWords: (this.protectedWords || []).slice(),
            wordsToChange: (this.wordsToChange || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            config: this.config ? this.config.toProtobufJSON(options) : null,
            sentence: this.sentence,
            languageCode: this.languageCode,
            parent: this.parent,
            protectedWords: (this.protectedWords || []).slice(),
            wordsToChange: (this.wordsToChange || []).slice()
        };
    }
}
GetAlternativeSentencesRequest.id = 'ondewo.nlu.GetAlternativeSentencesRequest';
/**
 * Message implementation for ondewo.nlu.GenerateUserSaysRequest
 */
class GenerateUserSaysRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GenerateUserSaysRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.languageCode = _value.languageCode;
        this.parent = _value.parent;
        this.nRepeatSynonym = _value.nRepeatSynonym;
        this.branch = _value.branch;
        GenerateUserSaysRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GenerateUserSaysRequest();
        GenerateUserSaysRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.languageCode = _instance.languageCode || '';
        _instance.parent = _instance.parent || '';
        _instance.nRepeatSynonym = _instance.nRepeatSynonym || 0;
        _instance.branch = _instance.branch || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.parent = _reader.readString();
                    break;
                case 6:
                    _instance.nRepeatSynonym = _reader.readInt32();
                    break;
                case 8:
                    _instance.branch = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GenerateUserSaysRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.parent) {
            _writer.writeString(5, _instance.parent);
        }
        if (_instance.nRepeatSynonym) {
            _writer.writeInt32(6, _instance.nRepeatSynonym);
        }
        if (_instance.branch) {
            _writer.writeString(8, _instance.branch);
        }
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get nRepeatSynonym() {
        return this._nRepeatSynonym;
    }
    set nRepeatSynonym(value) {
        this._nRepeatSynonym = value;
    }
    get branch() {
        return this._branch;
    }
    set branch(value) {
        this._branch = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GenerateUserSaysRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            languageCode: this.languageCode,
            parent: this.parent,
            nRepeatSynonym: this.nRepeatSynonym,
            branch: this.branch
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            languageCode: this.languageCode,
            parent: this.parent,
            nRepeatSynonym: this.nRepeatSynonym,
            branch: this.branch
        };
    }
}
GenerateUserSaysRequest.id = 'ondewo.nlu.GenerateUserSaysRequest';
/**
 * Message implementation for ondewo.nlu.GenerateResponsesRequest
 */
class GenerateResponsesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GenerateResponsesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.languageCode = _value.languageCode;
        this.parent = _value.parent;
        this.nRepeatSynonym = _value.nRepeatSynonym;
        this.branch = _value.branch;
        this.dropUnknownParameters = _value.dropUnknownParameters;
        GenerateResponsesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GenerateResponsesRequest();
        GenerateResponsesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.languageCode = _instance.languageCode || '';
        _instance.parent = _instance.parent || '';
        _instance.nRepeatSynonym = _instance.nRepeatSynonym || 0;
        _instance.branch = _instance.branch || '';
        _instance.dropUnknownParameters = _instance.dropUnknownParameters || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.parent = _reader.readString();
                    break;
                case 7:
                    _instance.nRepeatSynonym = _reader.readInt32();
                    break;
                case 8:
                    _instance.branch = _reader.readString();
                    break;
                case 9:
                    _instance.dropUnknownParameters = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GenerateResponsesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.parent) {
            _writer.writeString(5, _instance.parent);
        }
        if (_instance.nRepeatSynonym) {
            _writer.writeInt32(7, _instance.nRepeatSynonym);
        }
        if (_instance.branch) {
            _writer.writeString(8, _instance.branch);
        }
        if (_instance.dropUnknownParameters) {
            _writer.writeBool(9, _instance.dropUnknownParameters);
        }
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get nRepeatSynonym() {
        return this._nRepeatSynonym;
    }
    set nRepeatSynonym(value) {
        this._nRepeatSynonym = value;
    }
    get branch() {
        return this._branch;
    }
    set branch(value) {
        this._branch = value;
    }
    get dropUnknownParameters() {
        return this._dropUnknownParameters;
    }
    set dropUnknownParameters(value) {
        this._dropUnknownParameters = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GenerateResponsesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            languageCode: this.languageCode,
            parent: this.parent,
            nRepeatSynonym: this.nRepeatSynonym,
            branch: this.branch,
            dropUnknownParameters: this.dropUnknownParameters
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            languageCode: this.languageCode,
            parent: this.parent,
            nRepeatSynonym: this.nRepeatSynonym,
            branch: this.branch,
            dropUnknownParameters: this.dropUnknownParameters
        };
    }
}
GenerateResponsesRequest.id = 'ondewo.nlu.GenerateResponsesRequest';
/**
 * Message implementation for ondewo.nlu.GetAlternativeTrainingPhrasesRequest
 */
class GetAlternativeTrainingPhrasesRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAlternativeTrainingPhrasesRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.config = _value.config
            ? new DataEnrichmentConfig(_value.config)
            : undefined;
        this.trainingPhrase = _value.trainingPhrase
            ? new Intent.TrainingPhrase(_value.trainingPhrase)
            : undefined;
        this.intentName = _value.intentName;
        this.languageCode = _value.languageCode;
        this.parent = _value.parent;
        this.detectEntities = _value.detectEntities;
        this.similarityThreshold = _value.similarityThreshold;
        this.protectedWords = (_value.protectedWords || []).slice();
        this.wordsToChange = (_value.wordsToChange || []).slice();
        this.branch = _value.branch;
        GetAlternativeTrainingPhrasesRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAlternativeTrainingPhrasesRequest();
        GetAlternativeTrainingPhrasesRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.config = _instance.config || undefined;
        _instance.trainingPhrase = _instance.trainingPhrase || undefined;
        _instance.intentName = _instance.intentName || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.parent = _instance.parent || '';
        _instance.detectEntities = _instance.detectEntities || false;
        _instance.similarityThreshold = _instance.similarityThreshold || 0;
        _instance.protectedWords = _instance.protectedWords || [];
        _instance.wordsToChange = _instance.wordsToChange || [];
        _instance.branch = _instance.branch || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.config = new DataEnrichmentConfig();
                    _reader.readMessage(_instance.config, DataEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.trainingPhrase = new Intent.TrainingPhrase();
                    _reader.readMessage(_instance.trainingPhrase, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.intentName = _reader.readString();
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.parent = _reader.readString();
                    break;
                case 6:
                    _instance.detectEntities = _reader.readBool();
                    break;
                case 7:
                    _instance.similarityThreshold = _reader.readFloat();
                    break;
                case 8:
                    (_instance.protectedWords = _instance.protectedWords || []).push(_reader.readString());
                    break;
                case 9:
                    (_instance.wordsToChange = _instance.wordsToChange || []).push(_reader.readString());
                    break;
                case 10:
                    _instance.branch = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAlternativeTrainingPhrasesRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.config) {
            _writer.writeMessage(1, _instance.config, DataEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.trainingPhrase) {
            _writer.writeMessage(2, _instance.trainingPhrase, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
        if (_instance.intentName) {
            _writer.writeString(3, _instance.intentName);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.parent) {
            _writer.writeString(5, _instance.parent);
        }
        if (_instance.detectEntities) {
            _writer.writeBool(6, _instance.detectEntities);
        }
        if (_instance.similarityThreshold) {
            _writer.writeFloat(7, _instance.similarityThreshold);
        }
        if (_instance.protectedWords && _instance.protectedWords.length) {
            _writer.writeRepeatedString(8, _instance.protectedWords);
        }
        if (_instance.wordsToChange && _instance.wordsToChange.length) {
            _writer.writeRepeatedString(9, _instance.wordsToChange);
        }
        if (_instance.branch) {
            _writer.writeString(10, _instance.branch);
        }
    }
    get config() {
        return this._config;
    }
    set config(value) {
        this._config = value;
    }
    get trainingPhrase() {
        return this._trainingPhrase;
    }
    set trainingPhrase(value) {
        this._trainingPhrase = value;
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get detectEntities() {
        return this._detectEntities;
    }
    set detectEntities(value) {
        this._detectEntities = value;
    }
    get similarityThreshold() {
        return this._similarityThreshold;
    }
    set similarityThreshold(value) {
        this._similarityThreshold = value;
    }
    get protectedWords() {
        return this._protectedWords;
    }
    set protectedWords(value) {
        this._protectedWords = value;
    }
    get wordsToChange() {
        return this._wordsToChange;
    }
    set wordsToChange(value) {
        this._wordsToChange = value;
    }
    get branch() {
        return this._branch;
    }
    set branch(value) {
        this._branch = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAlternativeTrainingPhrasesRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            config: this.config ? this.config.toObject() : undefined,
            trainingPhrase: this.trainingPhrase
                ? this.trainingPhrase.toObject()
                : undefined,
            intentName: this.intentName,
            languageCode: this.languageCode,
            parent: this.parent,
            detectEntities: this.detectEntities,
            similarityThreshold: this.similarityThreshold,
            protectedWords: (this.protectedWords || []).slice(),
            wordsToChange: (this.wordsToChange || []).slice(),
            branch: this.branch
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            config: this.config ? this.config.toProtobufJSON(options) : null,
            trainingPhrase: this.trainingPhrase
                ? this.trainingPhrase.toProtobufJSON(options)
                : null,
            intentName: this.intentName,
            languageCode: this.languageCode,
            parent: this.parent,
            detectEntities: this.detectEntities,
            similarityThreshold: this.similarityThreshold,
            protectedWords: (this.protectedWords || []).slice(),
            wordsToChange: (this.wordsToChange || []).slice(),
            branch: this.branch
        };
    }
}
GetAlternativeTrainingPhrasesRequest.id = 'ondewo.nlu.GetAlternativeTrainingPhrasesRequest';
/**
 * Message implementation for ondewo.nlu.GetSynonymsRequest
 */
class GetSynonymsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetSynonymsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.config = _value.config
            ? new DataEnrichmentConfig(_value.config)
            : undefined;
        this.word = _value.word;
        this.languageCode = _value.languageCode;
        this.parent = _value.parent;
        GetSynonymsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetSynonymsRequest();
        GetSynonymsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.config = _instance.config || undefined;
        _instance.word = _instance.word || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.parent = _instance.parent || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.config = new DataEnrichmentConfig();
                    _reader.readMessage(_instance.config, DataEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.word = _reader.readString();
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.parent = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetSynonymsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.config) {
            _writer.writeMessage(1, _instance.config, DataEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.word) {
            _writer.writeString(2, _instance.word);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.parent) {
            _writer.writeString(5, _instance.parent);
        }
    }
    get config() {
        return this._config;
    }
    set config(value) {
        this._config = value;
    }
    get word() {
        return this._word;
    }
    set word(value) {
        this._word = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetSynonymsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            config: this.config ? this.config.toObject() : undefined,
            word: this.word,
            languageCode: this.languageCode,
            parent: this.parent
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            config: this.config ? this.config.toProtobufJSON(options) : null,
            word: this.word,
            languageCode: this.languageCode,
            parent: this.parent
        };
    }
}
GetSynonymsRequest.id = 'ondewo.nlu.GetSynonymsRequest';
/**
 * Message implementation for ondewo.nlu.GetSynonymsResponse
 */
class GetSynonymsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetSynonymsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.synonyms = (_value.synonyms || []).map(m => new Synonym(m));
        GetSynonymsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetSynonymsResponse();
        GetSynonymsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.synonyms = _instance.synonyms || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Synonym();
                    _reader.readMessage(messageInitializer1, Synonym.deserializeBinaryFromReader);
                    (_instance.synonyms = _instance.synonyms || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetSynonymsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.synonyms && _instance.synonyms.length) {
            _writer.writeRepeatedMessage(1, _instance.synonyms, Synonym.serializeBinaryToWriter);
        }
    }
    get synonyms() {
        return this._synonyms;
    }
    set synonyms(value) {
        this._synonyms = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetSynonymsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            synonyms: (this.synonyms || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            synonyms: (this.synonyms || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetSynonymsResponse.id = 'ondewo.nlu.GetSynonymsResponse';
/**
 * Message implementation for ondewo.nlu.Synonym
 */
class Synonym {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Synonym to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.synonym = _value.synonym;
        this.score = _value.score;
        Synonym.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Synonym();
        Synonym.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.synonym = _instance.synonym || '';
        _instance.score = _instance.score || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.synonym = _reader.readString();
                    break;
                case 2:
                    _instance.score = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Synonym.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.synonym) {
            _writer.writeString(1, _instance.synonym);
        }
        if (_instance.score) {
            _writer.writeInt32(2, _instance.score);
        }
    }
    get synonym() {
        return this._synonym;
    }
    set synonym(value) {
        this._synonym = value;
    }
    get score() {
        return this._score;
    }
    set score(value) {
        this._score = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Synonym.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            synonym: this.synonym,
            score: this.score
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            synonym: this.synonym,
            score: this.score
        };
    }
}
Synonym.id = 'ondewo.nlu.Synonym';
/**
 * Message implementation for ondewo.nlu.GetAlternativeSentencesResponse
 */
class GetAlternativeSentencesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAlternativeSentencesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.alternativeSentences = (_value.alternativeSentences || []).map(m => new AltSentence(m));
        GetAlternativeSentencesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAlternativeSentencesResponse();
        GetAlternativeSentencesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.alternativeSentences = _instance.alternativeSentences || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new AltSentence();
                    _reader.readMessage(messageInitializer1, AltSentence.deserializeBinaryFromReader);
                    (_instance.alternativeSentences =
                        _instance.alternativeSentences || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAlternativeSentencesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.alternativeSentences &&
            _instance.alternativeSentences.length) {
            _writer.writeRepeatedMessage(1, _instance.alternativeSentences, AltSentence.serializeBinaryToWriter);
        }
    }
    get alternativeSentences() {
        return this._alternativeSentences;
    }
    set alternativeSentences(value) {
        this._alternativeSentences = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAlternativeSentencesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            alternativeSentences: (this.alternativeSentences || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            alternativeSentences: (this.alternativeSentences || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetAlternativeSentencesResponse.id = 'ondewo.nlu.GetAlternativeSentencesResponse';
/**
 * Message implementation for ondewo.nlu.GenerateResponsesResponse
 */
class GenerateResponsesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GenerateResponsesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.responses = (_value.responses || []).slice();
        GenerateResponsesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GenerateResponsesResponse();
        GenerateResponsesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.responses = _instance.responses || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    (_instance.responses = _instance.responses || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        GenerateResponsesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.responses && _instance.responses.length) {
            _writer.writeRepeatedString(2, _instance.responses);
        }
    }
    get responses() {
        return this._responses;
    }
    set responses(value) {
        this._responses = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GenerateResponsesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            responses: (this.responses || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            responses: (this.responses || []).slice()
        };
    }
}
GenerateResponsesResponse.id = 'ondewo.nlu.GenerateResponsesResponse';
/**
 * Message implementation for ondewo.nlu.GenerateUserSaysResponse
 */
class GenerateUserSaysResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GenerateUserSaysResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userSays = (_value.userSays || []).slice();
        GenerateUserSaysResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GenerateUserSaysResponse();
        GenerateUserSaysResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userSays = _instance.userSays || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    (_instance.userSays = _instance.userSays || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        GenerateUserSaysResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userSays && _instance.userSays.length) {
            _writer.writeRepeatedString(2, _instance.userSays);
        }
    }
    get userSays() {
        return this._userSays;
    }
    set userSays(value) {
        this._userSays = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GenerateUserSaysResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userSays: (this.userSays || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userSays: (this.userSays || []).slice()
        };
    }
}
GenerateUserSaysResponse.id = 'ondewo.nlu.GenerateUserSaysResponse';
/**
 * Message implementation for ondewo.nlu.GetAlternativeTrainingPhrasesResponse
 */
class GetAlternativeTrainingPhrasesResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAlternativeTrainingPhrasesResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.alternativeTrainingPhrases = (_value.alternativeTrainingPhrases || []).map(m => new AltTrainingPhrase(m));
        GetAlternativeTrainingPhrasesResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAlternativeTrainingPhrasesResponse();
        GetAlternativeTrainingPhrasesResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.alternativeTrainingPhrases =
            _instance.alternativeTrainingPhrases || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new AltTrainingPhrase();
                    _reader.readMessage(messageInitializer1, AltTrainingPhrase.deserializeBinaryFromReader);
                    (_instance.alternativeTrainingPhrases =
                        _instance.alternativeTrainingPhrases || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAlternativeTrainingPhrasesResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.alternativeTrainingPhrases &&
            _instance.alternativeTrainingPhrases.length) {
            _writer.writeRepeatedMessage(1, _instance.alternativeTrainingPhrases, AltTrainingPhrase.serializeBinaryToWriter);
        }
    }
    get alternativeTrainingPhrases() {
        return this._alternativeTrainingPhrases;
    }
    set alternativeTrainingPhrases(value) {
        this._alternativeTrainingPhrases = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAlternativeTrainingPhrasesResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            alternativeTrainingPhrases: (this.alternativeTrainingPhrases || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            alternativeTrainingPhrases: (this.alternativeTrainingPhrases || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetAlternativeTrainingPhrasesResponse.id = 'ondewo.nlu.GetAlternativeTrainingPhrasesResponse';
/**
 * Message implementation for ondewo.nlu.AltSentence
 */
class AltSentence {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AltSentence to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sentence = _value.sentence;
        this.score = _value.score;
        AltSentence.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AltSentence();
        AltSentence.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sentence = _instance.sentence || '';
        _instance.score = _instance.score || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sentence = _reader.readString();
                    break;
                case 2:
                    _instance.score = _reader.readFloat();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AltSentence.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sentence) {
            _writer.writeString(1, _instance.sentence);
        }
        if (_instance.score) {
            _writer.writeFloat(2, _instance.score);
        }
    }
    get sentence() {
        return this._sentence;
    }
    set sentence(value) {
        this._sentence = value;
    }
    get score() {
        return this._score;
    }
    set score(value) {
        this._score = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AltSentence.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sentence: this.sentence,
            score: this.score
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sentence: this.sentence,
            score: this.score
        };
    }
}
AltSentence.id = 'ondewo.nlu.AltSentence';
/**
 * Message implementation for ondewo.nlu.AltTrainingPhrase
 */
class AltTrainingPhrase {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AltTrainingPhrase to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.trainingPhrase = _value.trainingPhrase
            ? new Intent.TrainingPhrase(_value.trainingPhrase)
            : undefined;
        this.score = _value.score;
        AltTrainingPhrase.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AltTrainingPhrase();
        AltTrainingPhrase.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.trainingPhrase = _instance.trainingPhrase || undefined;
        _instance.score = _instance.score || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.trainingPhrase = new Intent.TrainingPhrase();
                    _reader.readMessage(_instance.trainingPhrase, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.score = _reader.readFloat();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AltTrainingPhrase.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.trainingPhrase) {
            _writer.writeMessage(1, _instance.trainingPhrase, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
        if (_instance.score) {
            _writer.writeFloat(2, _instance.score);
        }
    }
    get trainingPhrase() {
        return this._trainingPhrase;
    }
    set trainingPhrase(value) {
        this._trainingPhrase = value;
    }
    get score() {
        return this._score;
    }
    set score(value) {
        this._score = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AltTrainingPhrase.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            trainingPhrase: this.trainingPhrase
                ? this.trainingPhrase.toObject()
                : undefined,
            score: this.score
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            trainingPhrase: this.trainingPhrase
                ? this.trainingPhrase.toProtobufJSON(options)
                : null,
            score: this.score
        };
    }
}
AltTrainingPhrase.id = 'ondewo.nlu.AltTrainingPhrase';
/**
 * Message implementation for ondewo.nlu.DataEnrichmentConfig
 */
class DataEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DataEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.entityEnrichment = _value.entityEnrichment
            ? new EntityEnrichmentConfig(_value.entityEnrichment)
            : undefined;
        this.thesaurusEnrichment = _value.thesaurusEnrichment
            ? new ThesaurusEnrichmentConfig(_value.thesaurusEnrichment)
            : undefined;
        this.word2vecEnrichment = _value.word2vecEnrichment
            ? new Word2VecEnrichmentConfig(_value.word2vecEnrichment)
            : undefined;
        this.wordNetEnrichment = _value.wordNetEnrichment
            ? new WordNetAugEnrichmentConfig(_value.wordNetEnrichment)
            : undefined;
        this.gpt2Enrichment = _value.gpt2Enrichment
            ? new GPT2EnrichmentConfig(_value.gpt2Enrichment)
            : undefined;
        this.gloveEnrichment = _value.gloveEnrichment
            ? new GloVeEnrichmentConfig(_value.gloveEnrichment)
            : undefined;
        this.fasttextEnrichment = _value.fasttextEnrichment
            ? new FastTextEnrichmentConfig(_value.fasttextEnrichment)
            : undefined;
        this.bertEnrichment = _value.bertEnrichment
            ? new BertAugEnrichmentConfig(_value.bertEnrichment)
            : undefined;
        this.xlnetEnrichment = _value.xlnetEnrichment
            ? new XLNetAugEnrichmentConfig(_value.xlnetEnrichment)
            : undefined;
        DataEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DataEnrichmentConfig();
        DataEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.entityEnrichment = _instance.entityEnrichment || undefined;
        _instance.thesaurusEnrichment = _instance.thesaurusEnrichment || undefined;
        _instance.word2vecEnrichment = _instance.word2vecEnrichment || undefined;
        _instance.wordNetEnrichment = _instance.wordNetEnrichment || undefined;
        _instance.gpt2Enrichment = _instance.gpt2Enrichment || undefined;
        _instance.gloveEnrichment = _instance.gloveEnrichment || undefined;
        _instance.fasttextEnrichment = _instance.fasttextEnrichment || undefined;
        _instance.bertEnrichment = _instance.bertEnrichment || undefined;
        _instance.xlnetEnrichment = _instance.xlnetEnrichment || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.entityEnrichment = new EntityEnrichmentConfig();
                    _reader.readMessage(_instance.entityEnrichment, EntityEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.thesaurusEnrichment = new ThesaurusEnrichmentConfig();
                    _reader.readMessage(_instance.thesaurusEnrichment, ThesaurusEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.word2vecEnrichment = new Word2VecEnrichmentConfig();
                    _reader.readMessage(_instance.word2vecEnrichment, Word2VecEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.wordNetEnrichment = new WordNetAugEnrichmentConfig();
                    _reader.readMessage(_instance.wordNetEnrichment, WordNetAugEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.gpt2Enrichment = new GPT2EnrichmentConfig();
                    _reader.readMessage(_instance.gpt2Enrichment, GPT2EnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.gloveEnrichment = new GloVeEnrichmentConfig();
                    _reader.readMessage(_instance.gloveEnrichment, GloVeEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.fasttextEnrichment = new FastTextEnrichmentConfig();
                    _reader.readMessage(_instance.fasttextEnrichment, FastTextEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 8:
                    _instance.bertEnrichment = new BertAugEnrichmentConfig();
                    _reader.readMessage(_instance.bertEnrichment, BertAugEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                case 9:
                    _instance.xlnetEnrichment = new XLNetAugEnrichmentConfig();
                    _reader.readMessage(_instance.xlnetEnrichment, XLNetAugEnrichmentConfig.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        DataEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.entityEnrichment) {
            _writer.writeMessage(1, _instance.entityEnrichment, EntityEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.thesaurusEnrichment) {
            _writer.writeMessage(2, _instance.thesaurusEnrichment, ThesaurusEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.word2vecEnrichment) {
            _writer.writeMessage(3, _instance.word2vecEnrichment, Word2VecEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.wordNetEnrichment) {
            _writer.writeMessage(4, _instance.wordNetEnrichment, WordNetAugEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.gpt2Enrichment) {
            _writer.writeMessage(5, _instance.gpt2Enrichment, GPT2EnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.gloveEnrichment) {
            _writer.writeMessage(6, _instance.gloveEnrichment, GloVeEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.fasttextEnrichment) {
            _writer.writeMessage(7, _instance.fasttextEnrichment, FastTextEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.bertEnrichment) {
            _writer.writeMessage(8, _instance.bertEnrichment, BertAugEnrichmentConfig.serializeBinaryToWriter);
        }
        if (_instance.xlnetEnrichment) {
            _writer.writeMessage(9, _instance.xlnetEnrichment, XLNetAugEnrichmentConfig.serializeBinaryToWriter);
        }
    }
    get entityEnrichment() {
        return this._entityEnrichment;
    }
    set entityEnrichment(value) {
        this._entityEnrichment = value;
    }
    get thesaurusEnrichment() {
        return this._thesaurusEnrichment;
    }
    set thesaurusEnrichment(value) {
        this._thesaurusEnrichment = value;
    }
    get word2vecEnrichment() {
        return this._word2vecEnrichment;
    }
    set word2vecEnrichment(value) {
        this._word2vecEnrichment = value;
    }
    get wordNetEnrichment() {
        return this._wordNetEnrichment;
    }
    set wordNetEnrichment(value) {
        this._wordNetEnrichment = value;
    }
    get gpt2Enrichment() {
        return this._gpt2Enrichment;
    }
    set gpt2Enrichment(value) {
        this._gpt2Enrichment = value;
    }
    get gloveEnrichment() {
        return this._gloveEnrichment;
    }
    set gloveEnrichment(value) {
        this._gloveEnrichment = value;
    }
    get fasttextEnrichment() {
        return this._fasttextEnrichment;
    }
    set fasttextEnrichment(value) {
        this._fasttextEnrichment = value;
    }
    get bertEnrichment() {
        return this._bertEnrichment;
    }
    set bertEnrichment(value) {
        this._bertEnrichment = value;
    }
    get xlnetEnrichment() {
        return this._xlnetEnrichment;
    }
    set xlnetEnrichment(value) {
        this._xlnetEnrichment = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DataEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            entityEnrichment: this.entityEnrichment
                ? this.entityEnrichment.toObject()
                : undefined,
            thesaurusEnrichment: this.thesaurusEnrichment
                ? this.thesaurusEnrichment.toObject()
                : undefined,
            word2vecEnrichment: this.word2vecEnrichment
                ? this.word2vecEnrichment.toObject()
                : undefined,
            wordNetEnrichment: this.wordNetEnrichment
                ? this.wordNetEnrichment.toObject()
                : undefined,
            gpt2Enrichment: this.gpt2Enrichment
                ? this.gpt2Enrichment.toObject()
                : undefined,
            gloveEnrichment: this.gloveEnrichment
                ? this.gloveEnrichment.toObject()
                : undefined,
            fasttextEnrichment: this.fasttextEnrichment
                ? this.fasttextEnrichment.toObject()
                : undefined,
            bertEnrichment: this.bertEnrichment
                ? this.bertEnrichment.toObject()
                : undefined,
            xlnetEnrichment: this.xlnetEnrichment
                ? this.xlnetEnrichment.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            entityEnrichment: this.entityEnrichment
                ? this.entityEnrichment.toProtobufJSON(options)
                : null,
            thesaurusEnrichment: this.thesaurusEnrichment
                ? this.thesaurusEnrichment.toProtobufJSON(options)
                : null,
            word2vecEnrichment: this.word2vecEnrichment
                ? this.word2vecEnrichment.toProtobufJSON(options)
                : null,
            wordNetEnrichment: this.wordNetEnrichment
                ? this.wordNetEnrichment.toProtobufJSON(options)
                : null,
            gpt2Enrichment: this.gpt2Enrichment
                ? this.gpt2Enrichment.toProtobufJSON(options)
                : null,
            gloveEnrichment: this.gloveEnrichment
                ? this.gloveEnrichment.toProtobufJSON(options)
                : null,
            fasttextEnrichment: this.fasttextEnrichment
                ? this.fasttextEnrichment.toProtobufJSON(options)
                : null,
            bertEnrichment: this.bertEnrichment
                ? this.bertEnrichment.toProtobufJSON(options)
                : null,
            xlnetEnrichment: this.xlnetEnrichment
                ? this.xlnetEnrichment.toProtobufJSON(options)
                : null
        };
    }
}
DataEnrichmentConfig.id = 'ondewo.nlu.DataEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.EntityEnrichmentConfig
 */
class EntityEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EntityEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        EntityEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EntityEnrichmentConfig();
        EntityEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EntityEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EntityEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
EntityEnrichmentConfig.id = 'ondewo.nlu.EntityEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.ThesaurusEnrichmentConfig
 */
class ThesaurusEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ThesaurusEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        ThesaurusEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ThesaurusEnrichmentConfig();
        ThesaurusEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ThesaurusEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ThesaurusEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
ThesaurusEnrichmentConfig.id = 'ondewo.nlu.ThesaurusEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.FastTextEnrichmentConfig
 */
class FastTextEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FastTextEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        FastTextEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FastTextEnrichmentConfig();
        FastTextEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FastTextEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FastTextEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
FastTextEnrichmentConfig.id = 'ondewo.nlu.FastTextEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.BertAugEnrichmentConfig
 */
class BertAugEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BertAugEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        BertAugEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BertAugEnrichmentConfig();
        BertAugEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BertAugEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BertAugEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
BertAugEnrichmentConfig.id = 'ondewo.nlu.BertAugEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.GloVeEnrichmentConfig
 */
class GloVeEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GloVeEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        GloVeEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GloVeEnrichmentConfig();
        GloVeEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GloVeEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GloVeEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
GloVeEnrichmentConfig.id = 'ondewo.nlu.GloVeEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.GPT2EnrichmentConfig
 */
class GPT2EnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GPT2EnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        GPT2EnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GPT2EnrichmentConfig();
        GPT2EnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GPT2EnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GPT2EnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
GPT2EnrichmentConfig.id = 'ondewo.nlu.GPT2EnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.Word2VecEnrichmentConfig
 */
class Word2VecEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Word2VecEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        Word2VecEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Word2VecEnrichmentConfig();
        Word2VecEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Word2VecEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Word2VecEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
Word2VecEnrichmentConfig.id = 'ondewo.nlu.Word2VecEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.WordNetAugEnrichmentConfig
 */
class WordNetAugEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of WordNetAugEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        WordNetAugEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new WordNetAugEnrichmentConfig();
        WordNetAugEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        WordNetAugEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        WordNetAugEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
WordNetAugEnrichmentConfig.id = 'ondewo.nlu.WordNetAugEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.XLNetAugEnrichmentConfig
 */
class XLNetAugEnrichmentConfig {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of XLNetAugEnrichmentConfig to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isActive = _value.isActive;
        this.enrichmentFactor = _value.enrichmentFactor;
        this.executionOrder = _value.executionOrder;
        XLNetAugEnrichmentConfig.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new XLNetAugEnrichmentConfig();
        XLNetAugEnrichmentConfig.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isActive = _instance.isActive || false;
        _instance.enrichmentFactor = _instance.enrichmentFactor || 0;
        _instance.executionOrder = _instance.executionOrder || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isActive = _reader.readBool();
                    break;
                case 2:
                    _instance.enrichmentFactor = _reader.readInt32();
                    break;
                case 3:
                    _instance.executionOrder = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        XLNetAugEnrichmentConfig.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isActive) {
            _writer.writeBool(1, _instance.isActive);
        }
        if (_instance.enrichmentFactor) {
            _writer.writeInt32(2, _instance.enrichmentFactor);
        }
        if (_instance.executionOrder) {
            _writer.writeInt32(3, _instance.executionOrder);
        }
    }
    get isActive() {
        return this._isActive;
    }
    set isActive(value) {
        this._isActive = value;
    }
    get enrichmentFactor() {
        return this._enrichmentFactor;
    }
    set enrichmentFactor(value) {
        this._enrichmentFactor = value;
    }
    get executionOrder() {
        return this._executionOrder;
    }
    set executionOrder(value) {
        this._executionOrder = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        XLNetAugEnrichmentConfig.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isActive: this.isActive,
            enrichmentFactor: this.enrichmentFactor,
            executionOrder: this.executionOrder
        };
    }
}
XLNetAugEnrichmentConfig.id = 'ondewo.nlu.XLNetAugEnrichmentConfig';
/**
 * Message implementation for ondewo.nlu.ClassifyIntentsRequest
 */
class ClassifyIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ClassifyIntentsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.text = _value.text;
        this.languageCode = _value.languageCode;
        this.activeContexts = _value.activeContexts;
        this.contextNames = (_value.contextNames || []).slice();
        this.mode = _value.mode;
        this.algorithms = (_value.algorithms || []).slice();
        ClassifyIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ClassifyIntentsRequest();
        ClassifyIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.text = _instance.text || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.activeContexts = _instance.activeContexts || false;
        _instance.contextNames = _instance.contextNames || [];
        _instance.mode = _instance.mode || 0;
        _instance.algorithms = _instance.algorithms || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.text = _reader.readString();
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.activeContexts = _reader.readBool();
                    break;
                case 5:
                    (_instance.contextNames = _instance.contextNames || []).push(_reader.readString());
                    break;
                case 6:
                    _instance.mode = _reader.readEnum();
                    break;
                case 7:
                    (_instance.algorithms = _instance.algorithms || []).push(...(_reader.readPackedEnum() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        ClassifyIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.text) {
            _writer.writeString(2, _instance.text);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.activeContexts) {
            _writer.writeBool(4, _instance.activeContexts);
        }
        if (_instance.contextNames && _instance.contextNames.length) {
            _writer.writeRepeatedString(5, _instance.contextNames);
        }
        if (_instance.mode) {
            _writer.writeEnum(6, _instance.mode);
        }
        if (_instance.algorithms && _instance.algorithms.length) {
            _writer.writePackedEnum(7, _instance.algorithms);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get activeContexts() {
        return this._activeContexts;
    }
    set activeContexts(value) {
        this._activeContexts = value;
    }
    get contextNames() {
        return this._contextNames;
    }
    set contextNames(value) {
        this._contextNames = value;
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        this._mode = value;
    }
    get algorithms() {
        return this._algorithms;
    }
    set algorithms(value) {
        this._algorithms = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ClassifyIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            text: this.text,
            languageCode: this.languageCode,
            activeContexts: this.activeContexts,
            contextNames: (this.contextNames || []).slice(),
            mode: this.mode,
            algorithms: (this.algorithms || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            text: this.text,
            languageCode: this.languageCode,
            activeContexts: this.activeContexts,
            contextNames: (this.contextNames || []).slice(),
            mode: Mode[this.mode === null || this.mode === undefined ? 0 : this.mode],
            algorithms: (this.algorithms || []).map(v => IntentAlgorithms[v])
        };
    }
}
ClassifyIntentsRequest.id = 'ondewo.nlu.ClassifyIntentsRequest';
/**
 * Message implementation for ondewo.nlu.IntentClassified
 */
class IntentClassified {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IntentClassified to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intentName = _value.intentName;
        this.intentDisplayName = _value.intentDisplayName;
        this.classifier = _value.classifier;
        this.score = _value.score;
        IntentClassified.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IntentClassified();
        IntentClassified.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intentName = _instance.intentName || '';
        _instance.intentDisplayName = _instance.intentDisplayName || '';
        _instance.classifier = _instance.classifier || '';
        _instance.score = _instance.score || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intentName = _reader.readString();
                    break;
                case 2:
                    _instance.intentDisplayName = _reader.readString();
                    break;
                case 3:
                    _instance.classifier = _reader.readString();
                    break;
                case 4:
                    _instance.score = _reader.readFloat();
                    break;
                default:
                    _reader.skipField();
            }
        }
        IntentClassified.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intentName) {
            _writer.writeString(1, _instance.intentName);
        }
        if (_instance.intentDisplayName) {
            _writer.writeString(2, _instance.intentDisplayName);
        }
        if (_instance.classifier) {
            _writer.writeString(3, _instance.classifier);
        }
        if (_instance.score) {
            _writer.writeFloat(4, _instance.score);
        }
    }
    get intentName() {
        return this._intentName;
    }
    set intentName(value) {
        this._intentName = value;
    }
    get intentDisplayName() {
        return this._intentDisplayName;
    }
    set intentDisplayName(value) {
        this._intentDisplayName = value;
    }
    get classifier() {
        return this._classifier;
    }
    set classifier(value) {
        this._classifier = value;
    }
    get score() {
        return this._score;
    }
    set score(value) {
        this._score = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IntentClassified.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intentName: this.intentName,
            intentDisplayName: this.intentDisplayName,
            classifier: this.classifier,
            score: this.score
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intentName: this.intentName,
            intentDisplayName: this.intentDisplayName,
            classifier: this.classifier,
            score: this.score
        };
    }
}
IntentClassified.id = 'ondewo.nlu.IntentClassified';
/**
 * Message implementation for ondewo.nlu.ClassifyIntentsResponse
 */
class ClassifyIntentsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ClassifyIntentsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intentsClassified = (_value.intentsClassified || []).map(m => new IntentClassified(m));
        this.text = _value.text;
        this.activeContexts = _value.activeContexts;
        this.contextNames = (_value.contextNames || []).slice();
        ClassifyIntentsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ClassifyIntentsResponse();
        ClassifyIntentsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intentsClassified = _instance.intentsClassified || [];
        _instance.text = _instance.text || '';
        _instance.activeContexts = _instance.activeContexts || false;
        _instance.contextNames = _instance.contextNames || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new IntentClassified();
                    _reader.readMessage(messageInitializer1, IntentClassified.deserializeBinaryFromReader);
                    (_instance.intentsClassified =
                        _instance.intentsClassified || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.text = _reader.readString();
                    break;
                case 3:
                    _instance.activeContexts = _reader.readBool();
                    break;
                case 4:
                    (_instance.contextNames = _instance.contextNames || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ClassifyIntentsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intentsClassified && _instance.intentsClassified.length) {
            _writer.writeRepeatedMessage(1, _instance.intentsClassified, IntentClassified.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeString(2, _instance.text);
        }
        if (_instance.activeContexts) {
            _writer.writeBool(3, _instance.activeContexts);
        }
        if (_instance.contextNames && _instance.contextNames.length) {
            _writer.writeRepeatedString(4, _instance.contextNames);
        }
    }
    get intentsClassified() {
        return this._intentsClassified;
    }
    set intentsClassified(value) {
        this._intentsClassified = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get activeContexts() {
        return this._activeContexts;
    }
    set activeContexts(value) {
        this._activeContexts = value;
    }
    get contextNames() {
        return this._contextNames;
    }
    set contextNames(value) {
        this._contextNames = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ClassifyIntentsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intentsClassified: (this.intentsClassified || []).map(m => m.toObject()),
            text: this.text,
            activeContexts: this.activeContexts,
            contextNames: (this.contextNames || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intentsClassified: (this.intentsClassified || []).map(m => m.toProtobufJSON(options)),
            text: this.text,
            activeContexts: this.activeContexts,
            contextNames: (this.contextNames || []).slice()
        };
    }
}
ClassifyIntentsResponse.id = 'ondewo.nlu.ClassifyIntentsResponse';

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.ProjectRoles
 */
class ProjectRolesClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.ProjectRoles/CreateProjectRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ProjectRole>>
             */
            createProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectRoles/CreateProjectRole',
                    requestData,
                    requestMetadata,
                    requestClass: CreateProjectRoleRequest,
                    responseClass: ProjectRole
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectRoles/GetProjectRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ProjectRole>>
             */
            getProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectRoles/GetProjectRole',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectRoleRequest,
                    responseClass: ProjectRole
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectRoles/DeleteProjectRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectRoles/DeleteProjectRole',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteProjectRoleRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectRoles/UpdateProjectRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ProjectRole>>
             */
            updateProjectRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectRoles/UpdateProjectRole',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateProjectRoleRequest,
                    responseClass: ProjectRole
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.ProjectRoles/ListProjectRoles
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListProjectRolesResponse>>
             */
            listProjectRoles: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.ProjectRoles/ListProjectRoles',
                    requestData,
                    requestMetadata,
                    requestClass: ListProjectRolesRequest,
                    responseClass: ListProjectRolesResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.ProjectRoles', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectRoles/CreateProjectRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ProjectRole>
     */
    createProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createProjectRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectRoles/GetProjectRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ProjectRole>
     */
    getProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getProjectRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectRoles/DeleteProjectRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteProjectRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectRoles/UpdateProjectRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ProjectRole>
     */
    updateProjectRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateProjectRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.ProjectRoles/ListProjectRoles
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListProjectRolesResponse>
     */
    listProjectRoles(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listProjectRoles(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
ProjectRolesClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ProjectRolesClient, deps: [{ token: GRPC_PROJECT_ROLES_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
ProjectRolesClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ProjectRolesClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ProjectRolesClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_PROJECT_ROLES_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Specific GrpcClientSettings for AiServices.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_AI_SERVICES_CLIENT_SETTINGS = new InjectionToken('GRPC_AI_SERVICES_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.Intents
 */
class IntentsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.Intents/ListIntents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListIntentsResponse>>
             */
            listIntents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/ListIntents',
                    requestData,
                    requestMetadata,
                    requestClass: ListIntentsRequest,
                    responseClass: ListIntentsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/GetIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Intent>>
             */
            getIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/GetIntent',
                    requestData,
                    requestMetadata,
                    requestClass: GetIntentRequest,
                    responseClass: Intent
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/CreateIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Intent>>
             */
            createIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/CreateIntent',
                    requestData,
                    requestMetadata,
                    requestClass: CreateIntentRequest,
                    responseClass: Intent
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/UpdateIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Intent>>
             */
            updateIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/UpdateIntent',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateIntentRequest,
                    responseClass: Intent
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/DeleteIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf003.Empty>>
             */
            deleteIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/DeleteIntent',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteIntentRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchUpdateIntents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning009.Operation>>
             */
            batchUpdateIntents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchUpdateIntents',
                    requestData,
                    requestMetadata,
                    requestClass: BatchUpdateIntentsRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchDeleteIntents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleLongrunning009.Operation>>
             */
            batchDeleteIntents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchDeleteIntents',
                    requestData,
                    requestMetadata,
                    requestClass: BatchDeleteIntentsRequest,
                    responseClass: Operation
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/TagIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf003.Empty>>
             */
            tagIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/TagIntent',
                    requestData,
                    requestMetadata,
                    requestClass: IntentTagRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/DeleteIntentTag
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf003.Empty>>
             */
            deleteIntentTag: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/DeleteIntentTag',
                    requestData,
                    requestMetadata,
                    requestClass: IntentTagRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchCreateTrainingPhrases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchTrainingPhrasesStatusResponse>>
             */
            batchCreateTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchCreateTrainingPhrases',
                    requestData,
                    requestMetadata,
                    requestClass: BatchCreateTrainingPhrasesRequest,
                    responseClass: BatchTrainingPhrasesStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchGetTrainingPhrases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchTrainingPhrasesStatusResponse>>
             */
            batchGetTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchGetTrainingPhrases',
                    requestData,
                    requestMetadata,
                    requestClass: BatchGetTrainingPhrasesRequest,
                    responseClass: BatchTrainingPhrasesStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchUpdateTrainingPhrases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchTrainingPhrasesStatusResponse>>
             */
            batchUpdateTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchUpdateTrainingPhrases',
                    requestData,
                    requestMetadata,
                    requestClass: BatchUpdateTrainingPhrasesRequest,
                    responseClass: BatchTrainingPhrasesStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchDeleteTrainingPhrases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchDeleteTrainingPhrasesResponse>>
             */
            batchDeleteTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchDeleteTrainingPhrases',
                    requestData,
                    requestMetadata,
                    requestClass: BatchDeleteTrainingPhrasesRequest,
                    responseClass: BatchDeleteTrainingPhrasesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/ListTrainingPhrases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListTrainingPhrasesResponse>>
             */
            listTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/ListTrainingPhrases',
                    requestData,
                    requestMetadata,
                    requestClass: ListTrainingPhrasesRequest,
                    responseClass: ListTrainingPhrasesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchCreateResponseMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchResponseMessagesStatusResponse>>
             */
            batchCreateResponseMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchCreateResponseMessages',
                    requestData,
                    requestMetadata,
                    requestClass: BatchCreateResponseMessagesRequest,
                    responseClass: BatchResponseMessagesStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchGetResponseMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchResponseMessagesStatusResponse>>
             */
            batchGetResponseMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchGetResponseMessages',
                    requestData,
                    requestMetadata,
                    requestClass: BatchGetResponseMessagesRequest,
                    responseClass: BatchResponseMessagesStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchUpdateResponseMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchResponseMessagesStatusResponse>>
             */
            batchUpdateResponseMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchUpdateResponseMessages',
                    requestData,
                    requestMetadata,
                    requestClass: BatchUpdateResponseMessagesRequest,
                    responseClass: BatchResponseMessagesStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchDeleteResponseMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchDeleteResponseMessagesResponse>>
             */
            batchDeleteResponseMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchDeleteResponseMessages',
                    requestData,
                    requestMetadata,
                    requestClass: BatchDeleteResponseMessagesRequest,
                    responseClass: BatchDeleteResponseMessagesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/ListResponseMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListResponseMessagesResponse>>
             */
            listResponseMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/ListResponseMessages',
                    requestData,
                    requestMetadata,
                    requestClass: ListResponseMessagesRequest,
                    responseClass: ListResponseMessagesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchCreateParameters
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchParametersStatusResponse>>
             */
            batchCreateParameters: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchCreateParameters',
                    requestData,
                    requestMetadata,
                    requestClass: BatchCreateParametersRequest,
                    responseClass: BatchParametersStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchGetParameters
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchParametersStatusResponse>>
             */
            batchGetParameters: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchGetParameters',
                    requestData,
                    requestMetadata,
                    requestClass: BatchGetParametersRequest,
                    responseClass: BatchParametersStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchUpdateParameters
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchParametersStatusResponse>>
             */
            batchUpdateParameters: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchUpdateParameters',
                    requestData,
                    requestMetadata,
                    requestClass: BatchUpdateParametersRequest,
                    responseClass: BatchParametersStatusResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/BatchDeleteParameters
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BatchDeleteParametersResponse>>
             */
            batchDeleteParameters: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/BatchDeleteParameters',
                    requestData,
                    requestMetadata,
                    requestClass: BatchDeleteParametersRequest,
                    responseClass: BatchDeleteParametersResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Intents/ListParameters
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListParametersResponse>>
             */
            listParameters: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Intents/ListParameters',
                    requestData,
                    requestMetadata,
                    requestClass: ListParametersRequest,
                    responseClass: ListParametersResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.Intents', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/ListIntents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListIntentsResponse>
     */
    listIntents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listIntents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/GetIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Intent>
     */
    getIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/CreateIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Intent>
     */
    createIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/UpdateIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Intent>
     */
    updateIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/DeleteIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf003.Empty>
     */
    deleteIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchUpdateIntents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning009.Operation>
     */
    batchUpdateIntents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchUpdateIntents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchDeleteIntents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleLongrunning009.Operation>
     */
    batchDeleteIntents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchDeleteIntents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/TagIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf003.Empty>
     */
    tagIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .tagIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/DeleteIntentTag
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf003.Empty>
     */
    deleteIntentTag(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteIntentTag(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchCreateTrainingPhrases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchTrainingPhrasesStatusResponse>
     */
    batchCreateTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchCreateTrainingPhrases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchGetTrainingPhrases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchTrainingPhrasesStatusResponse>
     */
    batchGetTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchGetTrainingPhrases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchUpdateTrainingPhrases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchTrainingPhrasesStatusResponse>
     */
    batchUpdateTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchUpdateTrainingPhrases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchDeleteTrainingPhrases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchDeleteTrainingPhrasesResponse>
     */
    batchDeleteTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchDeleteTrainingPhrases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/ListTrainingPhrases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListTrainingPhrasesResponse>
     */
    listTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listTrainingPhrases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchCreateResponseMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchResponseMessagesStatusResponse>
     */
    batchCreateResponseMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchCreateResponseMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchGetResponseMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchResponseMessagesStatusResponse>
     */
    batchGetResponseMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchGetResponseMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchUpdateResponseMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchResponseMessagesStatusResponse>
     */
    batchUpdateResponseMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchUpdateResponseMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchDeleteResponseMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchDeleteResponseMessagesResponse>
     */
    batchDeleteResponseMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchDeleteResponseMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/ListResponseMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListResponseMessagesResponse>
     */
    listResponseMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listResponseMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchCreateParameters
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchParametersStatusResponse>
     */
    batchCreateParameters(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchCreateParameters(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchGetParameters
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchParametersStatusResponse>
     */
    batchGetParameters(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchGetParameters(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchUpdateParameters
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchParametersStatusResponse>
     */
    batchUpdateParameters(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchUpdateParameters(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/BatchDeleteParameters
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BatchDeleteParametersResponse>
     */
    batchDeleteParameters(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .batchDeleteParameters(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Intents/ListParameters
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListParametersResponse>
     */
    listParameters(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listParameters(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
IntentsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IntentsClient, deps: [{ token: GRPC_INTENTS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
IntentsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IntentsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IntentsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_INTENTS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.Users
 */
class UsersClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.Users/CreateUser
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.User>>
             */
            createUser: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/CreateUser',
                    requestData,
                    requestMetadata,
                    requestClass: CreateUserRequest,
                    responseClass: User
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/GetUser
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.User>>
             */
            getUser: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/GetUser',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserRequest,
                    responseClass: User
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/GetUserInfo
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UserInfo>>
             */
            getUserInfo: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/GetUserInfo',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserRequest,
                    responseClass: UserInfo
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/DeleteUser
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteUser: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/DeleteUser',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/UpdateUser
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.User>>
             */
            updateUser: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/UpdateUser',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateUserRequest,
                    responseClass: User
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/ListUsers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListUsersResponse>>
             */
            listUsers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/ListUsers',
                    requestData,
                    requestMetadata,
                    requestClass: ListUsersRequest,
                    responseClass: ListUsersResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/ListUserInfos
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListUserInfosResponse>>
             */
            listUserInfos: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/ListUserInfos',
                    requestData,
                    requestMetadata,
                    requestClass: ListUsersRequest,
                    responseClass: ListUserInfosResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/CreateServerRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ServerRole>>
             */
            createServerRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/CreateServerRole',
                    requestData,
                    requestMetadata,
                    requestClass: CreateServerRoleRequest,
                    responseClass: ServerRole
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/GetServerRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ServerRole>>
             */
            getServerRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/GetServerRole',
                    requestData,
                    requestMetadata,
                    requestClass: GetServerRoleRequest,
                    responseClass: ServerRole
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/DeleteServerRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            deleteServerRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/DeleteServerRole',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteServerRoleRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/UpdateServerRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ServerRole>>
             */
            updateServerRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/UpdateServerRole',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateServerRoleRequest,
                    responseClass: ServerRole
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/ListServerRoles
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListServerRolesResponse>>
             */
            listServerRoles: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/ListServerRoles',
                    requestData,
                    requestMetadata,
                    requestClass: ListServerRolesRequest,
                    responseClass: ListServerRolesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/ListServerPermissions
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListServerPermissionsResponse>>
             */
            listServerPermissions: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/ListServerPermissions',
                    requestData,
                    requestMetadata,
                    requestClass: ListServerPermissionsRequest,
                    responseClass: ListServerPermissionsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/Login
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.LoginResponse>>
             */
            login: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/Login',
                    requestData,
                    requestMetadata,
                    requestClass: LoginRequest,
                    responseClass: LoginResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Users/CheckLogin
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf004.Empty>>
             */
            checkLogin: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Users/CheckLogin',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: googleProtobuf003.Empty
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.Users', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/CreateUser
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.User>
     */
    createUser(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createUser(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/GetUser
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.User>
     */
    getUser(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUser(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/GetUserInfo
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UserInfo>
     */
    getUserInfo(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserInfo(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/DeleteUser
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteUser(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteUser(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/UpdateUser
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.User>
     */
    updateUser(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateUser(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/ListUsers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListUsersResponse>
     */
    listUsers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listUsers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/ListUserInfos
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListUserInfosResponse>
     */
    listUserInfos(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listUserInfos(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/CreateServerRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ServerRole>
     */
    createServerRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createServerRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/GetServerRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ServerRole>
     */
    getServerRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getServerRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/DeleteServerRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    deleteServerRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteServerRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/UpdateServerRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ServerRole>
     */
    updateServerRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateServerRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/ListServerRoles
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListServerRolesResponse>
     */
    listServerRoles(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listServerRoles(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/ListServerPermissions
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListServerPermissionsResponse>
     */
    listServerPermissions(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listServerPermissions(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/Login
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.LoginResponse>
     */
    login(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .login(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Users/CheckLogin
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf004.Empty>
     */
    checkLogin(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .checkLogin(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
UsersClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: UsersClient, deps: [{ token: GRPC_USERS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
UsersClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: UsersClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: UsersClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_USERS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Utilities.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_UTILITIES_CLIENT_SETTINGS = new InjectionToken('GRPC_UTILITIES_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.Utilities
 */
class UtilitiesClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.Utilities/ValidateRegex
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ValidateRegexResponse>>
             */
            validateRegex: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/ValidateRegex',
                    requestData,
                    requestMetadata,
                    requestClass: ValidateRegexRequest,
                    responseClass: ValidateRegexResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Utilities/ValidateEmbeddedRegex
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ValidateEmbeddedRegexResponse>>
             */
            validateEmbeddedRegex: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/ValidateEmbeddedRegex',
                    requestData,
                    requestMetadata,
                    requestClass: ValidateEmbeddedRegexRequest,
                    responseClass: ValidateEmbeddedRegexResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Utilities/CleanAllIntents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CleanAllIntentsResponse>>
             */
            cleanAllIntents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/CleanAllIntents',
                    requestData,
                    requestMetadata,
                    requestClass: CleanAllIntentsRequest,
                    responseClass: CleanAllIntentsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Utilities/CleanIntent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CleanIntentResponse>>
             */
            cleanIntent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/CleanIntent',
                    requestData,
                    requestMetadata,
                    requestClass: CleanIntentRequest,
                    responseClass: CleanIntentResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Utilities/CleanAllEntityTypes
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CleanAllEntityTypesResponse>>
             */
            cleanAllEntityTypes: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/CleanAllEntityTypes',
                    requestData,
                    requestMetadata,
                    requestClass: CleanAllEntityTypesRequest,
                    responseClass: CleanAllEntityTypesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Utilities/CleanEntityType
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CleanEntityTypeResponse>>
             */
            cleanEntityType: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/CleanEntityType',
                    requestData,
                    requestMetadata,
                    requestClass: CleanEntityTypeRequest,
                    responseClass: CleanEntityTypeResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Utilities/AddTrainingPhrases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AddTrainingPhrasesResponse>>
             */
            addTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/AddTrainingPhrases',
                    requestData,
                    requestMetadata,
                    requestClass: AddTrainingPhrasesRequest,
                    responseClass: AddTrainingPhrasesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Utilities/AddTrainingPhrasesFromCSV
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AddTrainingPhrasesResponse>>
             */
            addTrainingPhrasesFromCSV: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Utilities/AddTrainingPhrasesFromCSV',
                    requestData,
                    requestMetadata,
                    requestClass: AddTrainingPhrasesFromCSVRequest,
                    responseClass: AddTrainingPhrasesResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.Utilities', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/ValidateRegex
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ValidateRegexResponse>
     */
    validateRegex(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .validateRegex(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/ValidateEmbeddedRegex
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ValidateEmbeddedRegexResponse>
     */
    validateEmbeddedRegex(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .validateEmbeddedRegex(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/CleanAllIntents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CleanAllIntentsResponse>
     */
    cleanAllIntents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .cleanAllIntents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/CleanIntent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CleanIntentResponse>
     */
    cleanIntent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .cleanIntent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/CleanAllEntityTypes
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CleanAllEntityTypesResponse>
     */
    cleanAllEntityTypes(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .cleanAllEntityTypes(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/CleanEntityType
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CleanEntityTypeResponse>
     */
    cleanEntityType(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .cleanEntityType(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/AddTrainingPhrases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AddTrainingPhrasesResponse>
     */
    addTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addTrainingPhrases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Utilities/AddTrainingPhrasesFromCSV
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AddTrainingPhrasesResponse>
     */
    addTrainingPhrasesFromCSV(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addTrainingPhrasesFromCSV(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
UtilitiesClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: UtilitiesClient, deps: [{ token: GRPC_UTILITIES_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
UtilitiesClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: UtilitiesClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: UtilitiesClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_UTILITIES_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.Contexts
 */
class ContextsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.Contexts/ListContexts
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListContextsResponse>>
             */
            listContexts: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Contexts/ListContexts',
                    requestData,
                    requestMetadata,
                    requestClass: ListContextsRequest,
                    responseClass: ListContextsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Contexts/GetContext
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Context>>
             */
            getContext: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Contexts/GetContext',
                    requestData,
                    requestMetadata,
                    requestClass: GetContextRequest,
                    responseClass: Context
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Contexts/CreateContext
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Context>>
             */
            createContext: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Contexts/CreateContext',
                    requestData,
                    requestMetadata,
                    requestClass: CreateContextRequest,
                    responseClass: Context
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Contexts/UpdateContext
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.Context>>
             */
            updateContext: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Contexts/UpdateContext',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateContextRequest,
                    responseClass: Context
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Contexts/DeleteContext
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf003.Empty>>
             */
            deleteContext: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Contexts/DeleteContext',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteContextRequest,
                    responseClass: googleProtobuf003.Empty
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.Contexts/DeleteAllContexts
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<googleProtobuf003.Empty>>
             */
            deleteAllContexts: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.Contexts/DeleteAllContexts',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteAllContextsRequest,
                    responseClass: googleProtobuf003.Empty
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.Contexts', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.Contexts/ListContexts
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListContextsResponse>
     */
    listContexts(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listContexts(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Contexts/GetContext
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Context>
     */
    getContext(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getContext(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Contexts/CreateContext
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Context>
     */
    createContext(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createContext(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Contexts/UpdateContext
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.Context>
     */
    updateContext(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateContext(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Contexts/DeleteContext
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf003.Empty>
     */
    deleteContext(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteContext(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.Contexts/DeleteAllContexts
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<googleProtobuf003.Empty>
     */
    deleteAllContexts(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteAllContexts(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
ContextsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ContextsClient, deps: [{ token: GRPC_CONTEXTS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
ContextsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ContextsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: ContextsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_CONTEXTS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/**
 * Service client implementation for ondewo.nlu.AiServices
 */
class AiServicesClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.nlu.AiServices/ExtractEntities
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ExtractEntitiesResponse>>
             */
            extractEntities: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/ExtractEntities',
                    requestData,
                    requestMetadata,
                    requestClass: ExtractEntitiesRequest,
                    responseClass: ExtractEntitiesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.AiServices/GenerateUserSays
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GenerateUserSaysResponse>>
             */
            generateUserSays: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/GenerateUserSays',
                    requestData,
                    requestMetadata,
                    requestClass: GenerateUserSaysRequest,
                    responseClass: GenerateUserSaysResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.AiServices/GenerateResponses
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GenerateResponsesResponse>>
             */
            generateResponses: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/GenerateResponses',
                    requestData,
                    requestMetadata,
                    requestClass: GenerateResponsesRequest,
                    responseClass: GenerateResponsesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.AiServices/GetAlternativeSentences
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetAlternativeSentencesResponse>>
             */
            getAlternativeSentences: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/GetAlternativeSentences',
                    requestData,
                    requestMetadata,
                    requestClass: GetAlternativeSentencesRequest,
                    responseClass: GetAlternativeSentencesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.AiServices/GetAlternativeTrainingPhrases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetAlternativeTrainingPhrasesResponse>>
             */
            getAlternativeTrainingPhrases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/GetAlternativeTrainingPhrases',
                    requestData,
                    requestMetadata,
                    requestClass: GetAlternativeTrainingPhrasesRequest,
                    responseClass: GetAlternativeTrainingPhrasesResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.AiServices/GetSynonyms
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetSynonymsResponse>>
             */
            getSynonyms: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/GetSynonyms',
                    requestData,
                    requestMetadata,
                    requestClass: GetSynonymsRequest,
                    responseClass: GetSynonymsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.AiServices/ClassifyIntents
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ClassifyIntentsResponse>>
             */
            classifyIntents: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/ClassifyIntents',
                    requestData,
                    requestMetadata,
                    requestClass: ClassifyIntentsRequest,
                    responseClass: ClassifyIntentsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.nlu.AiServices/ExtractEntitiesFuzzy
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ExtractEntitiesResponse>>
             */
            extractEntitiesFuzzy: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.nlu.AiServices/ExtractEntitiesFuzzy',
                    requestData,
                    requestMetadata,
                    requestClass: ExtractEntitiesFuzzyRequest,
                    responseClass: ExtractEntitiesResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.nlu.AiServices', settings);
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/ExtractEntities
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ExtractEntitiesResponse>
     */
    extractEntities(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .extractEntities(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/GenerateUserSays
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GenerateUserSaysResponse>
     */
    generateUserSays(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .generateUserSays(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/GenerateResponses
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GenerateResponsesResponse>
     */
    generateResponses(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .generateResponses(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/GetAlternativeSentences
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetAlternativeSentencesResponse>
     */
    getAlternativeSentences(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getAlternativeSentences(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/GetAlternativeTrainingPhrases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetAlternativeTrainingPhrasesResponse>
     */
    getAlternativeTrainingPhrases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getAlternativeTrainingPhrases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/GetSynonyms
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetSynonymsResponse>
     */
    getSynonyms(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getSynonyms(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/ClassifyIntents
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ClassifyIntentsResponse>
     */
    classifyIntents(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .classifyIntents(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.nlu.AiServices/ExtractEntitiesFuzzy
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ExtractEntitiesResponse>
     */
    extractEntitiesFuzzy(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .extractEntitiesFuzzy(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
AiServicesClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: AiServicesClient, deps: [{ token: GRPC_AI_SERVICES_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
AiServicesClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: AiServicesClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: AiServicesClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_AI_SERVICES_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for ondewo.qa.GetAnswerRequest
 */
class GetAnswerRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAnswerRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.text = _value.text
            ? new TextInput(_value.text)
            : undefined;
        this.maxNumAnswers = _value.maxNumAnswers;
        this.thresholdReader = _value.thresholdReader;
        this.thresholdRetriever = _value.thresholdRetriever;
        this.thresholdOverall = _value.thresholdOverall;
        this.readerModelName = _value.readerModelName;
        this.urlFilter = _value.urlFilter
            ? new UrlFilter(_value.urlFilter)
            : undefined;
        GetAnswerRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAnswerRequest();
        GetAnswerRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.text = _instance.text || undefined;
        _instance.maxNumAnswers = _instance.maxNumAnswers || 0;
        _instance.thresholdReader = _instance.thresholdReader || 0;
        _instance.thresholdRetriever = _instance.thresholdRetriever || 0;
        _instance.thresholdOverall = _instance.thresholdOverall || 0;
        _instance.readerModelName = _instance.readerModelName || '';
        _instance.urlFilter = _instance.urlFilter || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    _instance.text = new TextInput();
                    _reader.readMessage(_instance.text, TextInput.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.maxNumAnswers = _reader.readInt32();
                    break;
                case 4:
                    _instance.thresholdReader = _reader.readFloat();
                    break;
                case 5:
                    _instance.thresholdRetriever = _reader.readFloat();
                    break;
                case 6:
                    _instance.thresholdOverall = _reader.readFloat();
                    break;
                case 7:
                    _instance.readerModelName = _reader.readString();
                    break;
                case 8:
                    _instance.urlFilter = new UrlFilter();
                    _reader.readMessage(_instance.urlFilter, UrlFilter.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAnswerRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.text) {
            _writer.writeMessage(2, _instance.text, TextInput.serializeBinaryToWriter);
        }
        if (_instance.maxNumAnswers) {
            _writer.writeInt32(3, _instance.maxNumAnswers);
        }
        if (_instance.thresholdReader) {
            _writer.writeFloat(4, _instance.thresholdReader);
        }
        if (_instance.thresholdRetriever) {
            _writer.writeFloat(5, _instance.thresholdRetriever);
        }
        if (_instance.thresholdOverall) {
            _writer.writeFloat(6, _instance.thresholdOverall);
        }
        if (_instance.readerModelName) {
            _writer.writeString(7, _instance.readerModelName);
        }
        if (_instance.urlFilter) {
            _writer.writeMessage(8, _instance.urlFilter, UrlFilter.serializeBinaryToWriter);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get maxNumAnswers() {
        return this._maxNumAnswers;
    }
    set maxNumAnswers(value) {
        this._maxNumAnswers = value;
    }
    get thresholdReader() {
        return this._thresholdReader;
    }
    set thresholdReader(value) {
        this._thresholdReader = value;
    }
    get thresholdRetriever() {
        return this._thresholdRetriever;
    }
    set thresholdRetriever(value) {
        this._thresholdRetriever = value;
    }
    get thresholdOverall() {
        return this._thresholdOverall;
    }
    set thresholdOverall(value) {
        this._thresholdOverall = value;
    }
    get readerModelName() {
        return this._readerModelName;
    }
    set readerModelName(value) {
        this._readerModelName = value;
    }
    get urlFilter() {
        return this._urlFilter;
    }
    set urlFilter(value) {
        this._urlFilter = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAnswerRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            text: this.text ? this.text.toObject() : undefined,
            maxNumAnswers: this.maxNumAnswers,
            thresholdReader: this.thresholdReader,
            thresholdRetriever: this.thresholdRetriever,
            thresholdOverall: this.thresholdOverall,
            readerModelName: this.readerModelName,
            urlFilter: this.urlFilter ? this.urlFilter.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            text: this.text ? this.text.toProtobufJSON(options) : null,
            maxNumAnswers: this.maxNumAnswers,
            thresholdReader: this.thresholdReader,
            thresholdRetriever: this.thresholdRetriever,
            thresholdOverall: this.thresholdOverall,
            readerModelName: this.readerModelName,
            urlFilter: this.urlFilter ? this.urlFilter.toProtobufJSON(options) : null
        };
    }
}
GetAnswerRequest.id = 'ondewo.qa.GetAnswerRequest';
/**
 * Message implementation for ondewo.qa.GetAnswerResponse
 */
class GetAnswerResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAnswerResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.queryResult = _value.queryResult
            ? new DetectIntentResponse(_value.queryResult)
            : undefined;
        GetAnswerResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAnswerResponse();
        GetAnswerResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.queryResult = _instance.queryResult || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.queryResult = new DetectIntentResponse();
                    _reader.readMessage(_instance.queryResult, DetectIntentResponse.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAnswerResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.queryResult) {
            _writer.writeMessage(2, _instance.queryResult, DetectIntentResponse.serializeBinaryToWriter);
        }
    }
    get queryResult() {
        return this._queryResult;
    }
    set queryResult(value) {
        this._queryResult = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAnswerResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            queryResult: this.queryResult ? this.queryResult.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            queryResult: this.queryResult
                ? this.queryResult.toProtobufJSON(options)
                : null
        };
    }
}
GetAnswerResponse.id = 'ondewo.qa.GetAnswerResponse';
/**
 * Message implementation for ondewo.qa.RunScraperRequest
 */
class RunScraperRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RunScraperRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.projectIds = (_value.projectIds || []).slice();
        RunScraperRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RunScraperRequest();
        RunScraperRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.projectIds = _instance.projectIds || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.projectIds = _instance.projectIds || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        RunScraperRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.projectIds && _instance.projectIds.length) {
            _writer.writeRepeatedString(1, _instance.projectIds);
        }
    }
    get projectIds() {
        return this._projectIds;
    }
    set projectIds(value) {
        this._projectIds = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RunScraperRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            projectIds: (this.projectIds || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            projectIds: (this.projectIds || []).slice()
        };
    }
}
RunScraperRequest.id = 'ondewo.qa.RunScraperRequest';
/**
 * Message implementation for ondewo.qa.RunScraperResponse
 */
class RunScraperResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RunScraperResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.scraperContainers = (_value.scraperContainers || []).map(m => new RunScraperResponse.ScraperContainer(m));
        RunScraperResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RunScraperResponse();
        RunScraperResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.scraperContainers = _instance.scraperContainers || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new RunScraperResponse.ScraperContainer();
                    _reader.readMessage(messageInitializer1, RunScraperResponse.ScraperContainer.deserializeBinaryFromReader);
                    (_instance.scraperContainers =
                        _instance.scraperContainers || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RunScraperResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.scraperContainers && _instance.scraperContainers.length) {
            _writer.writeRepeatedMessage(1, _instance.scraperContainers, RunScraperResponse.ScraperContainer.serializeBinaryToWriter);
        }
    }
    get scraperContainers() {
        return this._scraperContainers;
    }
    set scraperContainers(value) {
        this._scraperContainers = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RunScraperResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            scraperContainers: (this.scraperContainers || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            scraperContainers: (this.scraperContainers || []).map(m => m.toProtobufJSON(options))
        };
    }
}
RunScraperResponse.id = 'ondewo.qa.RunScraperResponse';
(function (RunScraperResponse) {
    /**
     * Message implementation for ondewo.qa.ScraperContainer
     */
    class ScraperContainer {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ScraperContainer to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.containerName = _value.containerName;
            this.containerId = _value.containerId;
            ScraperContainer.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ScraperContainer();
            ScraperContainer.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.containerName = _instance.containerName || '';
            _instance.containerId = _instance.containerId || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.containerName = _reader.readString();
                        break;
                    case 2:
                        _instance.containerId = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ScraperContainer.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.containerName) {
                _writer.writeString(1, _instance.containerName);
            }
            if (_instance.containerId) {
                _writer.writeString(2, _instance.containerId);
            }
        }
        get containerName() {
            return this._containerName;
        }
        set containerName(value) {
            this._containerName = value;
        }
        get containerId() {
            return this._containerId;
        }
        set containerId(value) {
            this._containerId = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ScraperContainer.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                containerName: this.containerName,
                containerId: this.containerId
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                containerName: this.containerName,
                containerId: this.containerId
            };
        }
    }
    ScraperContainer.id = 'ondewo.qa.ScraperContainer';
    RunScraperResponse.ScraperContainer = ScraperContainer;
})(RunScraperResponse || (RunScraperResponse = {}));
/**
 * Message implementation for ondewo.qa.RunTrainingResponse
 */
class RunTrainingResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RunTrainingResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.f1 = _value.f1;
        this.accuracy = _value.accuracy;
        RunTrainingResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RunTrainingResponse();
        RunTrainingResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.f1 = _instance.f1 || 0;
        _instance.accuracy = _instance.accuracy || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.f1 = _reader.readFloat();
                    break;
                case 2:
                    _instance.accuracy = _reader.readFloat();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RunTrainingResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.f1) {
            _writer.writeFloat(1, _instance.f1);
        }
        if (_instance.accuracy) {
            _writer.writeFloat(2, _instance.accuracy);
        }
    }
    get f1() {
        return this._f1;
    }
    set f1(value) {
        this._f1 = value;
    }
    get accuracy() {
        return this._accuracy;
    }
    set accuracy(value) {
        this._accuracy = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RunTrainingResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            f1: this.f1,
            accuracy: this.accuracy
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            f1: this.f1,
            accuracy: this.accuracy
        };
    }
}
RunTrainingResponse.id = 'ondewo.qa.RunTrainingResponse';
/**
 * Message implementation for ondewo.qa.UrlFilter
 */
class UrlFilter {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UrlFilter to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.allowedValues = (_value.allowedValues || []).slice();
        this.regexFilterInclude = _value.regexFilterInclude;
        this.regexFilterExclude = _value.regexFilterExclude;
        UrlFilter.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UrlFilter();
        UrlFilter.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.allowedValues = _instance.allowedValues || [];
        _instance.regexFilterInclude = _instance.regexFilterInclude || '';
        _instance.regexFilterExclude = _instance.regexFilterExclude || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.allowedValues = _instance.allowedValues || []).push(_reader.readString());
                    break;
                case 2:
                    _instance.regexFilterInclude = _reader.readString();
                    break;
                case 3:
                    _instance.regexFilterExclude = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UrlFilter.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.allowedValues && _instance.allowedValues.length) {
            _writer.writeRepeatedString(1, _instance.allowedValues);
        }
        if (_instance.regexFilterInclude) {
            _writer.writeString(2, _instance.regexFilterInclude);
        }
        if (_instance.regexFilterExclude) {
            _writer.writeString(3, _instance.regexFilterExclude);
        }
    }
    get allowedValues() {
        return this._allowedValues;
    }
    set allowedValues(value) {
        this._allowedValues = value;
    }
    get regexFilterInclude() {
        return this._regexFilterInclude;
    }
    set regexFilterInclude(value) {
        this._regexFilterInclude = value;
    }
    get regexFilterExclude() {
        return this._regexFilterExclude;
    }
    set regexFilterExclude(value) {
        this._regexFilterExclude = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UrlFilter.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            allowedValues: (this.allowedValues || []).slice(),
            regexFilterInclude: this.regexFilterInclude,
            regexFilterExclude: this.regexFilterExclude
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            allowedValues: (this.allowedValues || []).slice(),
            regexFilterInclude: this.regexFilterInclude,
            regexFilterExclude: this.regexFilterExclude
        };
    }
}
UrlFilter.id = 'ondewo.qa.UrlFilter';
/**
 * Message implementation for ondewo.qa.GetServerStateResponse
 */
class GetServerStateResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetServerStateResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.serverIsReady = _value.serverIsReady;
        GetServerStateResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetServerStateResponse();
        GetServerStateResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.serverIsReady = _instance.serverIsReady || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.serverIsReady = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetServerStateResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.serverIsReady) {
            _writer.writeBool(1, _instance.serverIsReady);
        }
    }
    get serverIsReady() {
        return this._serverIsReady;
    }
    set serverIsReady(value) {
        this._serverIsReady = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetServerStateResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            serverIsReady: this.serverIsReady
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            serverIsReady: this.serverIsReady
        };
    }
}
GetServerStateResponse.id = 'ondewo.qa.GetServerStateResponse';
/**
 * Message implementation for ondewo.qa.ListProjectIdsResponse
 */
class ListProjectIdsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListProjectIdsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.projectIds = (_value.projectIds || []).slice();
        ListProjectIdsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListProjectIdsResponse();
        ListProjectIdsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.projectIds = _instance.projectIds || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.projectIds = _instance.projectIds || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListProjectIdsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.projectIds && _instance.projectIds.length) {
            _writer.writeRepeatedString(1, _instance.projectIds);
        }
    }
    get projectIds() {
        return this._projectIds;
    }
    set projectIds(value) {
        this._projectIds = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListProjectIdsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            projectIds: (this.projectIds || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            projectIds: (this.projectIds || []).slice()
        };
    }
}
ListProjectIdsResponse.id = 'ondewo.qa.ListProjectIdsResponse';
/**
 * Message implementation for ondewo.qa.GetProjectConfigRequest
 */
class GetProjectConfigRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetProjectConfigRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.projectId = _value.projectId;
        GetProjectConfigRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetProjectConfigRequest();
        GetProjectConfigRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.projectId = _instance.projectId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.projectId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetProjectConfigRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.projectId) {
            _writer.writeString(1, _instance.projectId);
        }
    }
    get projectId() {
        return this._projectId;
    }
    set projectId(value) {
        this._projectId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetProjectConfigRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            projectId: this.projectId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            projectId: this.projectId
        };
    }
}
GetProjectConfigRequest.id = 'ondewo.qa.GetProjectConfigRequest';
/**
 * Message implementation for ondewo.qa.GetProjectConfigResponse
 */
class GetProjectConfigResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetProjectConfigResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.configSerialized = _value.configSerialized;
        GetProjectConfigResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetProjectConfigResponse();
        GetProjectConfigResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.configSerialized = _instance.configSerialized || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.configSerialized = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetProjectConfigResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.configSerialized) {
            _writer.writeString(1, _instance.configSerialized);
        }
    }
    get configSerialized() {
        return this._configSerialized;
    }
    set configSerialized(value) {
        this._configSerialized = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetProjectConfigResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            configSerialized: this.configSerialized
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            configSerialized: this.configSerialized
        };
    }
}
GetProjectConfigResponse.id = 'ondewo.qa.GetProjectConfigResponse';
/**
 * Message implementation for ondewo.qa.UpdateDatabaseRequest
 */
class UpdateDatabaseRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateDatabaseRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.projectIds = (_value.projectIds || []).slice();
        UpdateDatabaseRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateDatabaseRequest();
        UpdateDatabaseRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.projectIds = _instance.projectIds || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.projectIds = _instance.projectIds || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateDatabaseRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.projectIds && _instance.projectIds.length) {
            _writer.writeRepeatedString(1, _instance.projectIds);
        }
    }
    get projectIds() {
        return this._projectIds;
    }
    set projectIds(value) {
        this._projectIds = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateDatabaseRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            projectIds: (this.projectIds || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            projectIds: (this.projectIds || []).slice()
        };
    }
}
UpdateDatabaseRequest.id = 'ondewo.qa.UpdateDatabaseRequest';
/**
 * Message implementation for ondewo.qa.UpdateDatabaseResponse
 */
class UpdateDatabaseResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateDatabaseResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.errorMessages = (_value.errorMessages || []).slice();
        UpdateDatabaseResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateDatabaseResponse();
        UpdateDatabaseResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.errorMessages = _instance.errorMessages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.errorMessages = _instance.errorMessages || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateDatabaseResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.errorMessages && _instance.errorMessages.length) {
            _writer.writeRepeatedString(1, _instance.errorMessages);
        }
    }
    get errorMessages() {
        return this._errorMessages;
    }
    set errorMessages(value) {
        this._errorMessages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateDatabaseResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            errorMessages: (this.errorMessages || []).slice()
        };
    }
}
UpdateDatabaseResponse.id = 'ondewo.qa.UpdateDatabaseResponse';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Qa.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_QA_CLIENT_SETTINGS = new InjectionToken('GRPC_QA_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for ondewo.qa.QA
 */
class QAClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary RPC for /ondewo.qa.QA/GetAnswer
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetAnswerResponse>>
             */
            getAnswer: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.qa.QA/GetAnswer',
                    requestData,
                    requestMetadata,
                    requestClass: GetAnswerRequest,
                    responseClass: GetAnswerResponse
                });
            },
            /**
             * Unary RPC for /ondewo.qa.QA/RunScraper
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RunScraperResponse>>
             */
            runScraper: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.qa.QA/RunScraper',
                    requestData,
                    requestMetadata,
                    requestClass: RunScraperRequest,
                    responseClass: RunScraperResponse
                });
            },
            /**
             * Unary RPC for /ondewo.qa.QA/UpdateDatabase
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UpdateDatabaseResponse>>
             */
            updateDatabase: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.qa.QA/UpdateDatabase',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateDatabaseRequest,
                    responseClass: UpdateDatabaseResponse
                });
            },
            /**
             * Unary RPC for /ondewo.qa.QA/RunTraining
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RunTrainingResponse>>
             */
            runTraining: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.qa.QA/RunTraining',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: RunTrainingResponse
                });
            },
            /**
             * Unary RPC for /ondewo.qa.QA/GetServerState
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetServerStateResponse>>
             */
            getServerState: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.qa.QA/GetServerState',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: GetServerStateResponse
                });
            },
            /**
             * Unary RPC for /ondewo.qa.QA/ListProjectIds
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ListProjectIdsResponse>>
             */
            listProjectIds: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.qa.QA/ListProjectIds',
                    requestData,
                    requestMetadata,
                    requestClass: googleProtobuf003.Empty,
                    responseClass: ListProjectIdsResponse
                });
            },
            /**
             * Unary RPC for /ondewo.qa.QA/GetProjectConfig
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetProjectConfigResponse>>
             */
            getProjectConfig: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/ondewo.qa.QA/GetProjectConfig',
                    requestData,
                    requestMetadata,
                    requestClass: GetProjectConfigRequest,
                    responseClass: GetProjectConfigResponse
                });
            }
        };
        this.client = clientFactory.createClient('ondewo.qa.QA', settings);
    }
    /**
     * Unary RPC for /ondewo.qa.QA/GetAnswer
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetAnswerResponse>
     */
    getAnswer(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getAnswer(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.qa.QA/RunScraper
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RunScraperResponse>
     */
    runScraper(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .runScraper(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.qa.QA/UpdateDatabase
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UpdateDatabaseResponse>
     */
    updateDatabase(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateDatabase(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.qa.QA/RunTraining
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RunTrainingResponse>
     */
    runTraining(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .runTraining(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.qa.QA/GetServerState
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetServerStateResponse>
     */
    getServerState(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getServerState(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.qa.QA/ListProjectIds
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ListProjectIdsResponse>
     */
    listProjectIds(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .listProjectIds(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary RPC for /ondewo.qa.QA/GetProjectConfig
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetProjectConfigResponse>
     */
    getProjectConfig(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getProjectConfig(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
QAClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: QAClient, deps: [{ token: GRPC_QA_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
QAClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: QAClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: QAClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_QA_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Generated bundle index. Do not edit.
 */

export { AddSessionLabelsRequest, AddTrainingPhrasesFromCSVRequest, AddTrainingPhrasesRequest, AddTrainingPhrasesResponse, AddUserToProjectRequest, Agent, AgentOfUserWithOwner, AgentSorting, AgentStatus, AgentView, AgentWithOwner, AgentsClient, AiServicesClient, AltSentence, AltTrainingPhrase, AudioEncoding, BatchCreateEntitiesRequest, BatchCreateParametersRequest, BatchCreateResponseMessagesRequest, BatchCreateTrainingPhrasesRequest, BatchDeleteEntitiesRequest, BatchDeleteEntitiesResponse, BatchDeleteEntityTypesRequest, BatchDeleteIntentsRequest, BatchDeleteParametersRequest, BatchDeleteParametersResponse, BatchDeleteResponseMessagesRequest, BatchDeleteResponseMessagesResponse, BatchDeleteTrainingPhrasesRequest, BatchDeleteTrainingPhrasesResponse, BatchEntitiesResponse, BatchGetEntitiesRequest, BatchGetParametersRequest, BatchGetResponseMessagesRequest, BatchGetTrainingPhrasesRequest, BatchParametersStatusResponse, BatchResponseMessagesStatusResponse, BatchTrainingPhrasesStatusResponse, BatchUpdateEntitiesRequest, BatchUpdateEntityTypesRequest, BatchUpdateEntityTypesResponse, BatchUpdateIntentsRequest, BatchUpdateIntentsResponse, BatchUpdateParametersRequest, BatchUpdateResponseMessagesRequest, BatchUpdateTrainingPhrasesRequest, BertAugEnrichmentConfig, BuildCacheRequest, CancelOperationRequest, ClassifyIntentsRequest, ClassifyIntentsResponse, CleanAllEntityTypesRequest, CleanAllEntityTypesResponse, CleanAllIntentsRequest, CleanAllIntentsResponse, CleanEntityTypeRequest, CleanEntityTypeResponse, CleanIntentRequest, CleanIntentResponse, Context, ContextsClient, CreateAgentRequest, CreateContextRequest, CreateEntityTypeRequest, CreateIntentRequest, CreateProjectRoleRequest, CreateServerRoleRequest, CreateSessionRequest, CreateSessionReviewRequest, CreateUserRequest, CustomHttpPattern, CustomPlatformInfo, DataEnrichmentConfig, DefaultProjectRole, DefaultServerRole, DeleteAgentRequest, DeleteAllContextsRequest, DeleteContextRequest, DeleteEntityTypeRequest, DeleteIntentRequest, DeleteOperationRequest, DeleteProjectRoleRequest, DeleteResourcesRequest, DeleteServerRoleRequest, DeleteSessionRequest, DeleteUserRequest, DetectIntentRequest, DetectIntentResponse, DetectedIntent, EntityDetected, EntityEnrichmentConfig, EntityType, EntityTypeBatch, EntityTypeCategory, EntityTypeFuzzyNerConfig, EntityTypeSorting, EntityTypeUpdate, EntityTypeView, EntityTypesClient, EntityValueSorting, EventInput, ExportAgentRequest, ExportAgentResponse, ExportBenchmarkAgentRequest, ExportBenchmarkAgentResponse, ExportResourcesRequest, ExportResourcesResponse, ExtractEntitiesFuzzyRequest, ExtractEntitiesRequest, ExtractEntitiesResponse, FastTextEnrichmentConfig, GPT2EnrichmentConfig, GRPC_AGENTS_CLIENT_SETTINGS, GRPC_AI_SERVICES_CLIENT_SETTINGS, GRPC_CONTEXTS_CLIENT_SETTINGS, GRPC_ENTITY_TYPES_CLIENT_SETTINGS, GRPC_INTENTS_CLIENT_SETTINGS, GRPC_OPERATIONS_CLIENT_SETTINGS, GRPC_PROJECT_ROLES_CLIENT_SETTINGS, GRPC_PROJECT_STATISTICS_CLIENT_SETTINGS, GRPC_QA_CLIENT_SETTINGS, GRPC_SERVER_STATISTICS_CLIENT_SETTINGS, GRPC_SESSIONS_CLIENT_SETTINGS, GRPC_USERS_CLIENT_SETTINGS, GRPC_UTILITIES_CLIENT_SETTINGS, GRPC_WEBHOOK_CLIENT_SETTINGS, GenerateResponsesRequest, GenerateResponsesResponse, GenerateUserSaysRequest, GenerateUserSaysResponse, GetAgentRequest, GetAgentStatisticsRequest, GetAgentStatisticsResponse, GetAlternativeSentencesRequest, GetAlternativeSentencesResponse, GetAlternativeTrainingPhrasesRequest, GetAlternativeTrainingPhrasesResponse, GetAnswerRequest, GetAnswerResponse, GetContextRequest, GetEntityTypeCountRequest, GetEntityTypeRequest, GetIntentCountRequest, GetIntentRequest, GetLatestSessionReviewRequest, GetModelStatusesRequest, GetModelStatusesResponse, GetOperationRequest, GetPlatformInfoResponse, GetPlatformMappingRequest, GetProjectConfigRequest, GetProjectConfigResponse, GetProjectElementStatRequest, GetProjectRoleRequest, GetProjectStatRequest, GetServerRoleRequest, GetServerStateResponse, GetSessionRequest, GetSessionReviewRequest, GetSynonymsRequest, GetSynonymsResponse, GetUserProjectCountRequest, GetUserRequest, GloVeEnrichmentConfig, Http, HttpRule, ImportAgentRequest, InitiationProtocol, InputAudioConfig, Intent, IntentAlgorithms, IntentBatch, IntentCategory, IntentClassified, IntentSorting, IntentTagRequest, IntentUpdate, IntentView, IntentsClient, LatLng, ListAgentsOfUserResponse, ListAgentsRequest, ListAgentsResponse, ListContextsRequest, ListContextsResponse, ListEntitiesRequest, ListEntitiesResponse, ListEntityTypesRequest, ListEntityTypesResponse, ListIntentsRequest, ListIntentsResponse, ListOperationsRequest, ListOperationsResponse, ListParametersRequest, ListParametersResponse, ListProjectIdsResponse, ListProjectPermissionsRequest, ListProjectPermissionsResponse, ListProjectRolesRequest, ListProjectRolesResponse, ListResponseMessagesRequest, ListResponseMessagesResponse, ListServerPermissionsRequest, ListServerPermissionsResponse, ListServerRolesRequest, ListServerRolesResponse, ListSessionLabelsRequest, ListSessionLabelsResponse, ListSessionReviewsRequest, ListSessionReviewsResponse, ListSessionsRequest, ListSessionsResponse, ListTrainingPhrasesRequest, ListTrainingPhrasesResponse, ListUserInfosResponse, ListUsersInProjectRequest, ListUsersInProjectResponse, ListUsersRequest, ListUsersResponse, LoginRequest, LoginResponse, Mode, ModelStatus, Operation, OperationMetadata, OperationsClient, OptimizeRankingMatchRequest, OptimizeRankingMatchResponse, OriginalDetectIntentRequest, PingRequest, PingResponse, PlatformMapping, ProjectRole, ProjectRoleView, ProjectRolesClient, ProjectStatisticsClient, QAClient, QueryInput, QueryParameters, QueryResult, RankingMatchOptimizationConfig, ReannotateEntitiesOptions, RemoveSessionLabelsRequest, RemoveUserFromProjectRequest, ReportFormat, ReportType, RestoreAgentRequest, RunScraperRequest, RunScraperResponse, RunTrainingResponse, ServerRole, ServerStatisticsClient, Session, SessionFilter, SessionInfo, SessionReview, SessionReviewStep, SessionStep, SessionsClient, SetAgentStatusRequest, SetResourcesRequest, SortingMode, StatResponse, Status, StreamingDetectIntentRequest, StreamingDetectIntentResponse, StreamingRecognitionResult, StringUpdate, Synonym, TextInput, ThesaurusEnrichmentConfig, TrackSessionStepRequest, TrainAgentRequest, TrainingPhraseCleanerOptions, TrainingPhraseStatus, UpdateAgentRequest, UpdateContextRequest, UpdateDatabaseRequest, UpdateDatabaseResponse, UpdateEntityTypeRequest, UpdateIntentRequest, UpdateProjectRoleRequest, UpdateServerRoleRequest, UpdateUserRequest, UrlFilter, User, UserInProject, UserInfo, UsersClient, UtilitiesClient, ValidateEmbeddedRegexRequest, ValidateEmbeddedRegexResponse, ValidateRegexRequest, ValidateRegexResponse, WebhookClient, WebhookRequest, WebhookResponse, Word2VecEnrichmentConfig, WordNetAugEnrichmentConfig, XLNetAugEnrichmentConfig };
//# sourceMappingURL=ondewo-nlu-client-angular.mjs.map
